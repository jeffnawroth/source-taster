/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/author/batch': {
    parameters: {
      query?: {
        /**
         * @description A comma-separated list of the fields to be returned. See the contents of Response Schema below for a list of all available fields that can be returned.
         *     The <code>authorId</code> field is always returned. If the fields parameter is omitted, only the <code>authorId</code> and <code>name</code> will be returned.
         *     <p>Use a period (“.”) for subfields of <code>papers</code>.<br><br>
         *     Examples:
         *     <ul>
         *         <li><code>fields=name,affiliations,papers</code></li>
         *         <li><code>fields=url,papers.year,papers.authors</code></li>
         *     </ul>
         */
        fields?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Get details for multiple authors at once
     * @description * Fields is a single-value string parameter, not a multi-value one.
     *     It is a query parameter, not to be submitted in the POST request's body.
     *
     *     In python:
     *
     *         r = requests.post(
     *             'https://api.semanticscholar.org/graph/v1/author/batch',
     *             params={'fields': 'name,hIndex,citationCount'},
     *             json={"ids":["1741101", "1780531"]}
     *         )
     *         print(json.dumps(r.json(), indent=2))
     *
     *         [
     *           {
     *             "authorId": "1741101",
     *             "name": "Oren Etzioni",
     *             "citationCount": 34803,
     *             "hIndex": 86
     *           },
     *           {
     *             "authorId": "1780531",
     *             "name": "Daniel S. Weld",
     *             "citationCount": 35526,
     *             "hIndex": 89
     *           }
     *         ]
     *
     *     Other Examples:
     *     <ul>
     *         <li><code>https://api.semanticscholar.org/graph/v1/author/batch</code></li>
     *         <ul>
     *             <li><code>{"ids":["1741101", "1780531", "48323507"]}</code></li>
     *             <li>Returns details for 3 authors.</li>
     *             <li>Each author returns the field authorId and name if no other fields are specified.</li>
     *         </ul>
     *         <li><code>https://api.semanticscholar.org/graph/v1/author/batch?fields=url,name,paperCount,papers,papers.title,papers.openAccessPdf</code></li>
     *         <ul>
     *             <li><code>{"ids":["1741101", "1780531", "48323507"]}</code></li>
     *             <li>Returns authorID, url, name, paperCount, and list of papers for 3 authors.</li>
     *             <li>Each paper has its paperID, title, and link if available.</li>
     *         </ul>
     *     </ul>
     *     <br>
     *     Limitations:
     *     <ul>
     *         <li>Can only process 1,000 author ids at a time.</li>
     *         <li>Can only return up to 10 MB of data at a time.</li>
     *     </ul>
     */
    post: operations['post_graph_get_authors']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/author/search': {
    parameters: {
      query: {
        /** @description Used for pagination. When returning a list of results, start with the element at this position in the list. */
        offset?: number
        /**
         * @description The maximum number of results to return.<br>
         *     Must be <= 1000
         */
        limit?: number
        /**
         * @description A comma-separated list of the fields to be returned. See the contents of the <code>data</code> array in Response Schema below for a list of all available fields that can be returned.
         *     The <code>authorId</code> field is always returned. If the fields parameter is omitted, only the <code>authorId</code> and <code>name</code> will be returned.
         *     <p>Use a period (“.”) for subfields of <code>papers</code>.<br><br>
         *     Examples:
         *     <ul>
         *         <li><code>fields=name,affiliations,papers</code></li>
         *         <li><code>fields=url,papers.year,papers.authors</code></li>
         *     </ul>
         */
        fields?: string
        /**
         * @description A plain-text search query string.
         *     No special query syntax is supported.
         *     Hyphenated query terms yield no matches (replace it with space to find matches)
         */
        query: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Search for authors by name
     * @description Specifying <code>papers</code> fields in the request will return all papers linked to each author in the results. Set a <code>limit</code> on the search results to reduce output size and latency.<br><br>
     *     Examples:
     *     <ul>
     *         <li><code>https://api.semanticscholar.org/graph/v1/author/search?query=adam+smith</code></li>
     *         <ul>
     *             <li>Returns with total=490, offset=0, next=100, and data is a list of 100 authors.</li>
     *             <li>Each author has their authorId and name. </li>
     *         </ul>
     *         <li><code>https://api.semanticscholar.org/graph/v1/author/search?query=adam+smith&fields=name,url,papers.title,papers.year&limit=5</code></li>
     *         <ul>
     *             <li>Returns with total=490, offset=0, next=5, and data is a list of 5 authors.</li>
     *             <li>Each author has authorId, name, url, and a list of their papers title and year.</li>
     *         </ul>
     *         <li><code>https://api.semanticscholar.org/graph/v1/author/search?query=totalGarbageNonsense</code></li>
     *         <ul>
     *             <li>Returns with total = 0, offset=0, and data is a list of 0 author.</li>
     *         </ul>
     *         <br>
     *         Limitations:
     *     <ul>
     *         <li>Can only return up to 10 MB of data at a time.</li>
     *     </ul>
     */
    get: operations['get_graph_get_author_search']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/author/{author_id}': {
    parameters: {
      query?: {
        /**
         * @description A comma-separated list of the fields to be returned. See the contents of Response Schema below for a list of all available fields that can be returned.
         *     The <code>authorId</code> field is always returned. If the fields parameter is omitted, only the <code>authorId</code> and <code>name</code> will be returned.
         *     <p>Use a period (“.”) for subfields of <code>papers</code>.<br><br>
         *     Examples:
         *     <ul>
         *         <li><code>fields=name,affiliations,papers</code></li>
         *         <li><code>fields=url,papers.year,papers.authors</code></li>
         *     </ul>
         */
        fields?: string
      }
      header?: never
      path: {
        author_id: string
      }
      cookie?: never
    }
    /**
     * Details about an author
     * @description Examples:
     *     <ul>
     *         <li><code>https://api.semanticscholar.org/graph/v1/author/1741101</code></li>
     *         <ul>
     *             <li>Returns the author's authorId and name.</li>
     *         </ul>
     *         <li><code>https://api.semanticscholar.org/graph/v1/author/1741101?fields=url,papers</code></li>
     *         <ul>
     *             <li>Returns the author's authorId, url, and list of papers.  </li>
     *             <li>Each paper has its paperId plus its title.</li>
     *         </ul>
     *         <li><code>https://api.semanticscholar.org/graph/v1/author/1741101?fields=url,papers.abstract,papers.authors</code></li>
     *         <ul>
     *             <li>Returns the author's authorId, url, and list of papers.  </li>
     *             <li>Each paper has its paperId, abstract, and list of authors.</li>
     *             <li>In that list of authors, each author has their authorId and name.</li>
     *         </ul>
     *         <br>
     *         Limitations:
     *         <ul>
     *             <li>Can only return up to 10 MB of data at a time.</li>
     *         </ul>
     *     </ul>
     */
    get: operations['get_graph_get_author']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/author/{author_id}/papers': {
    parameters: {
      query?: {
        /** @description Used for pagination. When returning a list of results, start with the element at this position in the list. */
        offset?: number
        /**
         * @description The maximum number of results to return.<br>
         *     Must be <= 1000
         */
        limit?: number
        /**
         * @description A comma-separated list of the fields to be returned. See the contents of the <code>data</code> array in Response Schema below for a list of all available fields that can be returned.
         *     The <code>paperId</code> field is always returned. If the fields parameter is omitted, only the <code>paperId</code> and <code>title</code> will be returned. To fetch more references or citations per paper, reduce the number of papers in the batch with <code>limit=</code>.
         *     <p>Use a period (“.”) for subfields of <code>citations</code> and <code>references</code>.<br><br>
         *     Examples:
         *     <ul>
         *         <li><code>fields=title,fieldsOfStudy,references</code></li>
         *         <li><code>fields=abstract,citations.url,citations.venue</code></li>
         *     </ul>
         */
        fields?: string
      }
      header?: never
      path: {
        author_id: string
      }
      cookie?: never
    }
    /**
     * Details about an author's papers
     * @description Fetch the papers of an author in batches.<br>
     *     Only retrieves the most recent 10,000 citations/references for papers belonging to the batch.<br>
     *     To retrieve the full set of citations for a paper,
     *     use the /paper/{paper_id}/citations endpoint
     *     <br><br>
     *     Examples:
     *     <ul>
     *         <li><code>https://api.semanticscholar.org/graph/v1/author/1741101/papers</code></li>
     *         <ul>
     *             <li>Return with offset=0, and data is a list of the first 100 papers.</li>
     *             <li>Each paper has its paperId and title.</li>
     *         </ul>
     *         <li><code>https://api.semanticscholar.org/graph/v1/author/1741101/papers?fields=url,year,authors&limit=2</code></li>
     *         <ul>
     *             <li>Returns with offset=0, next=2, and data is a list of 2 papers.</li>
     *             <li>Each paper has its paperId, url, year, and list of authors.</li>
     *             <li>Each author has their authorId and name.</li>
     *         </ul>
     *         <li><code>https://api.semanticscholar.org/graph/v1/author/1741101/papers?fields=citations.authors&offset=260</code></li>
     *         <ul>
     *             <li>Returns with offset=260, and data is a list of the last 4 papers.</li>
     *             <li>Each paper has its paperId and a list of citations.</li>
     *             <li>Each citation has its paperId and a list of authors.</li>
     *             <li>Each author has their authorId and name.</li>
     *         </ul>
     *     </ul>
     */
    get: operations['get_graph_get_author_papers']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/paper/autocomplete': {
    parameters: {
      query: {
        /** @description Plain-text partial query string. Will be truncated to first 100 characters. */
        query: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Suggest paper query completions
     * @description To support interactive query-completion, return minimal information about papers matching a partial query
     *
     *     Example:
     *     <code>https://api.semanticscholar.org/graph/v1/paper/autocomplete?query=semanti</code>
     */
    get: operations['get_graph_get_paper_autocomplete']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/paper/batch': {
    parameters: {
      query?: {
        /**
         * @description A comma-separated list of the fields to be returned. See the contents of Response Schema below for a list of all available fields that can be returned.
         *     The <code>paperId</code> field is always returned. If the fields parameter is omitted, only the <code>paperId</code> and <code>title</code> will be returned.
         *     <p>Use a period (“.”) for fields that have version numbers or subfields, such as the <code>embedding</code>, <code>authors</code>, <code>citations</code>, and <code>references</code> fields:
         *     <ul>
         *         <li>When requesting <code>authors</code>, the <code>authorId</code> and <code>name</code> subfields are returned by default. To request other subfields, use the format <code>author.url,author.paperCount</code>, etc. See the Response Schema below for available subfields.</li>
         *         <li>When requesting <code>citations</code> and <code>references</code>, the <code>paperId</code> and <code>title</code> subfields are returned by default. To request other subfields, use the format <code>citations.title,citations.abstract</code>, etc. See the Response Schema below for available subfields.</li>
         *         <li>When requesting <code>embedding</code>, the default <a href="https://github.com/allenai/specter">Spector embedding version</a> is v1. Specify <code>embedding.specter_v2</code> to select v2 embeddings.</li>
         *     </ul>
         *     Examples:
         *     <ul>
         *         <li><code>fields=title,url</code></li>
         *         <li><code>fields=title,embedding.specter_v2</code></li>
         *         <li><code>fields=title,authors,citations.title,citations.abstract</code></li>
         *     </ul>
         */
        fields?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Get details for multiple papers at once
     * @description * Fields is a single-value string parameter, not a multi-value one.
     *     It is a query parameter, not to be submitted in the POST request's body.
     *
     *     In python:
     *
     *         r = requests.post(
     *             'https://api.semanticscholar.org/graph/v1/paper/batch',
     *             params={'fields': 'referenceCount,citationCount,title'},
     *             json={"ids": ["649def34f8be52c8b66281af98ae884c09aef38b", "ARXIV:2106.15928"]}
     *         )
     *         print(json.dumps(r.json(), indent=2))
     *
     *         [
     *           {
     *             "paperId": "649def34f8be52c8b66281af98ae884c09aef38b",
     *             "title": "Construction of the Literature Graph in Semantic Scholar",
     *             "referenceCount": 27,
     *             "citationCount": 299
     *           },
     *           {
     *             "paperId": "f712fab0d58ae6492e3cdfc1933dae103ec12d5d",
     *             "title": "Reinfection and low cross-immunity as drivers of epidemic resurgence under high seroprevalence: a model-based approach with application to Amazonas, Brazil",
     *             "referenceCount": 13,
     *             "citationCount": 0
     *           }
     *         ]
     *
     *     Other Examples:
     *     <ul>
     *         <li><code>https://api.semanticscholar.org/graph/v1/paper/batch</code></li>
     *         <ul>
     *             <li><code>{"ids":["649def34f8be52c8b66281af98ae884c09aef38b", "ARXIV:2106.15928"]}</code></li>
     *             <li>Returns details for 2 papers.</li>
     *             <li>Each paper has its paperId and title.  </li>
     *         </ul>
     *         <li><code>https://api.semanticscholar.org/graph/v1/paper/batch?fields=title,isOpenAccess,openAccessPdf,authors</code></li>
     *         <ul>
     *             <li><code>{"ids":["649def34f8be52c8b66281af98ae884c09aef38b", "ARXIV:2106.15928"]}</code></li>
     *             <li>Returns all requested info plus paper IDs for 2 papers.</li>
     *         </ul>
     *     </ul>
     *     <br>
     *     Limitations:
     *     <ul>
     *         <li>Can only process 500 paper ids at a time.</li>
     *         <li>Can only return up to 10 MB of data at a time.</li>
     *         <li>Can only return up to 9999 citations at a time.</li>
     *         <li>For a list of supported IDs reference the "Details about a paper" endpoint.</li>
     *     </ul>
     */
    post: operations['post_graph_get_papers']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/paper/search': {
    parameters: {
      query: {
        /**
         * @description A plain-text search query string.
         *     No special query syntax is supported.
         *     Hyphenated query terms yield no matches (replace it with space to find matches)
         *
         *     See our <a href="https://medium.com/ai2-blog/building-a-better-search-engine-for-semantic-scholar-ea23a0b661e7">blog post</a>
         *     for a description of our search relevance algorithm.
         *
         *     Example:
         *     <code>graph/v1/paper/search?query=generative ai</code>
         */
        query: string
        /**
         * @description A comma-separated list of the fields to be returned. See the contents of the <code>data</code> array in Response Schema below for a list of all available fields that can be returned.
         *     The <code>paperId</code> field is always returned. If the fields parameter is omitted, only the <code>paperId</code> and <code>title</code> will be returned.
         *     <p>Use a period (“.”) for fields that have version numbers or subfields, such as the <code>embedding</code>, <code>authors</code>, <code>citations</code>, and <code>references</code> fields:
         *     <ul>
         *         <li>When requesting <code>authors</code>, the <code>authorId</code> and <code>name</code> subfields are returned by default. To request other subfields, use the format <code>author.url,author.paperCount</code>, etc. See the Response Schema below for available subfields.</li>
         *         <li>When requesting <code>citations</code> and <code>references</code>, the <code>paperId</code> and <code>title</code> subfields are returned by default. To request other subfields, use the format <code>citations.title,citations.abstract</code>, etc. See the Response Schema below for available subfields.</li>
         *         <li>When requesting <code>embedding</code>, the default <a href="https://github.com/allenai/specter">Spector embedding version</a> is v1. Specify <code>embedding.specter_v2</code> to select v2 embeddings.</li>
         *     </ul>
         *     Examples:
         *     <ul>
         *         <li><code>fields=title,url</code></li>
         *         <li><code>fields=title,embedding.specter_v2</code></li>
         *         <li><code>fields=title,authors,citations.title,citations.abstract</code></li>
         *     </ul>
         */
        fields?: string
        /**
         * @description Restricts results to any of the following paper publication types:
         *     <ul>
         *         <li>Review</li>
         *         <li>JournalArticle</li>
         *         <li>CaseReport</li>
         *         <li>ClinicalTrial</li>
         *         <li>Conference</li>
         *         <li>Dataset</li>
         *         <li>Editorial</li>
         *         <li>LettersAndComments</li>
         *         <li>MetaAnalysis</li>
         *         <li>News</li>
         *         <li>Study</li>
         *         <li>Book</li>
         *         <li>BookSection</li>
         *     </ul>
         *
         *     Use a comma-separated list to include papers with any of the listed publication types. <br><br>
         *     Example: <code>Review,JournalArticle</code> will return papers with publication types Review and/or JournalArticle.
         */
        publicationTypes?: string
        /** @description Restricts results to only include papers with a public PDF. This parameter does not accept any values. */
        openAccessPdf?: string
        /**
         * @description Restricts results to only include papers with the minimum number of citations.
         *     <br>
         *     <br>
         *     Example:
         *     <code>minCitationCount=200</code>
         */
        minCitationCount?: string
        /**
         * @description Restricts results to the given range of publication dates or years (inclusive). Accepts the format <code>&lt;startDate&gt;:&lt;endDate&gt;</code> with each date in <code>YYYY-MM-DD</code> format.
         *     <br>
         *     <br>
         *     Each term is optional, allowing for specific dates, fixed ranges, or open-ended ranges. In addition, prefixes are suported as a shorthand, e.g. <code>2020-06</code> matches all dates in June 2020.
         *     <br>
         *     <br>
         *     Specific dates are not known for all papers, so some records returned with this filter will have a <code>null</code> value for </code>publicationDate</code>. <code>year</code>, however, will always be present.
         *     For records where a specific publication date is not known, they will be treated as if published on January 1st of their publication year.
         *     <br>
         *     <br>
         *     Examples:
         *     <ul>
         *         <li><code>2019-03-05</code> on March 3rd, 2019</li>
         *         <li><code>2019-03</code> during March 2019</li>
         *         <li><code>2019</code> during 2019</li>
         *         <li><code>2016-03-05:2020-06-06</code> as early as March 5th, 2016 or as late as June 6th, 2020</li>
         *         <li><code>1981-08-25:</code> on or after August 25th, 1981</li>
         *         <li><code>:2015-01</code> before or on January 31st, 2015</li>
         *         <li><code>2015:2020</code> between January 1st, 2015 and December 31st, 2020</li>
         *     </ul>
         */
        publicationDateOrYear?: string
        /**
         * @description Restricts results to the given publication year or range of years (inclusive).
         *     <br>
         *     <br>
         *     Examples:
         *     <ul>
         *         <li><code>2019</code> in 2019</li>
         *         <li><code>2016-2020</code> as early as 2016 or as late as 2020</li>
         *         <li><code>2010-</code> during or after 2010</li>
         *         <li><code>-2015</code> before or during 2015</li>
         *     </ul>
         */
        year?: string
        /**
         * @description Restricts results to papers published in the given venues, formatted as a comma-separated list. <br><br>
         *     Input could also be an ISO4 abbreviation.
         *     Examples include:
         *     <ul>
         *         <li>Nature</li>
         *         <li>New England Journal of Medicine</li>
         *         <li>Radiology</li>
         *         <li>N. Engl. J. Med.</li>
         *     </ul>
         *
         *     Example: <code>Nature,Radiology</code> will return papers from venues Nature and/or Radiology.
         */
        venue?: string
        /**
         * @description Restricts results to papers in the given fields of study, formatted as a comma-separated list:
         *     <ul>
         *     <li>Computer Science</li>
         *     <li>Medicine</li>
         *     <li>Chemistry</li>
         *     <li>Biology</li>
         *     <li>Materials Science</li>
         *     <li>Physics</li>
         *     <li>Geology</li>
         *     <li>Psychology</li>
         *     <li>Art</li>
         *     <li>History</li>
         *     <li>Geography</li>
         *     <li>Sociology</li>
         *     <li>Business</li>
         *     <li>Political Science</li>
         *     <li>Economics</li>
         *     <li>Philosophy</li>
         *     <li>Mathematics</li>
         *     <li>Engineering</li>
         *     <li>Environmental Science</li>
         *     <li>Agricultural and Food Sciences</li>
         *     <li>Education</li>
         *     <li>Law</li>
         *     <li>Linguistics</li>
         *     </ul>
         *
         *     Example: <code>Physics,Mathematics</code> will return papers with either Physics or Mathematics in their list of fields-of-study.
         */
        fieldsOfStudy?: string
        /** @description Used for pagination. When returning a list of results, start with the element at this position in the list. */
        offset?: number
        /**
         * @description The maximum number of results to return.<br>
         *     Must be <= 100
         */
        limit?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Paper relevance search
     * @description Examples:
     *     <ul>
     *       <li><code>https://api.semanticscholar.org/graph/v1/paper/search?query=covid+vaccination&offset=100&limit=3</code></li>
     *       <ul>
     *         <li>Returns with total=576278, offset=100, next=103, and data is a list of 3 papers.</li>
     *         <li>Each paper has its paperId and title.  </li>
     *       </ul>
     *       <li><code>https://api.semanticscholar.org/graph/v1/paper/search?query=covid&fields=url,abstract,authors</code></li>
     *       <ul>
     *         <li>Returns with total=639637, offset=0, next=100, and data is a list of 100 papers.</li>
     *         <li>Each paper has paperId, url, abstract, and a list of authors.</li>
     *         <li>Each author under that list has authorId and name.</li>
     *       </ul>
     *       <li><code>https://api.semanticscholar.org/graph/v1/paper/search?query=totalGarbageNonsense</code></li>
     *       <ul>
     *         <li>Returns with total=0, offset=0, and data is a list of 0 papers.</li>
     *       </ul>
     *       <li><code>https://api.semanticscholar.org/graph/v1/paper/search?query=covid&year=2020-2023&openAccessPdf&fieldsOfStudy=Physics,Philosophy&fields=title,year,authors</code></li>
     *       <ul>
     *         <li>Returns with total=8471, offset=0, next=10, and data is a list of 10 papers. </li>
     *         <li>Filters to include only papers published between 2020-2023.</li>
     *         <li>Filters to include only papers with open access PDFs.</li>
     *         <li>Filters to include only papers that have a field of study either matching Physics or Philosophy.</li>
     *         <li>Each paper has the fields paperId, title, year, and authors.</li>
     *       </ul>
     *       <br>
     *         Limitations:
     *         <ul>
     *             <li>Can only return up to 1,000 relevance-ranked results. For larger queries, see "/search/bulk" or the Datasets API.</li>
     *             <li>Can only return up to 10 MB of data at a time.</li>
     *         </ul>
     *     </ul>
     */
    get: operations['get_graph_paper_relevance_search']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/paper/search/bulk': {
    parameters: {
      query: {
        /**
         * @description Text query that will be matched against the paper's title and abstract. All terms are stemmed in English. By default all terms in the query must be present in the paper.
         *
         *     The match query supports the following syntax:
         *     <ul>
         *     <li><code>+</code> for AND operation</li>
         *     <li><code>|</code> for OR operation</li>
         *     <li><code>-</code> negates a term </li>
         *     <li><code>"</code> collects terms into a phrase</li>
         *     <li><code>*</code> can be used to match a prefix</li>
         *         <li><code>(</code> and <code>)</code> for precedence</li>
         *     <li><code>~N</code> after a word matches within the edit distance of N (Defaults to 2 if N is omitted)</li>
         *     <li><code>~N</code> after a phrase matches with the phrase terms separated up to N terms apart (Defaults to 2 if N is omitted)</li>
         *     </ul>
         *
         *     Examples:
         *     <ul>
         *         <li><code>fish ladder</code> matches papers that contain "fish" and "ladder"</li>
         *         <li><code>fish -ladder</code> matches papers that contain "fish" but not "ladder"</li>
         *         <li><code>fish | ladder</code> matches papers that contain "fish" or "ladder"</li>
         *         <li><code>"fish ladder"</code> matches papers that contain the phrase "fish ladder"</li>
         *         <li><code>(fish ladder) | outflow</code> matches papers that contain "fish" and "ladder" OR "outflow"</li>
         *         <li><code>fish~</code> matches papers that contain "fish", "fist", "fihs", etc. </li>
         *         <li><code>"fish ladder"~3</code> mathces papers that contain the phrase "fish ladder" or "fish is on a ladder"</li>
         *     </ul>
         */
        query: string
        /** @description Used for pagination. This string token is provided when the original query returns, and is used to fetch the next batch of papers. Each call will return a new token. */
        token?: string
        /**
         * @description A comma-separated list of the fields to be returned. See the contents of the <code>data</code> array in Response Schema below for a list of all available fields that can be returned.<br><br>
         *     The <code>paperId</code> field is always returned. If the fields parameter is omitted, only the <code>paperId</code> and <code>title</code> will be returned.<br><br>
         *     Examples: <code>https://api.semanticscholar.org/graph/v1/paper/search/bulk?query=covid&fields=venue,s2FieldsOfStudy</code>
         */
        fields?: string
        /**
         * @description Provides the option to sort the results by the following fields:
         *     <ul>
         *         <li><code>paperId</code></li>
         *         <li><code>publicationDate</code></li>
         *         <li><code>citationCount</code></li>
         *     </ul>
         *     Uses the format <code>field:order</code>. Ties are broken by <code>paperId</code>. The default field is <code>paperId</code> and the default order is asc. Records for which the sort value are not defined will appear at the end of sort, regardless of asc/desc order.
         *     <br>
         *     <br>
         *     Examples:
         *     <ul>
         *         <li><code>publicationDate:asc</code> - return oldest papers first.</li>
         *         <li><code>citationCount:desc</code> - return most highly-cited papers first.</li>
         *         <li><code>paperId</code> - return papers in ID order, low-to-high.</li>
         *     </ul>
         *     <br>
         *     Please be aware that if the relevant data changes while paging through results, records can be returned in an unexpected way. The default <code>paperId</code> sort avoids this edge case.
         */
        sort?: string
        /**
         * @description Restricts results to any of the following paper publication types:
         *     <ul>
         *         <li>Review</li>
         *         <li>JournalArticle</li>
         *         <li>CaseReport</li>
         *         <li>ClinicalTrial</li>
         *         <li>Conference</li>
         *         <li>Dataset</li>
         *         <li>Editorial</li>
         *         <li>LettersAndComments</li>
         *         <li>MetaAnalysis</li>
         *         <li>News</li>
         *         <li>Study</li>
         *         <li>Book</li>
         *         <li>BookSection</li>
         *     </ul>
         *
         *     Use a comma-separated list to include papers with any of the listed publication types. <br><br>
         *     Example: <code>Review,JournalArticle</code> will return papers with publication types Review and/or JournalArticle.
         */
        publicationTypes?: string
        /** @description Restricts results to only include papers with a public PDF. This parameter does not accept any values. */
        openAccessPdf?: string
        /**
         * @description Restricts results to only include papers with the minimum number of citations.
         *     <br>
         *     <br>
         *     Example:
         *     <code>minCitationCount=200</code>
         */
        minCitationCount?: string
        /**
         * @description Restricts results to the given range of publication dates or years (inclusive). Accepts the format <code>&lt;startDate&gt;:&lt;endDate&gt;</code> with each date in <code>YYYY-MM-DD</code> format.
         *     <br>
         *     <br>
         *     Each term is optional, allowing for specific dates, fixed ranges, or open-ended ranges. In addition, prefixes are suported as a shorthand, e.g. <code>2020-06</code> matches all dates in June 2020.
         *     <br>
         *     <br>
         *     Specific dates are not known for all papers, so some records returned with this filter will have a <code>null</code> value for </code>publicationDate</code>. <code>year</code>, however, will always be present.
         *     For records where a specific publication date is not known, they will be treated as if published on January 1st of their publication year.
         *     <br>
         *     <br>
         *     Examples:
         *     <ul>
         *         <li><code>2019-03-05</code> on March 3rd, 2019</li>
         *         <li><code>2019-03</code> during March 2019</li>
         *         <li><code>2019</code> during 2019</li>
         *         <li><code>2016-03-05:2020-06-06</code> as early as March 5th, 2016 or as late as June 6th, 2020</li>
         *         <li><code>1981-08-25:</code> on or after August 25th, 1981</li>
         *         <li><code>:2015-01</code> before or on January 31st, 2015</li>
         *         <li><code>2015:2020</code> between January 1st, 2015 and December 31st, 2020</li>
         *     </ul>
         */
        publicationDateOrYear?: string
        /**
         * @description Restricts results to the given publication year or range of years (inclusive).
         *     <br>
         *     <br>
         *     Examples:
         *     <ul>
         *         <li><code>2019</code> in 2019</li>
         *         <li><code>2016-2020</code> as early as 2016 or as late as 2020</li>
         *         <li><code>2010-</code> during or after 2010</li>
         *         <li><code>-2015</code> before or during 2015</li>
         *     </ul>
         */
        year?: string
        /**
         * @description Restricts results to papers published in the given venues, formatted as a comma-separated list. <br><br>
         *     Input could also be an ISO4 abbreviation.
         *     Examples include:
         *     <ul>
         *         <li>Nature</li>
         *         <li>New England Journal of Medicine</li>
         *         <li>Radiology</li>
         *         <li>N. Engl. J. Med.</li>
         *     </ul>
         *
         *     Example: <code>Nature,Radiology</code> will return papers from venues Nature and/or Radiology.
         */
        venue?: string
        /**
         * @description Restricts results to papers in the given fields of study, formatted as a comma-separated list:
         *     <ul>
         *     <li>Computer Science</li>
         *     <li>Medicine</li>
         *     <li>Chemistry</li>
         *     <li>Biology</li>
         *     <li>Materials Science</li>
         *     <li>Physics</li>
         *     <li>Geology</li>
         *     <li>Psychology</li>
         *     <li>Art</li>
         *     <li>History</li>
         *     <li>Geography</li>
         *     <li>Sociology</li>
         *     <li>Business</li>
         *     <li>Political Science</li>
         *     <li>Economics</li>
         *     <li>Philosophy</li>
         *     <li>Mathematics</li>
         *     <li>Engineering</li>
         *     <li>Environmental Science</li>
         *     <li>Agricultural and Food Sciences</li>
         *     <li>Education</li>
         *     <li>Law</li>
         *     <li>Linguistics</li>
         *     </ul>
         *
         *     Example: <code>Physics,Mathematics</code> will return papers with either Physics or Mathematics in their list of fields-of-study.
         */
        fieldsOfStudy?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Paper bulk search
     * @description Behaves similarly to <code>/paper/search</code>, but is intended for bulk retrieval of basic paper data without search relevance:
     *     <ul>
     *     <li>Text query is optional and supports boolean logic for document matching.</li>
     *     <li>Papers can be filtered using various criteria.</li>
     *     <li>Up to 1,000 papers will be returned in each call.</li>
     *     <li>If there are more matching papers, a continuation "token" will be present.</li>
     *     <li>The query can be repeated with the token param added to efficiently continue fetching matching papers.</li>
     *     </ul>
     *     <br>
     *     Returns a structure with an estimated total matches, batch of matching papers, and a continuation token if more results are available.
     *     <br>
     *     Limitations:
     *     <ul>
     *     <li>Nested paper data, such as citations, references, etc, is not available via this method.</li>
     *     <li>Up to 10,000,000 papers can be fetched via this method. For larger needs, please use the <a href="datasets/">Datasets API</a> to retrieve full copies of the corpus.</li>
     *     </ul>
     */
    get: operations['get_graph_paper_bulk_search']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/paper/search/match': {
    parameters: {
      query: {
        /**
         * @description A plain-text search query string.
         *     No special query syntax is supported.
         *
         *     See our <a href="https://medium.com/ai2-blog/building-a-better-search-engine-for-semantic-scholar-ea23a0b661e7">blog post</a>
         *     for a description of our search relevance algorithm.
         */
        query: string
        /**
         * @description A comma-separated list of the fields to be returned. See the contents of the <code>data</code> array in Response Schema below for a list of all available fields that can be returned.
         *     The <code>paperId</code> field is always returned. If the fields parameter is omitted, only the <code>paperId</code> and <code>title</code> will be returned.
         *     <p>Use a period (“.”) for fields that have version numbers or subfields, such as the <code>embedding</code>, <code>authors</code>, <code>citations</code>, and <code>references</code> fields:
         *     <ul>
         *         <li>When requesting <code>authors</code>, the <code>authorId</code> and <code>name</code> subfields are returned by default. To request other subfields, use the format <code>author.url,author.paperCount</code>, etc. See the Response Schema below for available subfields.</li>
         *         <li>When requesting <code>citations</code> and <code>references</code>, the <code>paperId</code> and <code>title</code> subfields are returned by default. To request other subfields, use the format <code>citations.title,citations.abstract</code>, etc. See the Response Schema below for available subfields.</li>
         *         <li>When requesting <code>embedding</code>, the default <a href="https://github.com/allenai/specter">Spector embedding version</a> is v1. Specify <code>embedding.specter_v2</code> to select v2 embeddings.</li>
         *     </ul>
         *     Examples:
         *     <ul>
         *         <li><code>fields=title,url</code></li>
         *         <li><code>fields=title,embedding.specter_v2</code></li>
         *         <li><code>fields=title,authors,citations.title,citations.abstract</code></li>
         *     </ul>
         */
        fields?: string
        /**
         * @description Restricts results to any of the following paper publication types:
         *     <ul>
         *         <li>Review</li>
         *         <li>JournalArticle</li>
         *         <li>CaseReport</li>
         *         <li>ClinicalTrial</li>
         *         <li>Conference</li>
         *         <li>Dataset</li>
         *         <li>Editorial</li>
         *         <li>LettersAndComments</li>
         *         <li>MetaAnalysis</li>
         *         <li>News</li>
         *         <li>Study</li>
         *         <li>Book</li>
         *         <li>BookSection</li>
         *     </ul>
         *
         *     Use a comma-separated list to include papers with any of the listed publication types. <br><br>
         *     Example: <code>Review,JournalArticle</code> will return papers with publication types Review and/or JournalArticle.
         */
        publicationTypes?: string
        /** @description Restricts results to only include papers with a public PDF. This parameter does not accept any values. */
        openAccessPdf?: string
        /**
         * @description Restricts results to only include papers with the minimum number of citations.
         *     <br>
         *     <br>
         *     Example:
         *     <code>minCitationCount=200</code>
         */
        minCitationCount?: string
        /**
         * @description Restricts results to the given range of publication dates or years (inclusive). Accepts the format <code>&lt;startDate&gt;:&lt;endDate&gt;</code> with each date in <code>YYYY-MM-DD</code> format.
         *     <br>
         *     <br>
         *     Each term is optional, allowing for specific dates, fixed ranges, or open-ended ranges. In addition, prefixes are suported as a shorthand, e.g. <code>2020-06</code> matches all dates in June 2020.
         *     <br>
         *     <br>
         *     Specific dates are not known for all papers, so some records returned with this filter will have a <code>null</code> value for </code>publicationDate</code>. <code>year</code>, however, will always be present.
         *     For records where a specific publication date is not known, they will be treated as if published on January 1st of their publication year.
         *     <br>
         *     <br>
         *     Examples:
         *     <ul>
         *         <li><code>2019-03-05</code> on March 3rd, 2019</li>
         *         <li><code>2019-03</code> during March 2019</li>
         *         <li><code>2019</code> during 2019</li>
         *         <li><code>2016-03-05:2020-06-06</code> as early as March 5th, 2016 or as late as June 6th, 2020</li>
         *         <li><code>1981-08-25:</code> on or after August 25th, 1981</li>
         *         <li><code>:2015-01</code> before or on January 31st, 2015</li>
         *         <li><code>2015:2020</code> between January 1st, 2015 and December 31st, 2020</li>
         *     </ul>
         */
        publicationDateOrYear?: string
        /**
         * @description Restricts results to the given publication year or range of years (inclusive).
         *     <br>
         *     <br>
         *     Examples:
         *     <ul>
         *         <li><code>2019</code> in 2019</li>
         *         <li><code>2016-2020</code> as early as 2016 or as late as 2020</li>
         *         <li><code>2010-</code> during or after 2010</li>
         *         <li><code>-2015</code> before or during 2015</li>
         *     </ul>
         */
        year?: string
        /**
         * @description Restricts results to papers published in the given venues, formatted as a comma-separated list. <br><br>
         *     Input could also be an ISO4 abbreviation.
         *     Examples include:
         *     <ul>
         *         <li>Nature</li>
         *         <li>New England Journal of Medicine</li>
         *         <li>Radiology</li>
         *         <li>N. Engl. J. Med.</li>
         *     </ul>
         *
         *     Example: <code>Nature,Radiology</code> will return papers from venues Nature and/or Radiology.
         */
        venue?: string
        /**
         * @description Restricts results to papers in the given fields of study, formatted as a comma-separated list:
         *     <ul>
         *     <li>Computer Science</li>
         *     <li>Medicine</li>
         *     <li>Chemistry</li>
         *     <li>Biology</li>
         *     <li>Materials Science</li>
         *     <li>Physics</li>
         *     <li>Geology</li>
         *     <li>Psychology</li>
         *     <li>Art</li>
         *     <li>History</li>
         *     <li>Geography</li>
         *     <li>Sociology</li>
         *     <li>Business</li>
         *     <li>Political Science</li>
         *     <li>Economics</li>
         *     <li>Philosophy</li>
         *     <li>Mathematics</li>
         *     <li>Engineering</li>
         *     <li>Environmental Science</li>
         *     <li>Agricultural and Food Sciences</li>
         *     <li>Education</li>
         *     <li>Law</li>
         *     <li>Linguistics</li>
         *     </ul>
         *
         *     Example: <code>Physics,Mathematics</code> will return papers with either Physics or Mathematics in their list of fields-of-study.
         */
        fieldsOfStudy?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Paper title search
     * @description Behaves similarly to <code>/paper/search</code>, but is intended for retrieval of a single paper based on closest title match to given query.
     *     Examples:
     *     <ul>
     *       <li><code>https://api.semanticscholar.org/graph/v1/paper/search/match?query=Construction of the Literature Graph in Semantic Scholar</code></li>
     *       <ul>
     *         <li>Returns a single paper that is the closest title match.</li>
     *         <li>Each paper has its paperId, title, and matchScore as well as any other requested fields.</li>
     *       </ul>
     *       <li><code>https://api.semanticscholar.org/graph/v1/paper/search/match?query=totalGarbageNonsense</code></li>
     *       <ul>
     *         <li>Returns with a 404 error and a "Title match not found" message.</li>
     *       </ul>
     *     </ul>
     *       <br>
     *         Limitations:
     *         <ul>
     *             <li>Will only return the single highest match result.</li>
     *         </ul>
     *     </ul>
     */
    get: operations['get_graph_paper_title_search']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/paper/{paper_id}': {
    parameters: {
      query?: {
        /**
         * @description A comma-separated list of the fields to be returned. See the contents of Response Schema below for a list of all available fields that can be returned.
         *     The <code>paperId</code> field is always returned. If the fields parameter is omitted, only the <code>paperId</code> and <code>title</code> will be returned.
         *     <p>Use a period (“.”) for fields that have version numbers or subfields, such as the <code>embedding</code>, <code>authors</code>, <code>citations</code>, and <code>references</code> fields:
         *     <ul>
         *         <li>When requesting <code>authors</code>, the <code>authorId</code> and <code>name</code> subfields are returned by default. To request other subfields, use the format <code>author.url,author.paperCount</code>, etc. See the Response Schema below for available subfields.</li>
         *         <li>When requesting <code>citations</code> and <code>references</code>, the <code>paperId</code> and <code>title</code> subfields are returned by default. To request other subfields, use the format <code>citations.title,citations.abstract</code>, etc. See the Response Schema below for available subfields.</li>
         *         <li>When requesting <code>embedding</code>, the default <a href="https://github.com/allenai/specter">Spector embedding version</a> is v1. Specify <code>embedding.specter_v2</code> to select v2 embeddings.</li>
         *     </ul>
         *     Examples:
         *     <ul>
         *         <li><code>fields=title,url</code></li>
         *         <li><code>fields=title,embedding.specter_v2</code></li>
         *         <li><code>fields=title,authors,citations.title,citations.abstract</code></li>
         *     </ul>
         */
        fields?: string
      }
      header?: never
      path: {
        /**
         * @description The following types of IDs are supported:
         *     <ul>
         *         <li><code>&lt;sha&gt;</code> - a Semantic Scholar ID, e.g. <code>649def34f8be52c8b66281af98ae884c09aef38b</code></li>
         *         <li><code>CorpusId:&lt;id&gt;</code> - a Semantic Scholar numerical ID, e.g. <code>CorpusId:215416146</code></li>
         *         <li><code>DOI:&lt;doi&gt;</code> - a <a href="http://doi.org">Digital Object Identifier</a>,
         *             e.g. <code>DOI:10.18653/v1/N18-3011</code></li>
         *         <li><code>ARXIV:&lt;id&gt;</code> - <a href="https://arxiv.org/">arXiv.rg</a>, e.g. <code>ARXIV:2106.15928</code></li>
         *         <li><code>MAG:&lt;id&gt;</code> - Microsoft Academic Graph, e.g. <code>MAG:112218234</code></li>
         *         <li><code>ACL:&lt;id&gt;</code> - Association for Computational Linguistics, e.g. <code>ACL:W12-3903</code></li>
         *         <li><code>PMID:&lt;id&gt;</code> - PubMed/Medline, e.g. <code>PMID:19872477</code></li>
         *         <li><code>PMCID:&lt;id&gt;</code> - PubMed Central, e.g. <code>PMCID:2323736</code></li>
         *         <li><code>URL:&lt;url&gt;</code> - URL from one of the sites listed below, e.g. <code>URL:https://arxiv.org/abs/2106.15928v1</code></li>
         *     </ul>
         *
         *     URLs are recognized from the following sites:
         *     <ul>
         *         <li><a href="https://www.semanticscholar.org/">semanticscholar.org</a></li>
         *         <li><a href="https://arxiv.org/">arxiv.org</a></li>
         *         <li><a href="https://www.aclweb.org">aclweb.org</a></li>
         *         <li><a href="https://www.acm.org/">acm.org</a></li>
         *         <li><a href="https://www.biorxiv.org/">biorxiv.org</a></li>
         *     </ul>
         */
        paper_id: string
      }
      cookie?: never
    }
    /**
     * Details about a paper
     * @description Examples:
     *     <ul>
     *         <li><code>https://api.semanticscholar.org/graph/v1/paper/649def34f8be52c8b66281af98ae884c09aef38b</code></li>
     *         <ul>
     *             <li>Returns a paper with its paperId and title.  </li>
     *         </ul>
     *         <li><code>https://api.semanticscholar.org/graph/v1/paper/649def34f8be52c8b66281af98ae884c09aef38b?fields=url,year,authors</code></li>
     *         <ul>
     *             <li>Returns the paper's paperId, url, year, and list of authors.  </li>
     *             <li>Each author has authorId and name.</li>
     *         </ul>
     *         <li><code>https://api.semanticscholar.org/graph/v1/paper/649def34f8be52c8b66281af98ae884c09aef38b?fields=citations.authors</code></li>
     *         <ul>
     *             <li>Returns the paper's paperId and list of citations.  </li>
     *             <li>Each citation has its paperId plus its list of authors.</li>
     *             <li>Each author has their 2 always included fields of authorId and name.</li>
     *         </ul>
     *         <br>
     *         Limitations:
     *         <ul>
     *             <li>Can only return up to 10 MB of data at a time.</li>
     *         </ul>
     *     </ul>
     */
    get: operations['get_graph_get_paper']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/paper/{paper_id}/authors': {
    parameters: {
      query?: {
        /** @description Used for pagination. When returning a list of results, start with the element at this position in the list. */
        offset?: number
        /**
         * @description The maximum number of results to return.<br>
         *     Must be <= 1000
         */
        limit?: number
        /**
         * @description A comma-separated list of the fields to be returned. See the contents of the <code>data</code> array in Response Schema below for a list of all available fields that can be returned.
         *     The <code>authorId</code> field is always returned. If the fields parameter is omitted, only the <code>authorId</code> and <code>name</code> will be returned.
         *     <p>Use a period (“.”) for subfields of <code>papers</code>.<br><br>
         *     Examples:
         *     <ul>
         *         <li><code>fields=name,affiliations,papers</code></li>
         *         <li><code>fields=url,papers.year,papers.authors</code></li>
         *     </ul>
         */
        fields?: string
      }
      header?: never
      path: {
        /**
         * @description The following types of IDs are supported:
         *     <ul>
         *         <li><code>&lt;sha&gt;</code> - a Semantic Scholar ID, e.g. <code>649def34f8be52c8b66281af98ae884c09aef38b</code></li>
         *         <li><code>CorpusId:&lt;id&gt;</code> - a Semantic Scholar numerical ID, e.g. <code>CorpusId:215416146</code></li>
         *         <li><code>DOI:&lt;doi&gt;</code> - a <a href="http://doi.org">Digital Object Identifier</a>,
         *             e.g. <code>DOI:10.18653/v1/N18-3011</code></li>
         *         <li><code>ARXIV:&lt;id&gt;</code> - <a href="https://arxiv.org/">arXiv.rg</a>, e.g. <code>ARXIV:2106.15928</code></li>
         *         <li><code>MAG:&lt;id&gt;</code> - Microsoft Academic Graph, e.g. <code>MAG:112218234</code></li>
         *         <li><code>ACL:&lt;id&gt;</code> - Association for Computational Linguistics, e.g. <code>ACL:W12-3903</code></li>
         *         <li><code>PMID:&lt;id&gt;</code> - PubMed/Medline, e.g. <code>PMID:19872477</code></li>
         *         <li><code>PMCID:&lt;id&gt;</code> - PubMed Central, e.g. <code>PMCID:2323736</code></li>
         *         <li><code>URL:&lt;url&gt;</code> - URL from one of the sites listed below, e.g. <code>URL:https://arxiv.org/abs/2106.15928v1</code></li>
         *     </ul>
         *
         *     URLs are recognized from the following sites:
         *     <ul>
         *         <li><a href="https://www.semanticscholar.org/">semanticscholar.org</a></li>
         *         <li><a href="https://arxiv.org/">arxiv.org</a></li>
         *         <li><a href="https://www.aclweb.org">aclweb.org</a></li>
         *         <li><a href="https://www.acm.org/">acm.org</a></li>
         *         <li><a href="https://www.biorxiv.org/">biorxiv.org</a></li>
         *     </ul>
         */
        paper_id: string
      }
      cookie?: never
    }
    /**
     * Details about a paper's authors
     * @description Examples:
     *     <ul>
     *         <li><code>https://api.semanticscholar.org/graph/v1/paper/649def34f8be52c8b66281af98ae884c09aef38b/authors</code></li>
     *         <ul>
     *             <li>Returns with offset=0, and data is a list of all 3 authors.</li>
     *             <li>Each author has their authorId and name</li>
     *         </ul>
     *         <li><code>https://api.semanticscholar.org/graph/v1/paper/649def34f8be52c8b66281af98ae884c09aef38b/authors?fields=affiliations,papers&limit=2</code></li>
     *         <ul>
     *             <li>Returns with offset=0, next=2, and data is a list of 2 authors.</li>
     *             <li>Each author has their authorId, affiliations, and list of papers.</li>
     *             <li>Each paper has its paperId and title.</li>
     *         </ul>
     *         <li><code>https://api.semanticscholar.org/graph/v1/paper/649def34f8be52c8b66281af98ae884c09aef38b/authors?fields=url,papers.year,papers.authors&offset=2</code></li>
     *         <ul>
     *             <li>Returns with offset=2, and data is a list containing the last author.</li>
     *             <li>This author has their authorId, url, and list of papers.</li>
     *             <li>Each paper has its paperId, year, and list of authors.</li>
     *             <li>In that list of authors, each author has their authorId and name.</li>
     *         </ul>
     *     </ul>
     */
    get: operations['get_graph_get_paper_authors']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/paper/{paper_id}/citations': {
    parameters: {
      query?: {
        /** @description Used for pagination. When returning a list of results, start with the element at this position in the list. */
        offset?: number
        /**
         * @description The maximum number of results to return.<br>
         *     Must be <= 1000
         */
        limit?: number
        /**
         * @description A comma-separated list of the fields to be returned. See the contents of the <code>data</code> array in Response Schema below for a list of all available fields that can be returned.
         *     If the fields parameter is omitted, only the <code>paperId</code> and <code>title</code> will be returned.
         *     <p>Request fields nested within <code>citedPaper</code> the same way as fields like <code>contexts</code>.<br><br>
         *     Examples:
         *     <ul>
         *         <li><code>fields=contexts,isInfluential</code></li>
         *         <li><code>fields=contexts,title,authors</code></li>
         *     </ul>
         */
        fields?: string
      }
      header?: never
      path: {
        /**
         * @description The following types of IDs are supported:
         *     <ul>
         *         <li><code>&lt;sha&gt;</code> - a Semantic Scholar ID, e.g. <code>649def34f8be52c8b66281af98ae884c09aef38b</code></li>
         *         <li><code>CorpusId:&lt;id&gt;</code> - a Semantic Scholar numerical ID, e.g. <code>CorpusId:215416146</code></li>
         *         <li><code>DOI:&lt;doi&gt;</code> - a <a href="http://doi.org">Digital Object Identifier</a>,
         *             e.g. <code>DOI:10.18653/v1/N18-3011</code></li>
         *         <li><code>ARXIV:&lt;id&gt;</code> - <a href="https://arxiv.org/">arXiv.rg</a>, e.g. <code>ARXIV:2106.15928</code></li>
         *         <li><code>MAG:&lt;id&gt;</code> - Microsoft Academic Graph, e.g. <code>MAG:112218234</code></li>
         *         <li><code>ACL:&lt;id&gt;</code> - Association for Computational Linguistics, e.g. <code>ACL:W12-3903</code></li>
         *         <li><code>PMID:&lt;id&gt;</code> - PubMed/Medline, e.g. <code>PMID:19872477</code></li>
         *         <li><code>PMCID:&lt;id&gt;</code> - PubMed Central, e.g. <code>PMCID:2323736</code></li>
         *         <li><code>URL:&lt;url&gt;</code> - URL from one of the sites listed below, e.g. <code>URL:https://arxiv.org/abs/2106.15928v1</code></li>
         *     </ul>
         *
         *     URLs are recognized from the following sites:
         *     <ul>
         *         <li><a href="https://www.semanticscholar.org/">semanticscholar.org</a></li>
         *         <li><a href="https://arxiv.org/">arxiv.org</a></li>
         *         <li><a href="https://www.aclweb.org">aclweb.org</a></li>
         *         <li><a href="https://www.acm.org/">acm.org</a></li>
         *         <li><a href="https://www.biorxiv.org/">biorxiv.org</a></li>
         *     </ul>
         */
        paper_id: string
      }
      cookie?: never
    }
    /**
     * Details about a paper's citations
     * @description Fetch details about the papers that cite this paper (i.e. papers in whose bibliography this paper appears)
     *     <br><br>
     *     Examples:
     *     <ul>
     *         <li>Let's suppose that the paper in the examples below has 1600 citations...</li>
     *         <li><code>https://api.semanticscholar.org/graph/v1/paper/649def34f8be52c8b66281af98ae884c09aef38b/citations</code></li>
     *         <ul>
     *             <li>Returns with offset=0, next=100, and data is a list of 100 citations.</li>
     *             <li>Each citation has a citingPaper which contains its paperId and title.</li>
     *         </ul>
     *         <li><code>https://api.semanticscholar.org/graph/v1/paper/649def34f8be52c8b66281af98ae884c09aef38b/citations?fields=contexts,intents,isInfluential,abstract&offset=200&limit=10</code></li>
     *         <ul>
     *             <li>Returns with offset=200, next=210, and data is a list of 10 citations.</li>
     *             <li>Each citation has contexts, intents, isInfluential, and a citingPaper which contains its paperId and abstract.</li>
     *         </ul>
     *         <li><code>https://api.semanticscholar.org/graph/v1/paper/649def34f8be52c8b66281af98ae884c09aef38b/citations?fields=authors&offset=1500&limit=500</code></li>
     *         <ul>
     *             <li>Returns with offset=1500, and data is a list of the last 100 citations.</li>
     *             <li>Each citation has a citingPaper which contains its paperId plus a list of authors</li>
     *             <li>The authors under each citingPaper has their authorId and name.</li>
     *         </ul>
     *     </ul>
     */
    get: operations['get_graph_get_paper_citations']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/paper/{paper_id}/references': {
    parameters: {
      query?: {
        /** @description Used for pagination. When returning a list of results, start with the element at this position in the list. */
        offset?: number
        /**
         * @description The maximum number of results to return.<br>
         *     Must be <= 1000
         */
        limit?: number
        /**
         * @description A comma-separated list of the fields to be returned. See the contents of the <code>data</code> array in Response Schema below for a list of all available fields that can be returned.
         *     If the fields parameter is omitted, only the <code>paperId</code> and <code>title</code> will be returned.
         *     <p>Request fields nested within <code>citedPaper</code> the same way as fields like <code>contexts</code>.<br><br>
         *     Examples:
         *     <ul>
         *         <li><code>fields=contexts,isInfluential</code></li>
         *         <li><code>fields=contexts,title,authors</code></li>
         *     </ul>
         */
        fields?: string
      }
      header?: never
      path: {
        /**
         * @description The following types of IDs are supported:
         *     <ul>
         *         <li><code>&lt;sha&gt;</code> - a Semantic Scholar ID, e.g. <code>649def34f8be52c8b66281af98ae884c09aef38b</code></li>
         *         <li><code>CorpusId:&lt;id&gt;</code> - a Semantic Scholar numerical ID, e.g. <code>CorpusId:215416146</code></li>
         *         <li><code>DOI:&lt;doi&gt;</code> - a <a href="http://doi.org">Digital Object Identifier</a>,
         *             e.g. <code>DOI:10.18653/v1/N18-3011</code></li>
         *         <li><code>ARXIV:&lt;id&gt;</code> - <a href="https://arxiv.org/">arXiv.rg</a>, e.g. <code>ARXIV:2106.15928</code></li>
         *         <li><code>MAG:&lt;id&gt;</code> - Microsoft Academic Graph, e.g. <code>MAG:112218234</code></li>
         *         <li><code>ACL:&lt;id&gt;</code> - Association for Computational Linguistics, e.g. <code>ACL:W12-3903</code></li>
         *         <li><code>PMID:&lt;id&gt;</code> - PubMed/Medline, e.g. <code>PMID:19872477</code></li>
         *         <li><code>PMCID:&lt;id&gt;</code> - PubMed Central, e.g. <code>PMCID:2323736</code></li>
         *         <li><code>URL:&lt;url&gt;</code> - URL from one of the sites listed below, e.g. <code>URL:https://arxiv.org/abs/2106.15928v1</code></li>
         *     </ul>
         *
         *     URLs are recognized from the following sites:
         *     <ul>
         *         <li><a href="https://www.semanticscholar.org/">semanticscholar.org</a></li>
         *         <li><a href="https://arxiv.org/">arxiv.org</a></li>
         *         <li><a href="https://www.aclweb.org">aclweb.org</a></li>
         *         <li><a href="https://www.acm.org/">acm.org</a></li>
         *         <li><a href="https://www.biorxiv.org/">biorxiv.org</a></li>
         *     </ul>
         */
        paper_id: string
      }
      cookie?: never
    }
    /**
     * Details about a paper's references
     * @description Fetch details about the papers cited by this paper (i.e. appearing in this paper's bibliography)
     *     <br><br>
     *     Examples:
     *     <ul>
     *         <li>Let's suppose that the paper in the examples below has 1600 references...</li>
     *         <li><code>https://api.semanticscholar.org/graph/v1/paper/649def34f8be52c8b66281af98ae884c09aef38b/references</code></li>
     *         <ul>
     *             <li>Returns with offset=0, next=100, and data is a list of 100 references.</li>
     *             <li>Each reference has a citedPaper which contains its paperId and title.</li>
     *         </ul>
     *         <li><code>https://api.semanticscholar.org/graph/v1/paper/649def34f8be52c8b66281af98ae884c09aef38b/references?fields=contexts,intents,isInfluential,abstract&offset=200&limit=10</code></li>
     *         <ul>
     *             <li>Returns with offset=200, next=210, and data is a list of 10 references.</li>
     *             <li>Each reference has contexts, intents, isInfluential, and a citedPaper which contains its paperId and abstract.</li>
     *         </ul>
     *         <li><code>https://api.semanticscholar.org/graph/v1/paper/649def34f8be52c8b66281af98ae884c09aef38b/references?fields=authors&offset=1500&limit=500</code></li>
     *         <ul>
     *             <li>Returns with offset=1500, and data is a list of the last 100 references.</li>
     *             <li>Each reference has a citedPaper which contains its paperId plus a list of authors</li>
     *             <li>The authors under each citedPaper has their authorId and name.</li>
     *         </ul>
     *     </ul>
     */
    get: operations['get_graph_get_paper_references']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/snippet/search': {
    parameters: {
      query: {
        /**
         * @description A comma-separated list of the fields to be returned with each snippet element.
         *
         *     Paper info and the score are currently always returned. What you can specify using this <code>fields</code> param is which fields under the 'snippet' section (see the response schema) will be returned.
         *
         *     Examples:
         *     <ul>
         *         <li><code>fields=snippet.text</code>: you'll get just the <code>text</code> field in the snippet section</li>
         *         <li><code>fields=snippet.text,snippet.snippetKind</code>: you'll get just the <code>text</code> and <code>snippetKind</code> fields in the snippet section</li>
         *         <li><code>fields=snippet.annotations.sentences</code>: you'll get just the sentence annotations in the snippet section</li>
         *     </ul>
         *
         *     In general, you can use periods to identify nested fields (as in the examples above).
         *
         *     Not all fields in the response schema can be identified using this <code>fields</code> param though.
         *     E.g. you can't pick what you get within <code>snippet.snippetOffset</code> - you can either get the snippet offset with all the possible snippet offset fields, or you can not get it at all.
         *     You also can't provide <code>paper</code> or <code>score</code> or anything under <code>paper</code>, since those are always provided.
         *
         *     If you attempt to identify a field that's not supported, you'll get an error with the relevant field name. E.g.
         *
         *     <code>Unrecognized or unsupported fields: [paper]</code>
         *
         *     If you don't specify the fields param, you'll get a default set of fields in the snippet section. These are the default fields:
         *     - <code>snippet.text</code>
         *     - <code>snippet.snippetKind</code>
         *     - <code>snippet.section</code>
         *     - <code>snippet.snippetOffset</code> (including nested <code>start</code> and <code>end</code>)
         *     - <code>snippet.annotations.refMentions</code> (including nested <code>start</code>, <code>end</code>, and <code>matchedPaperCorpusId</code> for each element)
         *     - <code>snippet.annotations.sentences</code> (including nested <code>start</code> and <code>end</code> for each element)
         */
        fields?: string
        /**
         * @description Restricts results to snippets from specific papers. To specify papers, provide a comma-separated list of their IDs. You can provide up to approximately 100 IDs.
         *
         *     The following types of IDs are supported:
         *     <ul>
         *         <li><code>&lt;sha&gt;</code> - a Semantic Scholar ID, e.g. <code>649def34f8be52c8b66281af98ae884c09aef38b</code></li>
         *         <li><code>CorpusId:&lt;id&gt;</code> - a Semantic Scholar numerical ID, e.g. <code>CorpusId:215416146</code></li>
         *         <li><code>DOI:&lt;doi&gt;</code> - a <a href="http://doi.org">Digital Object Identifier</a>,
         *             e.g. <code>DOI:10.18653/v1/N18-3011</code></li>
         *         <li><code>ARXIV:&lt;id&gt;</code> - <a href="https://arxiv.org/">arXiv.rg</a>, e.g. <code>ARXIV:2106.15928</code></li>
         *         <li><code>MAG:&lt;id&gt;</code> - Microsoft Academic Graph, e.g. <code>MAG:112218234</code></li>
         *         <li><code>ACL:&lt;id&gt;</code> - Association for Computational Linguistics, e.g. <code>ACL:W12-3903</code></li>
         *         <li><code>PMID:&lt;id&gt;</code> - PubMed/Medline, e.g. <code>PMID:19872477</code></li>
         *         <li><code>PMCID:&lt;id&gt;</code> - PubMed Central, e.g. <code>PMCID:2323736</code></li>
         *         <li><code>URL:&lt;url&gt;</code> - URL from one of the sites listed below, e.g. <code>URL:https://arxiv.org/abs/2106.15928v1</code></li>
         *     </ul>
         *
         *     URLs are recognized from the following sites:
         *     <ul>
         *         <li><a href="https://www.semanticscholar.org/">semanticscholar.org</a></li>
         *         <li><a href="https://arxiv.org/">arxiv.org</a></li>
         *         <li><a href="https://www.aclweb.org">aclweb.org</a></li>
         *         <li><a href="https://www.acm.org/">acm.org</a></li>
         *         <li><a href="https://www.biorxiv.org/">biorxiv.org</a></li>
         *     </ul>
         */
        paperIds?: string
        /**
         * @description Restricts results to only include papers with the minimum number of citations.
         *     <br>
         *     <br>
         *     Example:
         *     <code>minCitationCount=200</code>
         */
        minCitationCount?: string
        /**
         * @description Restricts results to snippets from papers inserted into the index before the provided date (excludes things inserted on the provided date).
         *
         *     Acceptable formats: YYYY-MM-DD, YYYY-MM, YYYY
         */
        insertedBefore?: string
        /**
         * @description Restricts results to the given range of publication dates or years (inclusive). Accepts the format <code>&lt;startDate&gt;:&lt;endDate&gt;</code> with each date in <code>YYYY-MM-DD</code> format.
         *     <br>
         *     <br>
         *     Each term is optional, allowing for specific dates, fixed ranges, or open-ended ranges. In addition, prefixes are suported as a shorthand, e.g. <code>2020-06</code> matches all dates in June 2020.
         *     <br>
         *     <br>
         *     Specific dates are not known for all papers, so some records returned with this filter will have a <code>null</code> value for </code>publicationDate</code>. <code>year</code>, however, will always be present.
         *     For records where a specific publication date is not known, they will be treated as if published on January 1st of their publication year.
         *     <br>
         *     <br>
         *     Examples:
         *     <ul>
         *         <li><code>2019-03-05</code> on March 3rd, 2019</li>
         *         <li><code>2019-03</code> during March 2019</li>
         *         <li><code>2019</code> during 2019</li>
         *         <li><code>2016-03-05:2020-06-06</code> as early as March 5th, 2016 or as late as June 6th, 2020</li>
         *         <li><code>1981-08-25:</code> on or after August 25th, 1981</li>
         *         <li><code>:2015-01</code> before or on January 31st, 2015</li>
         *         <li><code>2015:2020</code> between January 1st, 2015 and December 31st, 2020</li>
         *     </ul>
         */
        publicationDateOrYear?: string
        /**
         * @description Restricts results to the given publication year or range of years (inclusive).
         *     <br>
         *     <br>
         *     Examples:
         *     <ul>
         *         <li><code>2019</code> in 2019</li>
         *         <li><code>2016-2020</code> as early as 2016 or as late as 2020</li>
         *         <li><code>2010-</code> during or after 2010</li>
         *         <li><code>-2015</code> before or during 2015</li>
         *     </ul>
         */
        year?: string
        /**
         * @description Restricts results to papers published in the given venues, formatted as a comma-separated list. <br><br>
         *     Input could also be an ISO4 abbreviation.
         *     Examples include:
         *     <ul>
         *         <li>Nature</li>
         *         <li>New England Journal of Medicine</li>
         *         <li>Radiology</li>
         *         <li>N. Engl. J. Med.</li>
         *     </ul>
         *
         *     Example: <code>Nature,Radiology</code> will return papers from venues Nature and/or Radiology.
         */
        venue?: string
        /**
         * @description Restricts results to papers in the given fields of study, formatted as a comma-separated list:
         *     <ul>
         *     <li>Computer Science</li>
         *     <li>Medicine</li>
         *     <li>Chemistry</li>
         *     <li>Biology</li>
         *     <li>Materials Science</li>
         *     <li>Physics</li>
         *     <li>Geology</li>
         *     <li>Psychology</li>
         *     <li>Art</li>
         *     <li>History</li>
         *     <li>Geography</li>
         *     <li>Sociology</li>
         *     <li>Business</li>
         *     <li>Political Science</li>
         *     <li>Economics</li>
         *     <li>Philosophy</li>
         *     <li>Mathematics</li>
         *     <li>Engineering</li>
         *     <li>Environmental Science</li>
         *     <li>Agricultural and Food Sciences</li>
         *     <li>Education</li>
         *     <li>Law</li>
         *     <li>Linguistics</li>
         *     </ul>
         *
         *     Example: <code>Physics,Mathematics</code> will return papers with either Physics or Mathematics in their list of fields-of-study.
         */
        fieldsOfStudy?: string
        /**
         * @description A plain-text search query string.
         *     No special query syntax is supported.
         */
        query: string
        /**
         * @description The maximum number of results to return.<br>
         *     Must be <= 1000
         */
        limit?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Text snippet search
     * @description Return the text snippets that most closely match the query. Text snippets are excerpts of approximately 500 words, drawn from a paper's title, abstract, and body text, but excluding figure captions and the bibliography.
     *     It will return the highest ranked snippet first, as well as some basic data about the paper it was found in.
     *     Examples:
     *     <ul>
     *       <li><code>https://api.semanticscholar.org/graph/v1/snippet/search?query=The literature graph is a property graph with directed edges&limit=1</code></li>
     *       <ul>
     *         <li>Returns a single snippet that is the highest ranked match.</li>
     *         <li>Each snippet has text, snippetKind, section, annotation data, and score. As well as the following data about the paper it comes from: corpusId, title, authors, and openAccessInfo.</li>
     *       </ul>
     *     </ul>
     *       <br>
     *         Limitations:
     *         <ul>
     *             <li>You must include a query.</li>
     *             <li>If you don't set a limit, it will automatically return 10 results.</li>
     *             <li>The max limit allowed is 1000.</li>
     *         </ul>
     *     </ul>
     */
    get: operations['get_snippet_search']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    'Error404': {
      /**
       * @description Depending on the case, error message may be any of these:
       *     <ul>
       *         <li><code>"Paper/Author/Object not found"</code></li>
       *         <li><code>"Paper/Author/Object with id ### not found"</code></li>
       *     </ul>
       * @example Requested object not found
       */
      error?: string
    }
    'Error400': {
      /**
       * @description Depending on the case, error message may be any of these:
       *     <ul>
       *         <li><code>"Unrecognized or unsupported fields: [bad1, bad2, etc...]"</code></li>
       *         <li><code>"Unacceptable query params: [badK1=badV1, badK2=badV2, etc...}]"</code></li>
       *         <li><code>"Response would exceed maximum size...."</code></li>
       *             <ul><li>This error will occur when the response exceeds 10 MB. Suggestions to either break the request into smaller batches, or make use of the limit and offset features will be presented.</li></ul>
       *         <li>A custom message string</li></ul>
       * @example Unrecognized or unsupported fields: [author.creditCardNumber, garbage]
       */
      error?: string
    }
    'FullPaper': {
      /**
       * @description Semantic Scholar’s primary unique identifier for a paper.
       * @example 5c5751d45e298cea054f32b392c12c61027d2fe7
       */
      paperId?: string
      /**
       * @description Semantic Scholar’s secondary unique identifier for a paper.
       * @example 215416146
       */
      corpusId?: number
      /**
       * @description An object that contains the paper’s unique identifiers in external sources. The external sources are limited to: ArXiv, MAG, ACL, PubMed, Medline, PubMedCentral, DBLP, and DOI.
       * @example {
       *       "MAG": "3015453090",
       *       "DBLP": "conf/acl/LoWNKW20",
       *       "ACL": "2020.acl-main.447",
       *       "DOI": "10.18653/V1/2020.ACL-MAIN.447",
       *       "CorpusId": 215416146
       *     }
       */
      externalIds?: Record<string, never>
      /**
       * @description URL of the paper on the Semantic Scholar website.
       * @example https://www.semanticscholar.org/paper/5c5751d45e298cea054f32b392c12c61027d2fe7
       */
      url?: string
      /**
       * @description Title of the paper.
       * @example Construction of the Literature Graph in Semantic Scholar
       */
      title?: string
      /**
       * @description The paper's abstract. Note that due to legal reasons, this may be missing even if we display an abstract on the website.
       * @example We describe a deployed scalable system for organizing published scientific literature into a heterogeneous graph to facilitate algorithmic manipulation and discovery.
       */
      abstract?: string
      /**
       * @description The name of the paper’s publication venue.
       * @example Annual Meeting of the Association for Computational Linguistics
       */
      venue?: string
      /**
       * @description An object that contains the following information about the journal or conference in which this paper was published: id (the venue’s unique ID), name (the venue’s name), type (the type of venue), alternate_names (an array of alternate names for the venue), and url (the venue’s website).
       * @example {
       *       "id": "1e33b3be-b2ab-46e9-96e8-d4eb4bad6e44",
       *       "name": "Annual Meeting of the Association for Computational Linguistics",
       *       "type": "conference",
       *       "alternate_names": [
       *         "Annu Meet Assoc Comput Linguistics",
       *         "Meeting of the Association for Computational Linguistics",
       *         "ACL",
       *         "Meet Assoc Comput Linguistics"
       *       ],
       *       "url": "https://www.aclweb.org/anthology/venues/acl/"
       *     }
       */
      publicationVenue?: Record<string, never>
      /**
       * @description The year the paper was published.
       * @example 1997
       */
      year?: number
      /**
       * @description The total number of papers this paper references.
       * @example 59
       */
      referenceCount?: number
      /**
       * @description The total number of papers that references this paper.
       * @example 453
       */
      citationCount?: number
      /**
       * @description A subset of the citation count, where the cited publication has a significant impact on the citing publication. Determined by Semantic Scholar’s algorithm: https://www.semanticscholar.org/faq#influential-citations.
       * @example 90
       */
      influentialCitationCount?: number
      /**
       * @description Whether the paper is open access. More information here: https://www.openaccess.nl/en/what-is-open-access.
       * @example true
       */
      isOpenAccess?: boolean
      /**
       * @description An object that contains the following parameters: url (a link to the paper’s PDF), status (the type of open access https://en.wikipedia.org/wiki/Open_access#Colour_naming_system), the paper's license, and a legal disclaimer.
       * @example {
       *       "url": "https://www.aclweb.org/anthology/2020.acl-main.447.pdf",
       *       "status": "HYBRID",
       *       "license": "CCBY",
       *       "disclaimer": "Notice: This snippet is extracted from the open access paper or abstract available at https://aclanthology.org/2020.acl-main.447, which is subject to the license by the author or copyright owner provided with this content. Please go to the source to verify the license and copyright information for your use."
       *     }
       */
      openAccessPdf?: Record<string, never>
      /**
       * @description A list of the paper’s high-level academic categories from external sources. The possible fields are: Computer Science, Medicine, Chemistry, Biology, Materials Science, Physics, Geology, Psychology, Art, History, Geography, Sociology, Business, Political Science, Economics, Philosophy, Mathematics, Engineering, Environmental Science, Agricultural and Food Sciences, Education, Law, and Linguistics.
       * @example [
       *       "Computer Science"
       *     ]
       */
      fieldsOfStudy?: string[]
      /**
       * @description An array of objects. Each object contains the following parameters: category (a field of study. The possible fields are the same as in fieldsOfStudy), and source (specifies whether the category was classified by Semantic Scholar or by an external source. More information on how Semantic Scholar classifies papers https://blog.allenai.org/announcing-s2fos-an-open-source-academic-field-of-study-classifier-9d2f641949e5)
       * @example [
       *       {
       *         "category": "Computer Science",
       *         "source": "external"
       *       },
       *       {
       *         "category": "Computer Science",
       *         "source": "s2-fos-model"
       *       },
       *       {
       *         "category": "Mathematics",
       *         "source": "s2-fos-model"
       *       }
       *     ]
       */
      s2FieldsOfStudy?: Record<string, never>[]
      /**
       * @description The type of this publication.
       * @example [
       *       "Journal Article",
       *       "Review"
       *     ]
       */
      publicationTypes?: string[]
      /**
       * @description The date when this paper was published, in YYYY-MM-DD format.
       * @example 2024-04-29
       */
      publicationDate?: string
      /**
       * @description An object that contains the following parameters, if available: name (the journal name), volume (the journal’s volume number), and pages (the page number range)
       * @example {
       *       "volume": "40",
       *       "pages": "116 - 135",
       *       "name": "IETE Technical Review"
       *     }
       */
      journal?: Record<string, never>
      /**
       * @description The BibTex bibliographical citation of the paper.
       * @example {
       *       "bibtex": "@['JournalArticle', 'Conference']{Ammar2018ConstructionOT,\n author = {Waleed Ammar and Dirk Groeneveld and Chandra Bhagavatula and Iz Beltagy and Miles Crawford and Doug Downey and Jason Dunkelberger and Ahmed Elgohary and Sergey Feldman and Vu A. Ha and Rodney Michael Kinney and Sebastian Kohlmeier and Kyle Lo and Tyler C. Murray and Hsu-Han Ooi and Matthew E. Peters and Joanna L. Power and Sam Skjonsberg and Lucy Lu Wang and Christopher Wilhelm and Zheng Yuan and Madeleine van Zuylen and Oren Etzioni},\n booktitle = {NAACL},\n pages = {84-91},\n title = {Construction of the Literature Graph in Semantic Scholar},\n year = {2018}\n}\n"
       *     }
       */
      citationStyles?: Record<string, never>
      authors?: components['schemas']['Author'][]
      /** Paper Info */
      citations?: components['schemas']['BasePaper'][]
      references?: components['schemas']['BasePaper'][]
      embedding?: components['schemas']['Embedding']
      tldr?: components['schemas']['Tldr']
    }
    'Author': {
      /**
       * This field will be provided if no fields are specified
       * @description Semantic Scholar’s unique ID for the author.
       * @example 1741101
       */
      authorId?: string
      /**
       * @description An object that contains the ORCID/DBLP IDs for the author, if known.
       * @example {
       *       "DBLP": [
       *         123
       *       ]
       *     }
       */
      externalIds?: Record<string, never>
      /**
       * @description URL of the author on the Semantic Scholar website.
       * @example https://www.semanticscholar.org/author/1741101
       */
      url?: string
      /**
       * This field will be provided if no fields are specified
       * @description Author’s name.
       * @example Oren Etzioni
       */
      name?: string
      /**
       * @description Array of organizational affiliations for the author.
       * @example [
       *       "Allen Institute for AI"
       *     ]
       */
      affiliations?: string[]
      /**
       * @description The author’s homepage.
       * @example https://allenai.org/
       */
      homepage?: string
      /**
       * @description The author's total publications count.
       * @example 10
       */
      paperCount?: string
      /**
       * @description The author's total citations count.
       * @example 50
       */
      citationCount?: string
      /**
       * @description The author’s h-index, which is a measure of the productivity and citation impact of the author’s publications: https://www.semanticscholar.org/faq#h-index
       * @example 5
       */
      hIndex?: string
    }
    'BasePaper': {
      /**
       * @description Semantic Scholar’s primary unique identifier for a paper.
       * @example 5c5751d45e298cea054f32b392c12c61027d2fe7
       */
      paperId?: string
      /**
       * @description Semantic Scholar’s secondary unique identifier for a paper.
       * @example 215416146
       */
      corpusId?: number
      /**
       * @description An object that contains the paper’s unique identifiers in external sources. The external sources are limited to: ArXiv, MAG, ACL, PubMed, Medline, PubMedCentral, DBLP, and DOI.
       * @example {
       *       "MAG": "3015453090",
       *       "DBLP": "conf/acl/LoWNKW20",
       *       "ACL": "2020.acl-main.447",
       *       "DOI": "10.18653/V1/2020.ACL-MAIN.447",
       *       "CorpusId": 215416146
       *     }
       */
      externalIds?: Record<string, never>
      /**
       * @description URL of the paper on the Semantic Scholar website.
       * @example https://www.semanticscholar.org/paper/5c5751d45e298cea054f32b392c12c61027d2fe7
       */
      url?: string
      /**
       * @description Title of the paper.
       * @example Construction of the Literature Graph in Semantic Scholar
       */
      title?: string
      /**
       * @description The paper's abstract. Note that due to legal reasons, this may be missing even if we display an abstract on the website.
       * @example We describe a deployed scalable system for organizing published scientific literature into a heterogeneous graph to facilitate algorithmic manipulation and discovery.
       */
      abstract?: string
      /**
       * @description The name of the paper’s publication venue.
       * @example Annual Meeting of the Association for Computational Linguistics
       */
      venue?: string
      /**
       * @description An object that contains the following information about the journal or conference in which this paper was published: id (the venue’s unique ID), name (the venue’s name), type (the type of venue), alternate_names (an array of alternate names for the venue), and url (the venue’s website).
       * @example {
       *       "id": "1e33b3be-b2ab-46e9-96e8-d4eb4bad6e44",
       *       "name": "Annual Meeting of the Association for Computational Linguistics",
       *       "type": "conference",
       *       "alternate_names": [
       *         "Annu Meet Assoc Comput Linguistics",
       *         "Meeting of the Association for Computational Linguistics",
       *         "ACL",
       *         "Meet Assoc Comput Linguistics"
       *       ],
       *       "url": "https://www.aclweb.org/anthology/venues/acl/"
       *     }
       */
      publicationVenue?: Record<string, never>
      /**
       * @description The year the paper was published.
       * @example 1997
       */
      year?: number
      /**
       * @description The total number of papers this paper references.
       * @example 59
       */
      referenceCount?: number
      /**
       * @description The total number of papers that references this paper.
       * @example 453
       */
      citationCount?: number
      /**
       * @description A subset of the citation count, where the cited publication has a significant impact on the citing publication. Determined by Semantic Scholar’s algorithm: https://www.semanticscholar.org/faq#influential-citations.
       * @example 90
       */
      influentialCitationCount?: number
      /**
       * @description Whether the paper is open access. More information here: https://www.openaccess.nl/en/what-is-open-access.
       * @example true
       */
      isOpenAccess?: boolean
      /**
       * @description An object that contains the following parameters: url (a link to the paper’s PDF), status (the type of open access https://en.wikipedia.org/wiki/Open_access#Colour_naming_system), the paper's license, and a legal disclaimer.
       * @example {
       *       "url": "https://www.aclweb.org/anthology/2020.acl-main.447.pdf",
       *       "status": "HYBRID",
       *       "license": "CCBY",
       *       "disclaimer": "Notice: This snippet is extracted from the open access paper or abstract available at https://aclanthology.org/2020.acl-main.447, which is subject to the license by the author or copyright owner provided with this content. Please go to the source to verify the license and copyright information for your use."
       *     }
       */
      openAccessPdf?: Record<string, never>
      /**
       * @description A list of the paper’s high-level academic categories from external sources. The possible fields are: Computer Science, Medicine, Chemistry, Biology, Materials Science, Physics, Geology, Psychology, Art, History, Geography, Sociology, Business, Political Science, Economics, Philosophy, Mathematics, Engineering, Environmental Science, Agricultural and Food Sciences, Education, Law, and Linguistics.
       * @example [
       *       "Computer Science"
       *     ]
       */
      fieldsOfStudy?: string[]
      /**
       * @description An array of objects. Each object contains the following parameters: category (a field of study. The possible fields are the same as in fieldsOfStudy), and source (specifies whether the category was classified by Semantic Scholar or by an external source. More information on how Semantic Scholar classifies papers https://blog.allenai.org/announcing-s2fos-an-open-source-academic-field-of-study-classifier-9d2f641949e5)
       * @example [
       *       {
       *         "category": "Computer Science",
       *         "source": "external"
       *       },
       *       {
       *         "category": "Computer Science",
       *         "source": "s2-fos-model"
       *       },
       *       {
       *         "category": "Mathematics",
       *         "source": "s2-fos-model"
       *       }
       *     ]
       */
      s2FieldsOfStudy?: Record<string, never>[]
      /**
       * @description The type of this publication.
       * @example [
       *       "Journal Article",
       *       "Review"
       *     ]
       */
      publicationTypes?: string[]
      /**
       * @description The date when this paper was published, in YYYY-MM-DD format.
       * @example 2024-04-29
       */
      publicationDate?: string
      /**
       * @description An object that contains the following parameters, if available: name (the journal name), volume (the journal’s volume number), and pages (the page number range)
       * @example {
       *       "volume": "40",
       *       "pages": "116 - 135",
       *       "name": "IETE Technical Review"
       *     }
       */
      journal?: Record<string, never>
      /**
       * @description The BibTex bibliographical citation of the paper.
       * @example {
       *       "bibtex": "@['JournalArticle', 'Conference']{Ammar2018ConstructionOT,\n author = {Waleed Ammar and Dirk Groeneveld and Chandra Bhagavatula and Iz Beltagy and Miles Crawford and Doug Downey and Jason Dunkelberger and Ahmed Elgohary and Sergey Feldman and Vu A. Ha and Rodney Michael Kinney and Sebastian Kohlmeier and Kyle Lo and Tyler C. Murray and Hsu-Han Ooi and Matthew E. Peters and Joanna L. Power and Sam Skjonsberg and Lucy Lu Wang and Christopher Wilhelm and Zheng Yuan and Madeleine van Zuylen and Oren Etzioni},\n booktitle = {NAACL},\n pages = {84-91},\n title = {Construction of the Literature Graph in Semantic Scholar},\n year = {2018}\n}\n"
       *     }
       */
      citationStyles?: Record<string, never>
      /**
       * Author Info
       * @description Details about the paper's authors
       */
      authors?: components['schemas']['AuthorInfo'][]
    }
    'AuthorInfo': {
      /**
       * This field will be provided if no fields are specified
       * @description Semantic Scholar’s unique ID for the author.
       * @example 1741101
       */
      authorId?: string
      /**
       * This field will be provided if no fields are specified
       * @description Author’s name.
       * @example Oren Etzioni
       */
      name?: string
    }
    'Embedding': {
      /**
       * @description The Spector vector embedding model version: https://github.com/allenai/specter
       * @example specter@v0.1.1
       */
      model?: string
      /**
       * @description Numerical embedding vector.
       * @example [
       *       -8.82082748413086,
       *       -2.6610865592956543
       *     ]
       */
      vector?: Record<string, never>
    }
    'Tldr': {
      /**
       * @description The tldr model version number: https://github.com/allenai/scitldr
       * @example tldr@v2.0.0
       */
      model?: string
      /**
       * @description The tldr paper summary.
       * @example This paper reduces literature graph construction into familiar NLP tasks, point out research challenges due to differences from standard formulations of these tasks, and report empirical results for each task.
       */
      text?: string
    }
    'PaperBatch': {
      ids?: string[]
    }
    'CitationBatch': {
      /** @description Starting position for this batch. */
      offset?: number
      /** @description Starting position of the next batch. Absent if no more data exists. */
      next?: number
      data?: components['schemas']['Citation'][]
    }
    'Citation': {
      /**
       * @description Array of text snippets where the reference to the paper is mentioned.
       * @example [
       *       "SciBERT (Beltagy et al., 2019) follows the BERT’s masking strategy to pre-train the model from scratch using a scientific corpus composed of papers from Semantic Scholar (Ammar et al., 2018).",
       *       "27M articles from the Semantic Scholar dataset (Ammar et al., 2018)."
       *     ]
       */
      contexts?: string[]
      /**
       * @description Array of citation intents that summarizes how the reference to the paper is mentioned. Possible intents: https://www.semanticscholar.org/faq#citation-intent
       * @example [
       *       "methodology"
       *     ]
       */
      intents?: string[]
      /**
       * @description Array of objects that contain both contexts and the intents they are associated with.
       * @example [
       *       {
       *         "context": "SciBERT (Beltagy et al., 2019) follows the BERT’s ...",
       *         "intents": [
       *           "methodology"
       *         ]
       *       }
       *     ]
       */
      contextsWithIntent?: Record<string, never>[]
      /**
       * @description Whether the citing paper is highly influential. See more about influential citations: https://www.semanticscholar.org/faq#influential-citations
       * @example false
       */
      isInfluential?: boolean
      /** @description Details about the citing paper */
      citingPaper?: components['schemas']['BasePaper']
    }
    'ReferenceBatch': {
      /** @description Starting position for this batch. */
      offset?: number
      /** @description Starting position of the next batch. Absent if no more data exists. */
      next?: number
      data?: components['schemas']['Reference'][]
    }
    'Reference': {
      /**
       * @description Array of text snippets where the reference to the paper is mentioned.
       * @example [
       *       "SciBERT (Beltagy et al., 2019) follows the BERT’s masking strategy to pre-train the model from scratch using a scientific corpus composed of papers from Semantic Scholar (Ammar et al., 2018).",
       *       "27M articles from the Semantic Scholar dataset (Ammar et al., 2018)."
       *     ]
       */
      contexts?: string[]
      /**
       * @description Array of citation intents that summarizes how the reference to the paper is mentioned. Possible intents: https://www.semanticscholar.org/faq#citation-intent
       * @example [
       *       "methodology"
       *     ]
       */
      intents?: string[]
      /**
       * @description Array of objects that contain both contexts and the intents they are associated with.
       * @example [
       *       {
       *         "context": "SciBERT (Beltagy et al., 2019) follows the BERT’s ...",
       *         "intents": [
       *           "methodology"
       *         ]
       *       }
       *     ]
       */
      contextsWithIntent?: Record<string, never>[]
      /**
       * @description Whether the citing paper is highly influential. See more about influential citations: https://www.semanticscholar.org/faq#influential-citations
       * @example false
       */
      isInfluential?: boolean
      /** @description Details about the cited paper */
      citedPaper?: components['schemas']['BasePaper']
    }
    'AuthorBatch': {
      /** @description Starting position for this batch. */
      offset?: number
      /** @description Starting position of the next batch. Absent if no more data exists. */
      next?: number
      data?: components['schemas']['AuthorWithPapers'][]
    }
    'AuthorWithPapers': {
      /**
       * This field will be provided if no fields are specified
       * @description Semantic Scholar’s unique ID for the author.
       * @example 1741101
       */
      authorId?: string
      /**
       * @description An object that contains the ORCID/DBLP IDs for the author, if known.
       * @example {
       *       "DBLP": [
       *         123
       *       ]
       *     }
       */
      externalIds?: Record<string, never>
      /**
       * @description URL of the author on the Semantic Scholar website.
       * @example https://www.semanticscholar.org/author/1741101
       */
      url?: string
      /**
       * This field will be provided if no fields are specified
       * @description Author’s name.
       * @example Oren Etzioni
       */
      name?: string
      /**
       * @description Array of organizational affiliations for the author.
       * @example [
       *       "Allen Institute for AI"
       *     ]
       */
      affiliations?: string[]
      /**
       * @description The author’s homepage.
       * @example https://allenai.org/
       */
      homepage?: string
      /**
       * @description The author's total publications count.
       * @example 10
       */
      paperCount?: string
      /**
       * @description The author's total citations count.
       * @example 50
       */
      citationCount?: string
      /**
       * @description The author’s h-index, which is a measure of the productivity and citation impact of the author’s publications: https://www.semanticscholar.org/faq#h-index
       * @example 5
       */
      hIndex?: string
      papers?: components['schemas']['BasePaper'][]
    }
    'PaperRelevanceSearchBatch': {
      /**
       * @description Approximate number of matching search results.
       *
       *     Because of the subtleties of finding partial phrase matches in different parts of the document, be cautious about interpreting the total field as a count of documents containing any particular word in the query.
       * @example 15117
       */
      total?: string
      /** @description Starting position for this batch. */
      offset?: number
      /** @description Starting position of the next batch. Absent if no more data exists. */
      next?: number
      data?: components['schemas']['FullPaper'][]
    }
    'PaperBulkSearchBatch': {
      /**
       * @description Approximate number of matching search results.
       *
       *     Because of the subtleties of finding partial phrase matches in different parts of the document, be cautious about interpreting the total field as a count of documents containing any particular word in the query.
       * @example 15117
       */
      total?: string
      /**
       * @description A continuation token that must be provided to fetch the next page of results. Present only when more results can be fetched.
       * @example SDKJFHSDKFHWIEFSFSGHEIURYC
       */
      token?: string
      data?: components['schemas']['BasePaper'][]
    }
    'PaperMatch': {
      data?: components['schemas']['Title Match Paper'][]
    }
    'Title Match Paper': {
      matchScore?: number
      /**
       * @description Semantic Scholar’s primary unique identifier for a paper.
       * @example 5c5751d45e298cea054f32b392c12c61027d2fe7
       */
      paperId?: string
      /**
       * @description Semantic Scholar’s secondary unique identifier for a paper.
       * @example 215416146
       */
      corpusId?: number
      /**
       * @description An object that contains the paper’s unique identifiers in external sources. The external sources are limited to: ArXiv, MAG, ACL, PubMed, Medline, PubMedCentral, DBLP, and DOI.
       * @example {
       *       "MAG": "3015453090",
       *       "DBLP": "conf/acl/LoWNKW20",
       *       "ACL": "2020.acl-main.447",
       *       "DOI": "10.18653/V1/2020.ACL-MAIN.447",
       *       "CorpusId": 215416146
       *     }
       */
      externalIds?: Record<string, never>
      /**
       * @description URL of the paper on the Semantic Scholar website.
       * @example https://www.semanticscholar.org/paper/5c5751d45e298cea054f32b392c12c61027d2fe7
       */
      url?: string
      /**
       * @description Title of the paper.
       * @example Construction of the Literature Graph in Semantic Scholar
       */
      title?: string
      /**
       * @description The paper's abstract. Note that due to legal reasons, this may be missing even if we display an abstract on the website.
       * @example We describe a deployed scalable system for organizing published scientific literature into a heterogeneous graph to facilitate algorithmic manipulation and discovery.
       */
      abstract?: string
      /**
       * @description The name of the paper’s publication venue.
       * @example Annual Meeting of the Association for Computational Linguistics
       */
      venue?: string
      /**
       * @description An object that contains the following information about the journal or conference in which this paper was published: id (the venue’s unique ID), name (the venue’s name), type (the type of venue), alternate_names (an array of alternate names for the venue), and url (the venue’s website).
       * @example {
       *       "id": "1e33b3be-b2ab-46e9-96e8-d4eb4bad6e44",
       *       "name": "Annual Meeting of the Association for Computational Linguistics",
       *       "type": "conference",
       *       "alternate_names": [
       *         "Annu Meet Assoc Comput Linguistics",
       *         "Meeting of the Association for Computational Linguistics",
       *         "ACL",
       *         "Meet Assoc Comput Linguistics"
       *       ],
       *       "url": "https://www.aclweb.org/anthology/venues/acl/"
       *     }
       */
      publicationVenue?: Record<string, never>
      /**
       * @description The year the paper was published.
       * @example 1997
       */
      year?: number
      /**
       * @description The total number of papers this paper references.
       * @example 59
       */
      referenceCount?: number
      /**
       * @description The total number of papers that references this paper.
       * @example 453
       */
      citationCount?: number
      /**
       * @description A subset of the citation count, where the cited publication has a significant impact on the citing publication. Determined by Semantic Scholar’s algorithm: https://www.semanticscholar.org/faq#influential-citations.
       * @example 90
       */
      influentialCitationCount?: number
      /**
       * @description Whether the paper is open access. More information here: https://www.openaccess.nl/en/what-is-open-access.
       * @example true
       */
      isOpenAccess?: boolean
      /**
       * @description An object that contains the following parameters: url (a link to the paper’s PDF), status (the type of open access https://en.wikipedia.org/wiki/Open_access#Colour_naming_system), the paper's license, and a legal disclaimer.
       * @example {
       *       "url": "https://www.aclweb.org/anthology/2020.acl-main.447.pdf",
       *       "status": "HYBRID",
       *       "license": "CCBY",
       *       "disclaimer": "Notice: This snippet is extracted from the open access paper or abstract available at https://aclanthology.org/2020.acl-main.447, which is subject to the license by the author or copyright owner provided with this content. Please go to the source to verify the license and copyright information for your use."
       *     }
       */
      openAccessPdf?: Record<string, never>
      /**
       * @description A list of the paper’s high-level academic categories from external sources. The possible fields are: Computer Science, Medicine, Chemistry, Biology, Materials Science, Physics, Geology, Psychology, Art, History, Geography, Sociology, Business, Political Science, Economics, Philosophy, Mathematics, Engineering, Environmental Science, Agricultural and Food Sciences, Education, Law, and Linguistics.
       * @example [
       *       "Computer Science"
       *     ]
       */
      fieldsOfStudy?: string[]
      /**
       * @description An array of objects. Each object contains the following parameters: category (a field of study. The possible fields are the same as in fieldsOfStudy), and source (specifies whether the category was classified by Semantic Scholar or by an external source. More information on how Semantic Scholar classifies papers https://blog.allenai.org/announcing-s2fos-an-open-source-academic-field-of-study-classifier-9d2f641949e5)
       * @example [
       *       {
       *         "category": "Computer Science",
       *         "source": "external"
       *       },
       *       {
       *         "category": "Computer Science",
       *         "source": "s2-fos-model"
       *       },
       *       {
       *         "category": "Mathematics",
       *         "source": "s2-fos-model"
       *       }
       *     ]
       */
      s2FieldsOfStudy?: Record<string, never>[]
      /**
       * @description The type of this publication.
       * @example [
       *       "Journal Article",
       *       "Review"
       *     ]
       */
      publicationTypes?: string[]
      /**
       * @description The date when this paper was published, in YYYY-MM-DD format.
       * @example 2024-04-29
       */
      publicationDate?: string
      /**
       * @description An object that contains the following parameters, if available: name (the journal name), volume (the journal’s volume number), and pages (the page number range)
       * @example {
       *       "volume": "40",
       *       "pages": "116 - 135",
       *       "name": "IETE Technical Review"
       *     }
       */
      journal?: Record<string, never>
      /**
       * @description The BibTex bibliographical citation of the paper.
       * @example {
       *       "bibtex": "@['JournalArticle', 'Conference']{Ammar2018ConstructionOT,\n author = {Waleed Ammar and Dirk Groeneveld and Chandra Bhagavatula and Iz Beltagy and Miles Crawford and Doug Downey and Jason Dunkelberger and Ahmed Elgohary and Sergey Feldman and Vu A. Ha and Rodney Michael Kinney and Sebastian Kohlmeier and Kyle Lo and Tyler C. Murray and Hsu-Han Ooi and Matthew E. Peters and Joanna L. Power and Sam Skjonsberg and Lucy Lu Wang and Christopher Wilhelm and Zheng Yuan and Madeleine van Zuylen and Oren Etzioni},\n booktitle = {NAACL},\n pages = {84-91},\n title = {Construction of the Literature Graph in Semantic Scholar},\n year = {2018}\n}\n"
       *     }
       */
      citationStyles?: Record<string, never>
      authors?: components['schemas']['Author'][]
      /** Paper Info */
      citations?: components['schemas']['BasePaper'][]
      references?: components['schemas']['BasePaper'][]
      embedding?: components['schemas']['Embedding']
      tldr?: components['schemas']['Tldr']
    }
    'PaperAutocomplete': {
      matches?: components['schemas']['Autocomplete Paper'][]
    }
    'Autocomplete Paper': {
      /**
       * @description The paper's primary unique identifier.
       * @example 649def34f8be52c8b66281af98ae884c09aef38b
       */
      id?: string
      /**
       * @description Title of the paper.
       * @example SciBERT: A Pretrained Language Model for Scientific Text
       */
      title?: string
      /**
       * @description Summary of the authors of the paper and year of publication.
       * @example Beltagy et al., 2019
       */
      authorsYear?: string
    }
    'AuthorIdList': {
      ids?: string[]
    }
    'AuthorPaperBatch': {
      /** @description Starting position for this batch. */
      offset?: number
      /** @description Starting position of the next batch. Absent if no more data exists. */
      next?: number
      data?: components['schemas']['PaperWithLinks'][]
    }
    'PaperWithLinks': {
      /**
       * @description Semantic Scholar’s primary unique identifier for a paper.
       * @example 5c5751d45e298cea054f32b392c12c61027d2fe7
       */
      paperId?: string
      /**
       * @description Semantic Scholar’s secondary unique identifier for a paper.
       * @example 215416146
       */
      corpusId?: number
      /**
       * @description An object that contains the paper’s unique identifiers in external sources. The external sources are limited to: ArXiv, MAG, ACL, PubMed, Medline, PubMedCentral, DBLP, and DOI.
       * @example {
       *       "MAG": "3015453090",
       *       "DBLP": "conf/acl/LoWNKW20",
       *       "ACL": "2020.acl-main.447",
       *       "DOI": "10.18653/V1/2020.ACL-MAIN.447",
       *       "CorpusId": 215416146
       *     }
       */
      externalIds?: Record<string, never>
      /**
       * @description URL of the paper on the Semantic Scholar website.
       * @example https://www.semanticscholar.org/paper/5c5751d45e298cea054f32b392c12c61027d2fe7
       */
      url?: string
      /**
       * @description Title of the paper.
       * @example Construction of the Literature Graph in Semantic Scholar
       */
      title?: string
      /**
       * @description The paper's abstract. Note that due to legal reasons, this may be missing even if we display an abstract on the website.
       * @example We describe a deployed scalable system for organizing published scientific literature into a heterogeneous graph to facilitate algorithmic manipulation and discovery.
       */
      abstract?: string
      /**
       * @description The name of the paper’s publication venue.
       * @example Annual Meeting of the Association for Computational Linguistics
       */
      venue?: string
      /**
       * @description An object that contains the following information about the journal or conference in which this paper was published: id (the venue’s unique ID), name (the venue’s name), type (the type of venue), alternate_names (an array of alternate names for the venue), and url (the venue’s website).
       * @example {
       *       "id": "1e33b3be-b2ab-46e9-96e8-d4eb4bad6e44",
       *       "name": "Annual Meeting of the Association for Computational Linguistics",
       *       "type": "conference",
       *       "alternate_names": [
       *         "Annu Meet Assoc Comput Linguistics",
       *         "Meeting of the Association for Computational Linguistics",
       *         "ACL",
       *         "Meet Assoc Comput Linguistics"
       *       ],
       *       "url": "https://www.aclweb.org/anthology/venues/acl/"
       *     }
       */
      publicationVenue?: Record<string, never>
      /**
       * @description The year the paper was published.
       * @example 1997
       */
      year?: number
      /**
       * @description The total number of papers this paper references.
       * @example 59
       */
      referenceCount?: number
      /**
       * @description The total number of papers that references this paper.
       * @example 453
       */
      citationCount?: number
      /**
       * @description A subset of the citation count, where the cited publication has a significant impact on the citing publication. Determined by Semantic Scholar’s algorithm: https://www.semanticscholar.org/faq#influential-citations.
       * @example 90
       */
      influentialCitationCount?: number
      /**
       * @description Whether the paper is open access. More information here: https://www.openaccess.nl/en/what-is-open-access.
       * @example true
       */
      isOpenAccess?: boolean
      /**
       * @description An object that contains the following parameters: url (a link to the paper’s PDF), status (the type of open access https://en.wikipedia.org/wiki/Open_access#Colour_naming_system), the paper's license, and a legal disclaimer.
       * @example {
       *       "url": "https://www.aclweb.org/anthology/2020.acl-main.447.pdf",
       *       "status": "HYBRID",
       *       "license": "CCBY",
       *       "disclaimer": "Notice: This snippet is extracted from the open access paper or abstract available at https://aclanthology.org/2020.acl-main.447, which is subject to the license by the author or copyright owner provided with this content. Please go to the source to verify the license and copyright information for your use."
       *     }
       */
      openAccessPdf?: Record<string, never>
      /**
       * @description A list of the paper’s high-level academic categories from external sources. The possible fields are: Computer Science, Medicine, Chemistry, Biology, Materials Science, Physics, Geology, Psychology, Art, History, Geography, Sociology, Business, Political Science, Economics, Philosophy, Mathematics, Engineering, Environmental Science, Agricultural and Food Sciences, Education, Law, and Linguistics.
       * @example [
       *       "Computer Science"
       *     ]
       */
      fieldsOfStudy?: string[]
      /**
       * @description An array of objects. Each object contains the following parameters: category (a field of study. The possible fields are the same as in fieldsOfStudy), and source (specifies whether the category was classified by Semantic Scholar or by an external source. More information on how Semantic Scholar classifies papers https://blog.allenai.org/announcing-s2fos-an-open-source-academic-field-of-study-classifier-9d2f641949e5)
       * @example [
       *       {
       *         "category": "Computer Science",
       *         "source": "external"
       *       },
       *       {
       *         "category": "Computer Science",
       *         "source": "s2-fos-model"
       *       },
       *       {
       *         "category": "Mathematics",
       *         "source": "s2-fos-model"
       *       }
       *     ]
       */
      s2FieldsOfStudy?: Record<string, never>[]
      /**
       * @description The type of this publication.
       * @example [
       *       "Journal Article",
       *       "Review"
       *     ]
       */
      publicationTypes?: string[]
      /**
       * @description The date when this paper was published, in YYYY-MM-DD format.
       * @example 2024-04-29
       */
      publicationDate?: string
      /**
       * @description An object that contains the following parameters, if available: name (the journal name), volume (the journal’s volume number), and pages (the page number range)
       * @example {
       *       "volume": "40",
       *       "pages": "116 - 135",
       *       "name": "IETE Technical Review"
       *     }
       */
      journal?: Record<string, never>
      /**
       * @description The BibTex bibliographical citation of the paper.
       * @example {
       *       "bibtex": "@['JournalArticle', 'Conference']{Ammar2018ConstructionOT,\n author = {Waleed Ammar and Dirk Groeneveld and Chandra Bhagavatula and Iz Beltagy and Miles Crawford and Doug Downey and Jason Dunkelberger and Ahmed Elgohary and Sergey Feldman and Vu A. Ha and Rodney Michael Kinney and Sebastian Kohlmeier and Kyle Lo and Tyler C. Murray and Hsu-Han Ooi and Matthew E. Peters and Joanna L. Power and Sam Skjonsberg and Lucy Lu Wang and Christopher Wilhelm and Zheng Yuan and Madeleine van Zuylen and Oren Etzioni},\n booktitle = {NAACL},\n pages = {84-91},\n title = {Construction of the Literature Graph in Semantic Scholar},\n year = {2018}\n}\n"
       *     }
       */
      citationStyles?: Record<string, never>
      /**
       * Author Info
       * @description Details about the paper's authors
       */
      authors?: components['schemas']['AuthorInfo'][]
      /** Paper Info */
      citations?: components['schemas']['PaperInfo'][]
      references?: components['schemas']['PaperInfo'][]
    }
    'PaperInfo': {
      /**
       * @description Semantic Scholar’s primary unique identifier for a paper.
       * @example 5c5751d45e298cea054f32b392c12c61027d2fe7
       */
      paperId?: string
      /**
       * @description Semantic Scholar’s secondary unique identifier for a paper.
       * @example 215416146
       */
      corpusId?: number
      /**
       * @description URL of the paper on the Semantic Scholar website.
       * @example https://www.semanticscholar.org/paper/5c5751d45e298cea054f32b392c12c61027d2fe7
       */
      url?: string
      /**
       * @description Title of the paper.
       * @example Construction of the Literature Graph in Semantic Scholar
       */
      title?: string
      /**
       * @description The name of the paper’s publication venue.
       * @example Annual Meeting of the Association for Computational Linguistics
       */
      venue?: string
      /**
       * @description An object that contains the following information about the journal or conference in which this paper was published: id (the venue’s unique ID), name (the venue’s name), type (the type of venue), alternate_names (an array of alternate names for the venue), and url (the venue’s website).
       * @example {
       *       "id": "1e33b3be-b2ab-46e9-96e8-d4eb4bad6e44",
       *       "name": "Annual Meeting of the Association for Computational Linguistics",
       *       "type": "conference",
       *       "alternate_names": [
       *         "Annu Meet Assoc Comput Linguistics",
       *         "Meeting of the Association for Computational Linguistics",
       *         "ACL",
       *         "Meet Assoc Comput Linguistics"
       *       ],
       *       "url": "https://www.aclweb.org/anthology/venues/acl/"
       *     }
       */
      publicationVenue?: Record<string, never>
      /**
       * @description The year the paper was published.
       * @example 1997
       */
      year?: number
      /**
       * Author Info
       * @description Details about the paper's authors
       */
      authors?: components['schemas']['AuthorInfo'][]
    }
    'AuthorSearchBatch': {
      /**
       * @description Approximate number of matching search results.
       *
       *     Because of the subtleties of finding partial phrase matches in different parts of the document, be cautious about interpreting the total field as a count of documents containing any particular word in the query.
       * @example 15117
       */
      total?: string
      /** @description Starting position for this batch. */
      offset?: number
      /** @description Starting position of the next batch. Absent if no more data exists. */
      next?: number
      data?: components['schemas']['AuthorWithPapers'][]
    }
    'SnippetMatch': {
      data?: components['schemas']['Snippet Match'][]
      /** @description A rough representation of the retrieval approach we've used to get the results. We'll usually bump this if we change something about how we get results. Note that the same retrievalVersion value doesn't guarantee that you'll get the same results for the same query at different times, and a different retrievalVersion value doesn't always mean you'll get different results. */
      retrievalVersion?: string
    }
    'Snippet Match': {
      snippet?: components['schemas']['snippet']
      /** @example 0.561970777028496 */
      score?: number
      paper?: components['schemas']['paper']
    }
    'snippet': {
      /**
       * @description The direct quote or snippet from the paper relevant to the query.
       * @example In this paper, we discuss the construction of a graph, providing a symbolic representation of the scientific literature. We describe deployed models for identifying authors, references and entities in the paper text, and provide experimental results to evaluate the performance of each model.
       *
       *     Three research directions follow from this work and other similar projects, e.g., Hahn-Powell et al. (2017); Wu et al. (2014): i) improving quality and enriching content of the literature graph (e.g., ontology matching and knowledge base population). ii) aggregating domain-specific extractions across many papers to enable a better understanding of the literature as a whole (e.g., identifying demographic biases in clinical trial participants and summarizing empirical results on important tasks). iii) exploring the literature via natural language interfaces.
       *
       *     In order to help future research efforts, we make the following resources publicly available: metadata for over 20 million papers,10 meaningful citations dataset,11 models for figure and table extraction,12 models for predicting citations in a paper draft 13 and models for extracting paper metadata,14 among other resources.
       */
      text?: string
      /**
       * @description Where the snippet is located, options are: title, abstract, or body.
       * @example body
       */
      snippetKind?: string
      /**
       * @description Only applies to snippets from the body, refers to the section of the paper where the snippet is located.
       * @example Conclusion and Future Work
       */
      section?: string
      /**
       * @description The location of the snippet within the paper.
       * @example {
       *       "start": 24506,
       *       "end": 25694
       *     }
       */
      snippetOffset?: Record<string, never>
      annotations?: components['schemas']['annotations']
    }
    'annotations': {
      sentences?: components['schemas']['sentence'][]
      refMentions?: components['schemas']['refMention'][]
    }
    'sentence': {
      /** @example 0 */
      start?: number
      /** @example 120 */
      end?: number
    }
    'refMention': {
      /** @example 377 */
      start?: number
      /** @example 402 */
      end?: number
      /** @example 7377848 */
      matchedPaperCorpusId?: string
    }
    'paper': {
      /**
       * @description Semantic Scholar’s secondary unique identifier for a paper.
       * @example 19170988
       */
      corpusId?: string
      /**
       * @description Title of the paper.
       * @example Construction of the Literature Graph in Semantic Scholar
       */
      title?: string
      authors?: string[]
      openAccessInfo?: components['schemas']['openAccessInfo']
    }
    'openAccessInfo': {
      /**
       * @description The license attached to the paper.
       * @example CCBY
       */
      license?: string
      /**
       * @description Paper's status (the type of open access https://en.wikipedia.org/wiki/Open_access#Colour_naming_system)
       * @example HYBRID
       */
      status?: string
      /**
       * @description A disclaimer about the open access use of this paper.
       * @example Notice: This snippet is extracted from the open access paper or abstract available at https://arxiv.org/abs/1805.02262, which is subject to the license by the author or copyright owner provided with this content. Please go to the source to verify the license and copyright information for your use.
       */
      disclaimer?: string
    }
  }
  responses: {
    /** @description When a mask can't be parsed */
    ParseError: {
      headers: {
        [name: string]: unknown
      }
      content?: never
    }
    /** @description When any error occurs on mask */
    MaskError: {
      headers: {
        [name: string]: unknown
      }
      content?: never
    }
  }
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  post_graph_get_authors: {
    parameters: {
      query?: {
        /**
         * @description A comma-separated list of the fields to be returned. See the contents of Response Schema below for a list of all available fields that can be returned.
         *     The <code>authorId</code> field is always returned. If the fields parameter is omitted, only the <code>authorId</code> and <code>name</code> will be returned.
         *     <p>Use a period (“.”) for subfields of <code>papers</code>.<br><br>
         *     Examples:
         *     <ul>
         *         <li><code>fields=name,affiliations,papers</code></li>
         *         <li><code>fields=url,papers.year,papers.authors</code></li>
         *     </ul>
         */
        fields?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AuthorIdList']
      }
    }
    responses: {
      /** @description List of authors with default or requested fields */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AuthorWithPapers']
        }
      }
      /** @description Bad query parameters */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error400']
        }
      }
    }
  }
  get_graph_get_author_search: {
    parameters: {
      query: {
        /** @description Used for pagination. When returning a list of results, start with the element at this position in the list. */
        offset?: number
        /**
         * @description The maximum number of results to return.<br>
         *     Must be <= 1000
         */
        limit?: number
        /**
         * @description A comma-separated list of the fields to be returned. See the contents of the <code>data</code> array in Response Schema below for a list of all available fields that can be returned.
         *     The <code>authorId</code> field is always returned. If the fields parameter is omitted, only the <code>authorId</code> and <code>name</code> will be returned.
         *     <p>Use a period (“.”) for subfields of <code>papers</code>.<br><br>
         *     Examples:
         *     <ul>
         *         <li><code>fields=name,affiliations,papers</code></li>
         *         <li><code>fields=url,papers.year,papers.authors</code></li>
         *     </ul>
         */
        fields?: string
        /**
         * @description A plain-text search query string.
         *     No special query syntax is supported.
         *     Hyphenated query terms yield no matches (replace it with space to find matches)
         */
        query: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Batch of authors with default or requested fields */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AuthorSearchBatch']
        }
      }
      /** @description Bad query parameters */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error400']
        }
      }
    }
  }
  get_graph_get_author: {
    parameters: {
      query?: {
        /**
         * @description A comma-separated list of the fields to be returned. See the contents of Response Schema below for a list of all available fields that can be returned.
         *     The <code>authorId</code> field is always returned. If the fields parameter is omitted, only the <code>authorId</code> and <code>name</code> will be returned.
         *     <p>Use a period (“.”) for subfields of <code>papers</code>.<br><br>
         *     Examples:
         *     <ul>
         *         <li><code>fields=name,affiliations,papers</code></li>
         *         <li><code>fields=url,papers.year,papers.authors</code></li>
         *     </ul>
         */
        fields?: string
      }
      header?: never
      path: {
        author_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Author with default or requested fields */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AuthorWithPapers']
        }
      }
      /** @description Bad query parameters */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error400']
        }
      }
      /** @description Bad paper id */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error404']
        }
      }
    }
  }
  get_graph_get_author_papers: {
    parameters: {
      query?: {
        /** @description Used for pagination. When returning a list of results, start with the element at this position in the list. */
        offset?: number
        /**
         * @description The maximum number of results to return.<br>
         *     Must be <= 1000
         */
        limit?: number
        /**
         * @description A comma-separated list of the fields to be returned. See the contents of the <code>data</code> array in Response Schema below for a list of all available fields that can be returned.
         *     The <code>paperId</code> field is always returned. If the fields parameter is omitted, only the <code>paperId</code> and <code>title</code> will be returned. To fetch more references or citations per paper, reduce the number of papers in the batch with <code>limit=</code>.
         *     <p>Use a period (“.”) for subfields of <code>citations</code> and <code>references</code>.<br><br>
         *     Examples:
         *     <ul>
         *         <li><code>fields=title,fieldsOfStudy,references</code></li>
         *         <li><code>fields=abstract,citations.url,citations.venue</code></li>
         *     </ul>
         */
        fields?: string
      }
      header?: never
      path: {
        author_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description List of papers with default or requested fields */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AuthorPaperBatch']
        }
      }
      /** @description Bad query parameters */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error400']
        }
      }
      /** @description Bad paper id */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error404']
        }
      }
    }
  }
  get_graph_get_paper_autocomplete: {
    parameters: {
      query: {
        /** @description Plain-text partial query string. Will be truncated to first 100 characters. */
        query: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Batch of papers with default or requested fields */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PaperAutocomplete']
        }
      }
      /** @description Bad query parameters */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error400']
        }
      }
    }
  }
  post_graph_get_papers: {
    parameters: {
      query?: {
        /**
         * @description A comma-separated list of the fields to be returned. See the contents of Response Schema below for a list of all available fields that can be returned.
         *     The <code>paperId</code> field is always returned. If the fields parameter is omitted, only the <code>paperId</code> and <code>title</code> will be returned.
         *     <p>Use a period (“.”) for fields that have version numbers or subfields, such as the <code>embedding</code>, <code>authors</code>, <code>citations</code>, and <code>references</code> fields:
         *     <ul>
         *         <li>When requesting <code>authors</code>, the <code>authorId</code> and <code>name</code> subfields are returned by default. To request other subfields, use the format <code>author.url,author.paperCount</code>, etc. See the Response Schema below for available subfields.</li>
         *         <li>When requesting <code>citations</code> and <code>references</code>, the <code>paperId</code> and <code>title</code> subfields are returned by default. To request other subfields, use the format <code>citations.title,citations.abstract</code>, etc. See the Response Schema below for available subfields.</li>
         *         <li>When requesting <code>embedding</code>, the default <a href="https://github.com/allenai/specter">Spector embedding version</a> is v1. Specify <code>embedding.specter_v2</code> to select v2 embeddings.</li>
         *     </ul>
         *     Examples:
         *     <ul>
         *         <li><code>fields=title,url</code></li>
         *         <li><code>fields=title,embedding.specter_v2</code></li>
         *         <li><code>fields=title,authors,citations.title,citations.abstract</code></li>
         *     </ul>
         */
        fields?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PaperBatch']
      }
    }
    responses: {
      /** @description List of papers with default or requested fields */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['FullPaper']
        }
      }
      /** @description Bad query parameters */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error400']
        }
      }
    }
  }
  get_graph_paper_relevance_search: {
    parameters: {
      query: {
        /**
         * @description A plain-text search query string.
         *     No special query syntax is supported.
         *     Hyphenated query terms yield no matches (replace it with space to find matches)
         *
         *     See our <a href="https://medium.com/ai2-blog/building-a-better-search-engine-for-semantic-scholar-ea23a0b661e7">blog post</a>
         *     for a description of our search relevance algorithm.
         *
         *     Example:
         *     <code>graph/v1/paper/search?query=generative ai</code>
         */
        query: string
        /**
         * @description A comma-separated list of the fields to be returned. See the contents of the <code>data</code> array in Response Schema below for a list of all available fields that can be returned.
         *     The <code>paperId</code> field is always returned. If the fields parameter is omitted, only the <code>paperId</code> and <code>title</code> will be returned.
         *     <p>Use a period (“.”) for fields that have version numbers or subfields, such as the <code>embedding</code>, <code>authors</code>, <code>citations</code>, and <code>references</code> fields:
         *     <ul>
         *         <li>When requesting <code>authors</code>, the <code>authorId</code> and <code>name</code> subfields are returned by default. To request other subfields, use the format <code>author.url,author.paperCount</code>, etc. See the Response Schema below for available subfields.</li>
         *         <li>When requesting <code>citations</code> and <code>references</code>, the <code>paperId</code> and <code>title</code> subfields are returned by default. To request other subfields, use the format <code>citations.title,citations.abstract</code>, etc. See the Response Schema below for available subfields.</li>
         *         <li>When requesting <code>embedding</code>, the default <a href="https://github.com/allenai/specter">Spector embedding version</a> is v1. Specify <code>embedding.specter_v2</code> to select v2 embeddings.</li>
         *     </ul>
         *     Examples:
         *     <ul>
         *         <li><code>fields=title,url</code></li>
         *         <li><code>fields=title,embedding.specter_v2</code></li>
         *         <li><code>fields=title,authors,citations.title,citations.abstract</code></li>
         *     </ul>
         */
        fields?: string
        /**
         * @description Restricts results to any of the following paper publication types:
         *     <ul>
         *         <li>Review</li>
         *         <li>JournalArticle</li>
         *         <li>CaseReport</li>
         *         <li>ClinicalTrial</li>
         *         <li>Conference</li>
         *         <li>Dataset</li>
         *         <li>Editorial</li>
         *         <li>LettersAndComments</li>
         *         <li>MetaAnalysis</li>
         *         <li>News</li>
         *         <li>Study</li>
         *         <li>Book</li>
         *         <li>BookSection</li>
         *     </ul>
         *
         *     Use a comma-separated list to include papers with any of the listed publication types. <br><br>
         *     Example: <code>Review,JournalArticle</code> will return papers with publication types Review and/or JournalArticle.
         */
        publicationTypes?: string
        /** @description Restricts results to only include papers with a public PDF. This parameter does not accept any values. */
        openAccessPdf?: string
        /**
         * @description Restricts results to only include papers with the minimum number of citations.
         *     <br>
         *     <br>
         *     Example:
         *     <code>minCitationCount=200</code>
         */
        minCitationCount?: string
        /**
         * @description Restricts results to the given range of publication dates or years (inclusive). Accepts the format <code>&lt;startDate&gt;:&lt;endDate&gt;</code> with each date in <code>YYYY-MM-DD</code> format.
         *     <br>
         *     <br>
         *     Each term is optional, allowing for specific dates, fixed ranges, or open-ended ranges. In addition, prefixes are suported as a shorthand, e.g. <code>2020-06</code> matches all dates in June 2020.
         *     <br>
         *     <br>
         *     Specific dates are not known for all papers, so some records returned with this filter will have a <code>null</code> value for </code>publicationDate</code>. <code>year</code>, however, will always be present.
         *     For records where a specific publication date is not known, they will be treated as if published on January 1st of their publication year.
         *     <br>
         *     <br>
         *     Examples:
         *     <ul>
         *         <li><code>2019-03-05</code> on March 3rd, 2019</li>
         *         <li><code>2019-03</code> during March 2019</li>
         *         <li><code>2019</code> during 2019</li>
         *         <li><code>2016-03-05:2020-06-06</code> as early as March 5th, 2016 or as late as June 6th, 2020</li>
         *         <li><code>1981-08-25:</code> on or after August 25th, 1981</li>
         *         <li><code>:2015-01</code> before or on January 31st, 2015</li>
         *         <li><code>2015:2020</code> between January 1st, 2015 and December 31st, 2020</li>
         *     </ul>
         */
        publicationDateOrYear?: string
        /**
         * @description Restricts results to the given publication year or range of years (inclusive).
         *     <br>
         *     <br>
         *     Examples:
         *     <ul>
         *         <li><code>2019</code> in 2019</li>
         *         <li><code>2016-2020</code> as early as 2016 or as late as 2020</li>
         *         <li><code>2010-</code> during or after 2010</li>
         *         <li><code>-2015</code> before or during 2015</li>
         *     </ul>
         */
        year?: string
        /**
         * @description Restricts results to papers published in the given venues, formatted as a comma-separated list. <br><br>
         *     Input could also be an ISO4 abbreviation.
         *     Examples include:
         *     <ul>
         *         <li>Nature</li>
         *         <li>New England Journal of Medicine</li>
         *         <li>Radiology</li>
         *         <li>N. Engl. J. Med.</li>
         *     </ul>
         *
         *     Example: <code>Nature,Radiology</code> will return papers from venues Nature and/or Radiology.
         */
        venue?: string
        /**
         * @description Restricts results to papers in the given fields of study, formatted as a comma-separated list:
         *     <ul>
         *     <li>Computer Science</li>
         *     <li>Medicine</li>
         *     <li>Chemistry</li>
         *     <li>Biology</li>
         *     <li>Materials Science</li>
         *     <li>Physics</li>
         *     <li>Geology</li>
         *     <li>Psychology</li>
         *     <li>Art</li>
         *     <li>History</li>
         *     <li>Geography</li>
         *     <li>Sociology</li>
         *     <li>Business</li>
         *     <li>Political Science</li>
         *     <li>Economics</li>
         *     <li>Philosophy</li>
         *     <li>Mathematics</li>
         *     <li>Engineering</li>
         *     <li>Environmental Science</li>
         *     <li>Agricultural and Food Sciences</li>
         *     <li>Education</li>
         *     <li>Law</li>
         *     <li>Linguistics</li>
         *     </ul>
         *
         *     Example: <code>Physics,Mathematics</code> will return papers with either Physics or Mathematics in their list of fields-of-study.
         */
        fieldsOfStudy?: string
        /** @description Used for pagination. When returning a list of results, start with the element at this position in the list. */
        offset?: number
        /**
         * @description The maximum number of results to return.<br>
         *     Must be <= 100
         */
        limit?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Batch of papers with default or requested fields */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PaperRelevanceSearchBatch']
        }
      }
      /** @description Bad query parameters */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error400']
        }
      }
    }
  }
  get_graph_paper_bulk_search: {
    parameters: {
      query: {
        /**
         * @description Text query that will be matched against the paper's title and abstract. All terms are stemmed in English. By default all terms in the query must be present in the paper.
         *
         *     The match query supports the following syntax:
         *     <ul>
         *     <li><code>+</code> for AND operation</li>
         *     <li><code>|</code> for OR operation</li>
         *     <li><code>-</code> negates a term </li>
         *     <li><code>"</code> collects terms into a phrase</li>
         *     <li><code>*</code> can be used to match a prefix</li>
         *         <li><code>(</code> and <code>)</code> for precedence</li>
         *     <li><code>~N</code> after a word matches within the edit distance of N (Defaults to 2 if N is omitted)</li>
         *     <li><code>~N</code> after a phrase matches with the phrase terms separated up to N terms apart (Defaults to 2 if N is omitted)</li>
         *     </ul>
         *
         *     Examples:
         *     <ul>
         *         <li><code>fish ladder</code> matches papers that contain "fish" and "ladder"</li>
         *         <li><code>fish -ladder</code> matches papers that contain "fish" but not "ladder"</li>
         *         <li><code>fish | ladder</code> matches papers that contain "fish" or "ladder"</li>
         *         <li><code>"fish ladder"</code> matches papers that contain the phrase "fish ladder"</li>
         *         <li><code>(fish ladder) | outflow</code> matches papers that contain "fish" and "ladder" OR "outflow"</li>
         *         <li><code>fish~</code> matches papers that contain "fish", "fist", "fihs", etc. </li>
         *         <li><code>"fish ladder"~3</code> mathces papers that contain the phrase "fish ladder" or "fish is on a ladder"</li>
         *     </ul>
         */
        query: string
        /** @description Used for pagination. This string token is provided when the original query returns, and is used to fetch the next batch of papers. Each call will return a new token. */
        token?: string
        /**
         * @description A comma-separated list of the fields to be returned. See the contents of the <code>data</code> array in Response Schema below for a list of all available fields that can be returned.<br><br>
         *     The <code>paperId</code> field is always returned. If the fields parameter is omitted, only the <code>paperId</code> and <code>title</code> will be returned.<br><br>
         *     Examples: <code>https://api.semanticscholar.org/graph/v1/paper/search/bulk?query=covid&fields=venue,s2FieldsOfStudy</code>
         */
        fields?: string
        /**
         * @description Provides the option to sort the results by the following fields:
         *     <ul>
         *         <li><code>paperId</code></li>
         *         <li><code>publicationDate</code></li>
         *         <li><code>citationCount</code></li>
         *     </ul>
         *     Uses the format <code>field:order</code>. Ties are broken by <code>paperId</code>. The default field is <code>paperId</code> and the default order is asc. Records for which the sort value are not defined will appear at the end of sort, regardless of asc/desc order.
         *     <br>
         *     <br>
         *     Examples:
         *     <ul>
         *         <li><code>publicationDate:asc</code> - return oldest papers first.</li>
         *         <li><code>citationCount:desc</code> - return most highly-cited papers first.</li>
         *         <li><code>paperId</code> - return papers in ID order, low-to-high.</li>
         *     </ul>
         *     <br>
         *     Please be aware that if the relevant data changes while paging through results, records can be returned in an unexpected way. The default <code>paperId</code> sort avoids this edge case.
         */
        sort?: string
        /**
         * @description Restricts results to any of the following paper publication types:
         *     <ul>
         *         <li>Review</li>
         *         <li>JournalArticle</li>
         *         <li>CaseReport</li>
         *         <li>ClinicalTrial</li>
         *         <li>Conference</li>
         *         <li>Dataset</li>
         *         <li>Editorial</li>
         *         <li>LettersAndComments</li>
         *         <li>MetaAnalysis</li>
         *         <li>News</li>
         *         <li>Study</li>
         *         <li>Book</li>
         *         <li>BookSection</li>
         *     </ul>
         *
         *     Use a comma-separated list to include papers with any of the listed publication types. <br><br>
         *     Example: <code>Review,JournalArticle</code> will return papers with publication types Review and/or JournalArticle.
         */
        publicationTypes?: string
        /** @description Restricts results to only include papers with a public PDF. This parameter does not accept any values. */
        openAccessPdf?: string
        /**
         * @description Restricts results to only include papers with the minimum number of citations.
         *     <br>
         *     <br>
         *     Example:
         *     <code>minCitationCount=200</code>
         */
        minCitationCount?: string
        /**
         * @description Restricts results to the given range of publication dates or years (inclusive). Accepts the format <code>&lt;startDate&gt;:&lt;endDate&gt;</code> with each date in <code>YYYY-MM-DD</code> format.
         *     <br>
         *     <br>
         *     Each term is optional, allowing for specific dates, fixed ranges, or open-ended ranges. In addition, prefixes are suported as a shorthand, e.g. <code>2020-06</code> matches all dates in June 2020.
         *     <br>
         *     <br>
         *     Specific dates are not known for all papers, so some records returned with this filter will have a <code>null</code> value for </code>publicationDate</code>. <code>year</code>, however, will always be present.
         *     For records where a specific publication date is not known, they will be treated as if published on January 1st of their publication year.
         *     <br>
         *     <br>
         *     Examples:
         *     <ul>
         *         <li><code>2019-03-05</code> on March 3rd, 2019</li>
         *         <li><code>2019-03</code> during March 2019</li>
         *         <li><code>2019</code> during 2019</li>
         *         <li><code>2016-03-05:2020-06-06</code> as early as March 5th, 2016 or as late as June 6th, 2020</li>
         *         <li><code>1981-08-25:</code> on or after August 25th, 1981</li>
         *         <li><code>:2015-01</code> before or on January 31st, 2015</li>
         *         <li><code>2015:2020</code> between January 1st, 2015 and December 31st, 2020</li>
         *     </ul>
         */
        publicationDateOrYear?: string
        /**
         * @description Restricts results to the given publication year or range of years (inclusive).
         *     <br>
         *     <br>
         *     Examples:
         *     <ul>
         *         <li><code>2019</code> in 2019</li>
         *         <li><code>2016-2020</code> as early as 2016 or as late as 2020</li>
         *         <li><code>2010-</code> during or after 2010</li>
         *         <li><code>-2015</code> before or during 2015</li>
         *     </ul>
         */
        year?: string
        /**
         * @description Restricts results to papers published in the given venues, formatted as a comma-separated list. <br><br>
         *     Input could also be an ISO4 abbreviation.
         *     Examples include:
         *     <ul>
         *         <li>Nature</li>
         *         <li>New England Journal of Medicine</li>
         *         <li>Radiology</li>
         *         <li>N. Engl. J. Med.</li>
         *     </ul>
         *
         *     Example: <code>Nature,Radiology</code> will return papers from venues Nature and/or Radiology.
         */
        venue?: string
        /**
         * @description Restricts results to papers in the given fields of study, formatted as a comma-separated list:
         *     <ul>
         *     <li>Computer Science</li>
         *     <li>Medicine</li>
         *     <li>Chemistry</li>
         *     <li>Biology</li>
         *     <li>Materials Science</li>
         *     <li>Physics</li>
         *     <li>Geology</li>
         *     <li>Psychology</li>
         *     <li>Art</li>
         *     <li>History</li>
         *     <li>Geography</li>
         *     <li>Sociology</li>
         *     <li>Business</li>
         *     <li>Political Science</li>
         *     <li>Economics</li>
         *     <li>Philosophy</li>
         *     <li>Mathematics</li>
         *     <li>Engineering</li>
         *     <li>Environmental Science</li>
         *     <li>Agricultural and Food Sciences</li>
         *     <li>Education</li>
         *     <li>Law</li>
         *     <li>Linguistics</li>
         *     </ul>
         *
         *     Example: <code>Physics,Mathematics</code> will return papers with either Physics or Mathematics in their list of fields-of-study.
         */
        fieldsOfStudy?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Batch of papers with default or requested fields */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PaperBulkSearchBatch']
        }
      }
      /** @description Bad query parameters */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error400']
        }
      }
    }
  }
  get_graph_paper_title_search: {
    parameters: {
      query: {
        /**
         * @description A plain-text search query string.
         *     No special query syntax is supported.
         *
         *     See our <a href="https://medium.com/ai2-blog/building-a-better-search-engine-for-semantic-scholar-ea23a0b661e7">blog post</a>
         *     for a description of our search relevance algorithm.
         */
        query: string
        /**
         * @description A comma-separated list of the fields to be returned. See the contents of the <code>data</code> array in Response Schema below for a list of all available fields that can be returned.
         *     The <code>paperId</code> field is always returned. If the fields parameter is omitted, only the <code>paperId</code> and <code>title</code> will be returned.
         *     <p>Use a period (“.”) for fields that have version numbers or subfields, such as the <code>embedding</code>, <code>authors</code>, <code>citations</code>, and <code>references</code> fields:
         *     <ul>
         *         <li>When requesting <code>authors</code>, the <code>authorId</code> and <code>name</code> subfields are returned by default. To request other subfields, use the format <code>author.url,author.paperCount</code>, etc. See the Response Schema below for available subfields.</li>
         *         <li>When requesting <code>citations</code> and <code>references</code>, the <code>paperId</code> and <code>title</code> subfields are returned by default. To request other subfields, use the format <code>citations.title,citations.abstract</code>, etc. See the Response Schema below for available subfields.</li>
         *         <li>When requesting <code>embedding</code>, the default <a href="https://github.com/allenai/specter">Spector embedding version</a> is v1. Specify <code>embedding.specter_v2</code> to select v2 embeddings.</li>
         *     </ul>
         *     Examples:
         *     <ul>
         *         <li><code>fields=title,url</code></li>
         *         <li><code>fields=title,embedding.specter_v2</code></li>
         *         <li><code>fields=title,authors,citations.title,citations.abstract</code></li>
         *     </ul>
         */
        fields?: string
        /**
         * @description Restricts results to any of the following paper publication types:
         *     <ul>
         *         <li>Review</li>
         *         <li>JournalArticle</li>
         *         <li>CaseReport</li>
         *         <li>ClinicalTrial</li>
         *         <li>Conference</li>
         *         <li>Dataset</li>
         *         <li>Editorial</li>
         *         <li>LettersAndComments</li>
         *         <li>MetaAnalysis</li>
         *         <li>News</li>
         *         <li>Study</li>
         *         <li>Book</li>
         *         <li>BookSection</li>
         *     </ul>
         *
         *     Use a comma-separated list to include papers with any of the listed publication types. <br><br>
         *     Example: <code>Review,JournalArticle</code> will return papers with publication types Review and/or JournalArticle.
         */
        publicationTypes?: string
        /** @description Restricts results to only include papers with a public PDF. This parameter does not accept any values. */
        openAccessPdf?: string
        /**
         * @description Restricts results to only include papers with the minimum number of citations.
         *     <br>
         *     <br>
         *     Example:
         *     <code>minCitationCount=200</code>
         */
        minCitationCount?: string
        /**
         * @description Restricts results to the given range of publication dates or years (inclusive). Accepts the format <code>&lt;startDate&gt;:&lt;endDate&gt;</code> with each date in <code>YYYY-MM-DD</code> format.
         *     <br>
         *     <br>
         *     Each term is optional, allowing for specific dates, fixed ranges, or open-ended ranges. In addition, prefixes are suported as a shorthand, e.g. <code>2020-06</code> matches all dates in June 2020.
         *     <br>
         *     <br>
         *     Specific dates are not known for all papers, so some records returned with this filter will have a <code>null</code> value for </code>publicationDate</code>. <code>year</code>, however, will always be present.
         *     For records where a specific publication date is not known, they will be treated as if published on January 1st of their publication year.
         *     <br>
         *     <br>
         *     Examples:
         *     <ul>
         *         <li><code>2019-03-05</code> on March 3rd, 2019</li>
         *         <li><code>2019-03</code> during March 2019</li>
         *         <li><code>2019</code> during 2019</li>
         *         <li><code>2016-03-05:2020-06-06</code> as early as March 5th, 2016 or as late as June 6th, 2020</li>
         *         <li><code>1981-08-25:</code> on or after August 25th, 1981</li>
         *         <li><code>:2015-01</code> before or on January 31st, 2015</li>
         *         <li><code>2015:2020</code> between January 1st, 2015 and December 31st, 2020</li>
         *     </ul>
         */
        publicationDateOrYear?: string
        /**
         * @description Restricts results to the given publication year or range of years (inclusive).
         *     <br>
         *     <br>
         *     Examples:
         *     <ul>
         *         <li><code>2019</code> in 2019</li>
         *         <li><code>2016-2020</code> as early as 2016 or as late as 2020</li>
         *         <li><code>2010-</code> during or after 2010</li>
         *         <li><code>-2015</code> before or during 2015</li>
         *     </ul>
         */
        year?: string
        /**
         * @description Restricts results to papers published in the given venues, formatted as a comma-separated list. <br><br>
         *     Input could also be an ISO4 abbreviation.
         *     Examples include:
         *     <ul>
         *         <li>Nature</li>
         *         <li>New England Journal of Medicine</li>
         *         <li>Radiology</li>
         *         <li>N. Engl. J. Med.</li>
         *     </ul>
         *
         *     Example: <code>Nature,Radiology</code> will return papers from venues Nature and/or Radiology.
         */
        venue?: string
        /**
         * @description Restricts results to papers in the given fields of study, formatted as a comma-separated list:
         *     <ul>
         *     <li>Computer Science</li>
         *     <li>Medicine</li>
         *     <li>Chemistry</li>
         *     <li>Biology</li>
         *     <li>Materials Science</li>
         *     <li>Physics</li>
         *     <li>Geology</li>
         *     <li>Psychology</li>
         *     <li>Art</li>
         *     <li>History</li>
         *     <li>Geography</li>
         *     <li>Sociology</li>
         *     <li>Business</li>
         *     <li>Political Science</li>
         *     <li>Economics</li>
         *     <li>Philosophy</li>
         *     <li>Mathematics</li>
         *     <li>Engineering</li>
         *     <li>Environmental Science</li>
         *     <li>Agricultural and Food Sciences</li>
         *     <li>Education</li>
         *     <li>Law</li>
         *     <li>Linguistics</li>
         *     </ul>
         *
         *     Example: <code>Physics,Mathematics</code> will return papers with either Physics or Mathematics in their list of fields-of-study.
         */
        fieldsOfStudy?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Best Title match paper with default or requested fields */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PaperMatch']
        }
      }
      /** @description Bad query parameters */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error400']
        }
      }
      /** @description No title match */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error404']
        }
      }
    }
  }
  get_graph_get_paper: {
    parameters: {
      query?: {
        /**
         * @description A comma-separated list of the fields to be returned. See the contents of Response Schema below for a list of all available fields that can be returned.
         *     The <code>paperId</code> field is always returned. If the fields parameter is omitted, only the <code>paperId</code> and <code>title</code> will be returned.
         *     <p>Use a period (“.”) for fields that have version numbers or subfields, such as the <code>embedding</code>, <code>authors</code>, <code>citations</code>, and <code>references</code> fields:
         *     <ul>
         *         <li>When requesting <code>authors</code>, the <code>authorId</code> and <code>name</code> subfields are returned by default. To request other subfields, use the format <code>author.url,author.paperCount</code>, etc. See the Response Schema below for available subfields.</li>
         *         <li>When requesting <code>citations</code> and <code>references</code>, the <code>paperId</code> and <code>title</code> subfields are returned by default. To request other subfields, use the format <code>citations.title,citations.abstract</code>, etc. See the Response Schema below for available subfields.</li>
         *         <li>When requesting <code>embedding</code>, the default <a href="https://github.com/allenai/specter">Spector embedding version</a> is v1. Specify <code>embedding.specter_v2</code> to select v2 embeddings.</li>
         *     </ul>
         *     Examples:
         *     <ul>
         *         <li><code>fields=title,url</code></li>
         *         <li><code>fields=title,embedding.specter_v2</code></li>
         *         <li><code>fields=title,authors,citations.title,citations.abstract</code></li>
         *     </ul>
         */
        fields?: string
      }
      header?: never
      path: {
        /**
         * @description The following types of IDs are supported:
         *     <ul>
         *         <li><code>&lt;sha&gt;</code> - a Semantic Scholar ID, e.g. <code>649def34f8be52c8b66281af98ae884c09aef38b</code></li>
         *         <li><code>CorpusId:&lt;id&gt;</code> - a Semantic Scholar numerical ID, e.g. <code>CorpusId:215416146</code></li>
         *         <li><code>DOI:&lt;doi&gt;</code> - a <a href="http://doi.org">Digital Object Identifier</a>,
         *             e.g. <code>DOI:10.18653/v1/N18-3011</code></li>
         *         <li><code>ARXIV:&lt;id&gt;</code> - <a href="https://arxiv.org/">arXiv.rg</a>, e.g. <code>ARXIV:2106.15928</code></li>
         *         <li><code>MAG:&lt;id&gt;</code> - Microsoft Academic Graph, e.g. <code>MAG:112218234</code></li>
         *         <li><code>ACL:&lt;id&gt;</code> - Association for Computational Linguistics, e.g. <code>ACL:W12-3903</code></li>
         *         <li><code>PMID:&lt;id&gt;</code> - PubMed/Medline, e.g. <code>PMID:19872477</code></li>
         *         <li><code>PMCID:&lt;id&gt;</code> - PubMed Central, e.g. <code>PMCID:2323736</code></li>
         *         <li><code>URL:&lt;url&gt;</code> - URL from one of the sites listed below, e.g. <code>URL:https://arxiv.org/abs/2106.15928v1</code></li>
         *     </ul>
         *
         *     URLs are recognized from the following sites:
         *     <ul>
         *         <li><a href="https://www.semanticscholar.org/">semanticscholar.org</a></li>
         *         <li><a href="https://arxiv.org/">arxiv.org</a></li>
         *         <li><a href="https://www.aclweb.org">aclweb.org</a></li>
         *         <li><a href="https://www.acm.org/">acm.org</a></li>
         *         <li><a href="https://www.biorxiv.org/">biorxiv.org</a></li>
         *     </ul>
         */
        paper_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Paper with default or requested fields */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['FullPaper']
        }
      }
      /** @description Bad query parameters */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error400']
        }
      }
      /** @description Bad paper id */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error404']
        }
      }
    }
  }
  get_graph_get_paper_authors: {
    parameters: {
      query?: {
        /** @description Used for pagination. When returning a list of results, start with the element at this position in the list. */
        offset?: number
        /**
         * @description The maximum number of results to return.<br>
         *     Must be <= 1000
         */
        limit?: number
        /**
         * @description A comma-separated list of the fields to be returned. See the contents of the <code>data</code> array in Response Schema below for a list of all available fields that can be returned.
         *     The <code>authorId</code> field is always returned. If the fields parameter is omitted, only the <code>authorId</code> and <code>name</code> will be returned.
         *     <p>Use a period (“.”) for subfields of <code>papers</code>.<br><br>
         *     Examples:
         *     <ul>
         *         <li><code>fields=name,affiliations,papers</code></li>
         *         <li><code>fields=url,papers.year,papers.authors</code></li>
         *     </ul>
         */
        fields?: string
      }
      header?: never
      path: {
        /**
         * @description The following types of IDs are supported:
         *     <ul>
         *         <li><code>&lt;sha&gt;</code> - a Semantic Scholar ID, e.g. <code>649def34f8be52c8b66281af98ae884c09aef38b</code></li>
         *         <li><code>CorpusId:&lt;id&gt;</code> - a Semantic Scholar numerical ID, e.g. <code>CorpusId:215416146</code></li>
         *         <li><code>DOI:&lt;doi&gt;</code> - a <a href="http://doi.org">Digital Object Identifier</a>,
         *             e.g. <code>DOI:10.18653/v1/N18-3011</code></li>
         *         <li><code>ARXIV:&lt;id&gt;</code> - <a href="https://arxiv.org/">arXiv.rg</a>, e.g. <code>ARXIV:2106.15928</code></li>
         *         <li><code>MAG:&lt;id&gt;</code> - Microsoft Academic Graph, e.g. <code>MAG:112218234</code></li>
         *         <li><code>ACL:&lt;id&gt;</code> - Association for Computational Linguistics, e.g. <code>ACL:W12-3903</code></li>
         *         <li><code>PMID:&lt;id&gt;</code> - PubMed/Medline, e.g. <code>PMID:19872477</code></li>
         *         <li><code>PMCID:&lt;id&gt;</code> - PubMed Central, e.g. <code>PMCID:2323736</code></li>
         *         <li><code>URL:&lt;url&gt;</code> - URL from one of the sites listed below, e.g. <code>URL:https://arxiv.org/abs/2106.15928v1</code></li>
         *     </ul>
         *
         *     URLs are recognized from the following sites:
         *     <ul>
         *         <li><a href="https://www.semanticscholar.org/">semanticscholar.org</a></li>
         *         <li><a href="https://arxiv.org/">arxiv.org</a></li>
         *         <li><a href="https://www.aclweb.org">aclweb.org</a></li>
         *         <li><a href="https://www.acm.org/">acm.org</a></li>
         *         <li><a href="https://www.biorxiv.org/">biorxiv.org</a></li>
         *     </ul>
         */
        paper_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description List of Authors with default or requested fields */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AuthorBatch']
        }
      }
      /** @description Bad query parameters */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error400']
        }
      }
      /** @description Bad paper id */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error404']
        }
      }
    }
  }
  get_graph_get_paper_citations: {
    parameters: {
      query?: {
        /** @description Used for pagination. When returning a list of results, start with the element at this position in the list. */
        offset?: number
        /**
         * @description The maximum number of results to return.<br>
         *     Must be <= 1000
         */
        limit?: number
        /**
         * @description A comma-separated list of the fields to be returned. See the contents of the <code>data</code> array in Response Schema below for a list of all available fields that can be returned.
         *     If the fields parameter is omitted, only the <code>paperId</code> and <code>title</code> will be returned.
         *     <p>Request fields nested within <code>citedPaper</code> the same way as fields like <code>contexts</code>.<br><br>
         *     Examples:
         *     <ul>
         *         <li><code>fields=contexts,isInfluential</code></li>
         *         <li><code>fields=contexts,title,authors</code></li>
         *     </ul>
         */
        fields?: string
      }
      header?: never
      path: {
        /**
         * @description The following types of IDs are supported:
         *     <ul>
         *         <li><code>&lt;sha&gt;</code> - a Semantic Scholar ID, e.g. <code>649def34f8be52c8b66281af98ae884c09aef38b</code></li>
         *         <li><code>CorpusId:&lt;id&gt;</code> - a Semantic Scholar numerical ID, e.g. <code>CorpusId:215416146</code></li>
         *         <li><code>DOI:&lt;doi&gt;</code> - a <a href="http://doi.org">Digital Object Identifier</a>,
         *             e.g. <code>DOI:10.18653/v1/N18-3011</code></li>
         *         <li><code>ARXIV:&lt;id&gt;</code> - <a href="https://arxiv.org/">arXiv.rg</a>, e.g. <code>ARXIV:2106.15928</code></li>
         *         <li><code>MAG:&lt;id&gt;</code> - Microsoft Academic Graph, e.g. <code>MAG:112218234</code></li>
         *         <li><code>ACL:&lt;id&gt;</code> - Association for Computational Linguistics, e.g. <code>ACL:W12-3903</code></li>
         *         <li><code>PMID:&lt;id&gt;</code> - PubMed/Medline, e.g. <code>PMID:19872477</code></li>
         *         <li><code>PMCID:&lt;id&gt;</code> - PubMed Central, e.g. <code>PMCID:2323736</code></li>
         *         <li><code>URL:&lt;url&gt;</code> - URL from one of the sites listed below, e.g. <code>URL:https://arxiv.org/abs/2106.15928v1</code></li>
         *     </ul>
         *
         *     URLs are recognized from the following sites:
         *     <ul>
         *         <li><a href="https://www.semanticscholar.org/">semanticscholar.org</a></li>
         *         <li><a href="https://arxiv.org/">arxiv.org</a></li>
         *         <li><a href="https://www.aclweb.org">aclweb.org</a></li>
         *         <li><a href="https://www.acm.org/">acm.org</a></li>
         *         <li><a href="https://www.biorxiv.org/">biorxiv.org</a></li>
         *     </ul>
         */
        paper_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Batch of citations with default or requested fields */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CitationBatch']
        }
      }
      /** @description Bad query parameters */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error400']
        }
      }
      /** @description Bad paper id */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error404']
        }
      }
    }
  }
  get_graph_get_paper_references: {
    parameters: {
      query?: {
        /** @description Used for pagination. When returning a list of results, start with the element at this position in the list. */
        offset?: number
        /**
         * @description The maximum number of results to return.<br>
         *     Must be <= 1000
         */
        limit?: number
        /**
         * @description A comma-separated list of the fields to be returned. See the contents of the <code>data</code> array in Response Schema below for a list of all available fields that can be returned.
         *     If the fields parameter is omitted, only the <code>paperId</code> and <code>title</code> will be returned.
         *     <p>Request fields nested within <code>citedPaper</code> the same way as fields like <code>contexts</code>.<br><br>
         *     Examples:
         *     <ul>
         *         <li><code>fields=contexts,isInfluential</code></li>
         *         <li><code>fields=contexts,title,authors</code></li>
         *     </ul>
         */
        fields?: string
      }
      header?: never
      path: {
        /**
         * @description The following types of IDs are supported:
         *     <ul>
         *         <li><code>&lt;sha&gt;</code> - a Semantic Scholar ID, e.g. <code>649def34f8be52c8b66281af98ae884c09aef38b</code></li>
         *         <li><code>CorpusId:&lt;id&gt;</code> - a Semantic Scholar numerical ID, e.g. <code>CorpusId:215416146</code></li>
         *         <li><code>DOI:&lt;doi&gt;</code> - a <a href="http://doi.org">Digital Object Identifier</a>,
         *             e.g. <code>DOI:10.18653/v1/N18-3011</code></li>
         *         <li><code>ARXIV:&lt;id&gt;</code> - <a href="https://arxiv.org/">arXiv.rg</a>, e.g. <code>ARXIV:2106.15928</code></li>
         *         <li><code>MAG:&lt;id&gt;</code> - Microsoft Academic Graph, e.g. <code>MAG:112218234</code></li>
         *         <li><code>ACL:&lt;id&gt;</code> - Association for Computational Linguistics, e.g. <code>ACL:W12-3903</code></li>
         *         <li><code>PMID:&lt;id&gt;</code> - PubMed/Medline, e.g. <code>PMID:19872477</code></li>
         *         <li><code>PMCID:&lt;id&gt;</code> - PubMed Central, e.g. <code>PMCID:2323736</code></li>
         *         <li><code>URL:&lt;url&gt;</code> - URL from one of the sites listed below, e.g. <code>URL:https://arxiv.org/abs/2106.15928v1</code></li>
         *     </ul>
         *
         *     URLs are recognized from the following sites:
         *     <ul>
         *         <li><a href="https://www.semanticscholar.org/">semanticscholar.org</a></li>
         *         <li><a href="https://arxiv.org/">arxiv.org</a></li>
         *         <li><a href="https://www.aclweb.org">aclweb.org</a></li>
         *         <li><a href="https://www.acm.org/">acm.org</a></li>
         *         <li><a href="https://www.biorxiv.org/">biorxiv.org</a></li>
         *     </ul>
         */
        paper_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Batch of references with default or requested fields */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ReferenceBatch']
        }
      }
      /** @description Bad query parameters */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error400']
        }
      }
      /** @description Bad paper id */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error404']
        }
      }
    }
  }
  get_snippet_search: {
    parameters: {
      query: {
        /**
         * @description A comma-separated list of the fields to be returned with each snippet element.
         *
         *     Paper info and the score are currently always returned. What you can specify using this <code>fields</code> param is which fields under the 'snippet' section (see the response schema) will be returned.
         *
         *     Examples:
         *     <ul>
         *         <li><code>fields=snippet.text</code>: you'll get just the <code>text</code> field in the snippet section</li>
         *         <li><code>fields=snippet.text,snippet.snippetKind</code>: you'll get just the <code>text</code> and <code>snippetKind</code> fields in the snippet section</li>
         *         <li><code>fields=snippet.annotations.sentences</code>: you'll get just the sentence annotations in the snippet section</li>
         *     </ul>
         *
         *     In general, you can use periods to identify nested fields (as in the examples above).
         *
         *     Not all fields in the response schema can be identified using this <code>fields</code> param though.
         *     E.g. you can't pick what you get within <code>snippet.snippetOffset</code> - you can either get the snippet offset with all the possible snippet offset fields, or you can not get it at all.
         *     You also can't provide <code>paper</code> or <code>score</code> or anything under <code>paper</code>, since those are always provided.
         *
         *     If you attempt to identify a field that's not supported, you'll get an error with the relevant field name. E.g.
         *
         *     <code>Unrecognized or unsupported fields: [paper]</code>
         *
         *     If you don't specify the fields param, you'll get a default set of fields in the snippet section. These are the default fields:
         *     - <code>snippet.text</code>
         *     - <code>snippet.snippetKind</code>
         *     - <code>snippet.section</code>
         *     - <code>snippet.snippetOffset</code> (including nested <code>start</code> and <code>end</code>)
         *     - <code>snippet.annotations.refMentions</code> (including nested <code>start</code>, <code>end</code>, and <code>matchedPaperCorpusId</code> for each element)
         *     - <code>snippet.annotations.sentences</code> (including nested <code>start</code> and <code>end</code> for each element)
         */
        fields?: string
        /**
         * @description Restricts results to snippets from specific papers. To specify papers, provide a comma-separated list of their IDs. You can provide up to approximately 100 IDs.
         *
         *     The following types of IDs are supported:
         *     <ul>
         *         <li><code>&lt;sha&gt;</code> - a Semantic Scholar ID, e.g. <code>649def34f8be52c8b66281af98ae884c09aef38b</code></li>
         *         <li><code>CorpusId:&lt;id&gt;</code> - a Semantic Scholar numerical ID, e.g. <code>CorpusId:215416146</code></li>
         *         <li><code>DOI:&lt;doi&gt;</code> - a <a href="http://doi.org">Digital Object Identifier</a>,
         *             e.g. <code>DOI:10.18653/v1/N18-3011</code></li>
         *         <li><code>ARXIV:&lt;id&gt;</code> - <a href="https://arxiv.org/">arXiv.rg</a>, e.g. <code>ARXIV:2106.15928</code></li>
         *         <li><code>MAG:&lt;id&gt;</code> - Microsoft Academic Graph, e.g. <code>MAG:112218234</code></li>
         *         <li><code>ACL:&lt;id&gt;</code> - Association for Computational Linguistics, e.g. <code>ACL:W12-3903</code></li>
         *         <li><code>PMID:&lt;id&gt;</code> - PubMed/Medline, e.g. <code>PMID:19872477</code></li>
         *         <li><code>PMCID:&lt;id&gt;</code> - PubMed Central, e.g. <code>PMCID:2323736</code></li>
         *         <li><code>URL:&lt;url&gt;</code> - URL from one of the sites listed below, e.g. <code>URL:https://arxiv.org/abs/2106.15928v1</code></li>
         *     </ul>
         *
         *     URLs are recognized from the following sites:
         *     <ul>
         *         <li><a href="https://www.semanticscholar.org/">semanticscholar.org</a></li>
         *         <li><a href="https://arxiv.org/">arxiv.org</a></li>
         *         <li><a href="https://www.aclweb.org">aclweb.org</a></li>
         *         <li><a href="https://www.acm.org/">acm.org</a></li>
         *         <li><a href="https://www.biorxiv.org/">biorxiv.org</a></li>
         *     </ul>
         */
        paperIds?: string
        /**
         * @description Restricts results to only include papers with the minimum number of citations.
         *     <br>
         *     <br>
         *     Example:
         *     <code>minCitationCount=200</code>
         */
        minCitationCount?: string
        /**
         * @description Restricts results to snippets from papers inserted into the index before the provided date (excludes things inserted on the provided date).
         *
         *     Acceptable formats: YYYY-MM-DD, YYYY-MM, YYYY
         */
        insertedBefore?: string
        /**
         * @description Restricts results to the given range of publication dates or years (inclusive). Accepts the format <code>&lt;startDate&gt;:&lt;endDate&gt;</code> with each date in <code>YYYY-MM-DD</code> format.
         *     <br>
         *     <br>
         *     Each term is optional, allowing for specific dates, fixed ranges, or open-ended ranges. In addition, prefixes are suported as a shorthand, e.g. <code>2020-06</code> matches all dates in June 2020.
         *     <br>
         *     <br>
         *     Specific dates are not known for all papers, so some records returned with this filter will have a <code>null</code> value for </code>publicationDate</code>. <code>year</code>, however, will always be present.
         *     For records where a specific publication date is not known, they will be treated as if published on January 1st of their publication year.
         *     <br>
         *     <br>
         *     Examples:
         *     <ul>
         *         <li><code>2019-03-05</code> on March 3rd, 2019</li>
         *         <li><code>2019-03</code> during March 2019</li>
         *         <li><code>2019</code> during 2019</li>
         *         <li><code>2016-03-05:2020-06-06</code> as early as March 5th, 2016 or as late as June 6th, 2020</li>
         *         <li><code>1981-08-25:</code> on or after August 25th, 1981</li>
         *         <li><code>:2015-01</code> before or on January 31st, 2015</li>
         *         <li><code>2015:2020</code> between January 1st, 2015 and December 31st, 2020</li>
         *     </ul>
         */
        publicationDateOrYear?: string
        /**
         * @description Restricts results to the given publication year or range of years (inclusive).
         *     <br>
         *     <br>
         *     Examples:
         *     <ul>
         *         <li><code>2019</code> in 2019</li>
         *         <li><code>2016-2020</code> as early as 2016 or as late as 2020</li>
         *         <li><code>2010-</code> during or after 2010</li>
         *         <li><code>-2015</code> before or during 2015</li>
         *     </ul>
         */
        year?: string
        /**
         * @description Restricts results to papers published in the given venues, formatted as a comma-separated list. <br><br>
         *     Input could also be an ISO4 abbreviation.
         *     Examples include:
         *     <ul>
         *         <li>Nature</li>
         *         <li>New England Journal of Medicine</li>
         *         <li>Radiology</li>
         *         <li>N. Engl. J. Med.</li>
         *     </ul>
         *
         *     Example: <code>Nature,Radiology</code> will return papers from venues Nature and/or Radiology.
         */
        venue?: string
        /**
         * @description Restricts results to papers in the given fields of study, formatted as a comma-separated list:
         *     <ul>
         *     <li>Computer Science</li>
         *     <li>Medicine</li>
         *     <li>Chemistry</li>
         *     <li>Biology</li>
         *     <li>Materials Science</li>
         *     <li>Physics</li>
         *     <li>Geology</li>
         *     <li>Psychology</li>
         *     <li>Art</li>
         *     <li>History</li>
         *     <li>Geography</li>
         *     <li>Sociology</li>
         *     <li>Business</li>
         *     <li>Political Science</li>
         *     <li>Economics</li>
         *     <li>Philosophy</li>
         *     <li>Mathematics</li>
         *     <li>Engineering</li>
         *     <li>Environmental Science</li>
         *     <li>Agricultural and Food Sciences</li>
         *     <li>Education</li>
         *     <li>Law</li>
         *     <li>Linguistics</li>
         *     </ul>
         *
         *     Example: <code>Physics,Mathematics</code> will return papers with either Physics or Mathematics in their list of fields-of-study.
         */
        fieldsOfStudy?: string
        /**
         * @description A plain-text search query string.
         *     No special query syntax is supported.
         */
        query: string
        /**
         * @description The maximum number of results to return.<br>
         *     Must be <= 1000
         */
        limit?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Best snippet match with default fields */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SnippetMatch']
        }
      }
      /** @description Bad query parameters */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error400']
        }
      }
    }
  }
}
