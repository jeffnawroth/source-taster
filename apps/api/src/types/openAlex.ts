/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/authors/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get Author
     * @description Get a single author by id
     */
    get: operations['getAuthor']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/authors/random': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get Random Author
     * @description Get a random author
     */
    get: operations['getRandomAuthor']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/authors': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List Authors
     * @description Get lists of authors
     */
    get: operations['getAuthors']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/autocomplete': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** /autocomplete */
    get: operations['getAutocomplete']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/autocomplete/authors': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** /autocomplete/authors */
    get: operations['getAutocompleteAuthors']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/autocomplete/concepts': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** /autocomplete/concepts */
    get: operations['getAutocompleteConcepts']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/autocomplete/funders': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** /autocomplete/funders */
    get: operations['getAutocompleteFunders']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/autocomplete/institutions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** /autocomplete/institutions */
    get: operations['getAutocompleteInstitutions']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/autocomplete/publishers': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** /autocomplete/publishers */
    get: operations['getAutocompletePublishers']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/autocomplete/sources': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** /autocomplete/sources */
    get: operations['getAutocompleteSources']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/autocomplete/works': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** /autocomplete/works */
    get: operations['getAutocompleteWorks']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/concepts/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * /concepts/{id}
     * @description Get a single concept
     */
    get: operations['getConceptById']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/concepts/random': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * /concepts/random
     * @description Get a random concept
     */
    get: operations['getRandomConcept']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/concepts': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** /concepts */
    get: operations['getConcepts']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/funders': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** /funders */
    get: operations['getFunders']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/funders/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** /funders/{id} */
    get: operations['getFunder']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/funders/random': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * /funders/random
     * @description Get a random funder
     */
    get: operations['getRandomFunder']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/institutions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** /institutions */
    get: operations['getInstitutions']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/institutions/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** /institutions/{id} */
    get: operations['getInstitution']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/institutions/random': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * /institutions/random
     * @description Get a random institution
     */
    get: operations['getRandomInstitution']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/people/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** /people/{id} */
    get: operations['getPerson']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/publishers': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** /publishers */
    get: operations['getPublishers']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/publishers/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** /publishers/{id} */
    get: operations['getPublisher']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/publishers/random': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * /publishers/random
     * @description Get a random publisher
     */
    get: operations['getRandomPublisher']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Root
     * @description Root endpoint
     */
    get: operations['getRoot']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sources': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** /sources */
    get: operations['getSources']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sources/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** /sources/{id} */
    get: operations['getSource']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sources/random': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * /sources/random
     * @description Get a random source
     */
    get: operations['getRandomSource']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/works/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * /works/{id}
     * @description Get a single work by its id
     */
    get: operations['getWork']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/works/{id}/ngrams': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** /works/{id}/ngrams */
    get: operations['getWorkNgrams']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/works/random': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * /works/random
     * @description Get a random work
     */
    get: operations['getRandomWork']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/works': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** /works */
    get: operations['getWorks']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domains/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** /domains/{id} */
    get: operations['getDomainById']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/field/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** /fields/{id} */
    get: operations['getFieldById']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/subfields/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** /subfields/{id} */
    get: operations['getSubfieldById']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/topics/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** /topics/{id} */
    get: operations['getTopicById']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/topics': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** /topics */
    get: operations['getTopics']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    mailToSchema: string
    errorMessage: {
      error: string
      message: string
    }
    resp4xxResponseSchema: string
    dehydratedInstitution: {
      country_code?: string
      display_name?: string
      id?: string
      lineage?: string[]
      ror?: string
      type?: string
    }
    dehydratedConcept: {
      display_name: string
      id: string
      level?: number
      score?: number
      wikidata?: string
    }
    affiliations: {
      institution: components['schemas']['dehydratedInstitution']
      years: number[]
    }[]
    countsByYear: {
      cited_by_count: number
      works_count?: number
      year: number
    }[]
    ids: {
      crossref?: string
      doi?: string
      /**
       * @example {
       *       "value": "https://fatcat.wiki/container/wixiueunq5e6xk7dx5ygzzysjy"
       *     }
       */
      fatcat?: string
      grid?: string
      issn?: string[]
      issn_l?: string
      mag?: string
      openalex: string
      orcid?: string
      pmcid?: string
      pmid?: string
      ror?: string
      scopus?: string
      wikidata?: string
      wikipedia?: string
    }
    dehydratedInstitutionArray: components['schemas']['dehydratedInstitution'][]
    summary_stats: {
      '2yr_mean_citedness': number
      'h_index': number
      'i10_index': number
    }
    dehydratedConceptArray: components['schemas']['dehydratedConcept'][]
    author: {
      affiliations?: components['schemas']['affiliations']
      cited_by_count?: number
      counts_by_year?: components['schemas']['countsByYear']
      created_date?: string
      display_name: string
      display_name_alternatives?: string[]
      id: string
      ids?: components['schemas']['ids']
      last_known_institution?: components['schemas']['dehydratedInstitution']
      last_known_institutions?: components['schemas']['dehydratedInstitutionArray']
      orcid?: string
      summary_stats?: components['schemas']['summary_stats']
      updated_date?: string
      works_api_url?: string
      works_count?: number
      x_concepts?: components['schemas']['dehydratedConceptArray']
    }
    group_by_result: {
      count: number
      key: string
      key_display_name: string
    }[]
    meta: {
      count: number
      db_response_time_ms: number
      page: number
      per_page: number
      groups_count: string
    }
    authors: {
      group_by: components['schemas']['group_by_result']
      meta: components['schemas']['meta']
      results?: components['schemas']['author'][]
    }
    autoCompleteResultItem: {
      cited_by_count: number
      display_name: string
      entity_type: string
      external_id: string
      filter_key: string
      hint: string
      id: string
      works_count: number
    }
    autoCompleteResultSchema: {
      meta: components['schemas']['meta']
      results: components['schemas']['autoCompleteResultItem'][]
    }
    conceptIdPattern: string
    internationalisation: {
      'ab'?: string
      'ace'?: string
      'af'?: string
      'ak'?: string
      'alt'?: string
      'am'?: string
      'an'?: string
      'ang'?: string
      'ar'?: string
      'ary'?: string
      'arz'?: string
      'as'?: string
      'ast'?: string
      'atj'?: string
      'ay'?: string
      'az'?: string
      'azb'?: string
      'ba'?: string
      'ban'?: string
      'bar'?: string
      'bcl'?: string
      'be'?: string
      'be-tarask'?: string
      'bg'?: string
      'bho'?: string
      'bn'?: string
      'br'?: string
      'bs'?: string
      'ca'?: string
      'cbk-zam'?: string
      'cdo'?: string
      'ceb'?: string
      'ckb'?: string
      'co'?: string
      'crh'?: string
      'crh-latn'?: string
      'cs'?: string
      'csb'?: string
      'cv'?: string
      'cy'?: string
      'da'?: string
      'de'?: string
      'de-at'?: string
      'de-ch'?: string
      'diq'?: string
      'dv'?: string
      'el'?: string
      'eml'?: string
      'en': string
      'en-ca'?: string
      'en-gb'?: string
      'en-us'?: string
      'eo'?: string
      'es'?: string
      'et'?: string
      'eu'?: string
      'ext'?: string
      'fa'?: string
      'fi'?: string
      'fo'?: string
      'fr'?: string
      'frc'?: string
      'frp'?: string
      'frr'?: string
      'fur'?: string
      'fy'?: string
      'ga'?: string
      'gan'?: string
      'gan-hans'?: string
      'gan-hant'?: string
      'gd'?: string
      'gl'?: string
      'gn'?: string
      'gpe'?: string
      'gsw'?: string
      'gu'?: string
      'gv'?: string
      'ha'?: string
      'hak'?: string
      'he'?: string
      'hi'?: string
      'hr'?: string
      'hsb'?: string
      'ht'?: string
      'hu'?: string
      'hy'?: string
      'hyw'?: string
      'ia'?: string
      'id'?: string
      'ie'?: string
      'ig'?: string
      'ilo'?: string
      'io'?: string
      'is'?: string
      'it'?: string
      'ja'?: string
      'jv'?: string
      'ka'?: string
      'kaa'?: string
      'kab'?: string
      'kbp'?: string
      'kg'?: string
      'kk'?: string
      'kk-arab'?: string
      'kk-cn'?: string
      'kk-cyrl'?: string
      'kk-kz'?: string
      'kk-latn'?: string
      'kk-tr'?: string
      'kl'?: string
      'km'?: string
      'kn'?: string
      'ko'?: string
      'ko-kp'?: string
      'krc'?: string
      'ks'?: string
      'ksh'?: string
      'ku'?: string
      'ku-latn'?: string
      'kw'?: string
      'ky'?: string
      'la'?: string
      'lad'?: string
      'lb'?: string
      'lfn'?: string
      'li'?: string
      'lij'?: string
      'lld'?: string
      'lmo'?: string
      'lo'?: string
      'lt'?: string
      'lv'?: string
      'lzh'?: string
      'mai'?: string
      'mg'?: string
      'min'?: string
      'mk'?: string
      'ml'?: string
      'mn'?: string
      'mr'?: string
      'ms'?: string
      'ms-arab'?: string
      'mt'?: string
      'mwl'?: string
      'my'?: string
      'mzn'?: string
      'nah'?: string
      'nan'?: string
      'nap'?: string
      'nb'?: string
      'nds'?: string
      'nds-nl'?: string
      'ne'?: string
      'new'?: string
      'nia'?: string
      'nl'?: string
      'nn'?: string
      'nqo'?: string
      'nrm'?: string
      'oc'?: string
      'or'?: string
      'os'?: string
      'pa'?: string
      'pam'?: string
      'pap'?: string
      'pcd'?: string
      'pdc'?: string
      'pl'?: string
      'pms'?: string
      'pnb'?: string
      'ps'?: string
      'pt'?: string
      'pt-br'?: string
      'qu'?: string
      'rm'?: string
      'ro'?: string
      'ru'?: string
      'rue'?: string
      'rw'?: string
      'sa'?: string
      'sah'?: string
      'sat'?: string
      'sc'?: string
      'scn'?: string
      'sco'?: string
      'sd'?: string
      'se'?: string
      'sgs'?: string
      'sh'?: string
      'si'?: string
      'sk'?: string
      'sl'?: string
      'smn'?: string
      'sms'?: string
      'so'?: string
      'sq'?: string
      'sr'?: string
      'sr-ec'?: string
      'sr-el'?: string
      'stq'?: string
      'su'?: string
      'sv'?: string
      'sw'?: string
      'syl'?: string
      'szl'?: string
      'ta'?: string
      'te'?: string
      'tg'?: string
      'tg-latn'?: string
      'th'?: string
      'tk'?: string
      'tl'?: string
      'tr'?: string
      'tt'?: string
      'tt-cyrl'?: string
      'tw'?: string
      'ug'?: string
      'uk'?: string
      'ur'?: string
      'uz'?: string
      'vec'?: string
      'vi'?: string
      'vls'?: string
      'vo'?: string
      'wa'?: string
      'war'?: string
      'wo'?: string
      'wuu'?: string
      'xmf'?: string
      'yi'?: string
      'yo'?: string
      'yue'?: string
      'za'?: string
      'zh'?: string
      'zh-cn'?: string
      'zh-hans'?: string
      'zh-hant'?: string
      'zh-hk'?: string
      'zh-mo'?: string
      'zh-my'?: string
      'zh-sg'?: string
      'zh-tw'?: string
      'zu'?: string
      'aeb-arab'?: string
      'arc'?: string
      'bi'?: string
      'bm'?: string
      'bo'?: string
      'bpy'?: string
      'bxr'?: string
      'ce'?: string
      'chr'?: string
      'gcr'?: string
      'hif'?: string
      'inh'?: string
      'iu'?: string
      'jam'?: string
      'mni'?: string
      'nov'?: string
      'pih'?: string
      'shi'?: string
      'ti'?: string
      'ts'?: string
      'vro'?: string
    }
    international_description: {
      description?: components['schemas']['internationalisation']
    }
    international_display_name: {
      display_name?: components['schemas']['internationalisation']
    }
    international_display_name_and_description: {
      description?: components['schemas']['international_description']
      display_name?: components['schemas']['international_display_name']
    }
    concept: {
      ancestors?: components['schemas']['dehydratedConceptArray']
      cited_by_count?: number
      counts_by_year?: components['schemas']['countsByYear']
      created_date?: string
      description?: string
      display_name: string
      id: string
      ids?: {
        mag?: string
        openalex: string
        umls_cui?: string[]
        wikidata?: string
        wikipedia?: string
      }
      image_thumbnail_url?: string
      image_url?: string
      international?: components['schemas']['international_display_name_and_description']
      level?: number
      related_concepts?: components['schemas']['dehydratedConceptArray']
      summary_stats?: components['schemas']['summary_stats']
      updated_date?: string
      wikidata?: string
      works_api_url?: string
      works_count?: number
    }
    conceptArray: components['schemas']['concept'][]
    concepts: {
      group_by?: components['schemas']['group_by_result']
      meta?: components['schemas']['meta']
      results?: components['schemas']['conceptArray']
    }
    role: {
      id: string
      role: string
      works_count: number
    }
    roles: components['schemas']['role'][]
    funder: {
      alternate_titles: string[]
      cited_by_count?: number
      country_code?: string
      counts_by_year?: components['schemas']['countsByYear']
      created_date?: string
      description?: string
      display_name: string
      grants_count?: number
      homepage_url?: string
      id: string
      ids?: components['schemas']['ids']
      image_thumbnail_url?: string
      image_url?: string
      relevance_score?: number
      roles?: components['schemas']['roles']
      summary_stats?: components['schemas']['summary_stats']
      updated_date?: string
      works_count?: number
    }
    funderSchema: {
      alternate_titles: string[]
      cited_by_count?: number
      country_code?: string
      counts_by_year?: components['schemas']['countsByYear']
      created_date?: string
      description?: string
      display_name: string
      grants_count?: number
      homepage_url?: string
      id: string
      ids?: components['schemas']['ids']
      image_thumbnail_url?: string
      image_url?: string
      relevance_score?: number
      roles?: components['schemas']['roles']
      summary_stats?: components['schemas']['summary_stats']
      updated_date?: string
      works_count?: number
    }
    fundersArray: {
      group_by: components['schemas']['group_by_result']
      meta: components['schemas']['meta']
      results?: components['schemas']['funderSchema'][]
    }
    associatedInstitution: {
      relationship?: string
    } & {
      [key: string]: components['schemas']['dehydratedInstitution']
    }
    associatedInstitutionArray: components['schemas']['associatedInstitution'][]
    geo: {
      city: string
      country: string
      country_code: string
      geonames_city_id: string
      latitude: number
      longitude: number
      region: string
    }
    repositoriesArray: {
      display_name: string
      host_organization: string
      host_organization_lineage: string[]
      host_organization_name: string
      id: string
    }[]
    institution: {
      associated_institutions?: components['schemas']['associatedInstitutionArray']
      cited_by_count?: number
      country_code?: string
      counts_by_year?: components['schemas']['countsByYear']
      created_date?: string
      display_name: string
      display_name_acronyms?: string[]
      display_name_alternatives?: string[]
      geo?: components['schemas']['geo']
      homepage_url?: string
      id: string
      ids?: components['schemas']['ids']
      image_thumbnail_url?: string
      image_url?: string
      international?: components['schemas']['international_display_name']
      lineage?: string[]
      repositories?: components['schemas']['repositoriesArray']
      roles?: components['schemas']['roles']
      ror?: string
      summary_stats?: components['schemas']['summary_stats']
      type?: string
      updated_date?: string
      works_api_url?: string
      works_count?: number
      x_concepts?: components['schemas']['dehydratedConceptArray']
    }
    institutionSchema: {
      associated_institutions?: components['schemas']['associatedInstitutionArray']
      cited_by_count?: number
      country_code?: string
      counts_by_year?: components['schemas']['countsByYear']
      created_date?: string
      display_name: string
      display_name_acronyms?: string[]
      display_name_alternatives?: string[]
      geo?: components['schemas']['geo']
      homepage_url?: string
      id: string
      ids?: components['schemas']['ids']
      image_thumbnail_url?: string
      image_url?: string
      international?: components['schemas']['international_display_name']
      lineage?: string[]
      repositories?: components['schemas']['repositoriesArray']
      roles?: components['schemas']['roles']
      ror?: string
      summary_stats?: components['schemas']['summary_stats']
      type?: string
      updated_date?: string
      works_api_url?: string
      works_count?: number
      x_concepts?: components['schemas']['dehydratedConceptArray']
    }
    institutionArray: components['schemas']['institutionSchema'][]
    institutions: {
      group_by: components['schemas']['group_by_result']
      meta: components['schemas']['meta']
      results?: components['schemas']['institutionArray']
    }
    person: {
      display_name: string
      id: string
      orcid: string
    }
    publisher: {
      alternate_titles?: string[]
      cited_by_count?: number
      country_codes?: string[]
      counts_by_year?: components['schemas']['countsByYear']
      created_date?: string
      display_name: string
      hierarchy_level?: number
      homepage_url?: string
      id: string
      ids?: components['schemas']['ids']
      image_thumbnail_url?: string
      image_url?: string
      lineage?: string[]
      parent_publisher?: {
        display_name?: string
        id?: string
      }
      roles?: components['schemas']['roles']
      sources_api_url?: string
      summary_stats?: components['schemas']['summary_stats']
      updated_date?: string
      works_count?: number
    }
    publisherSchema: {
      alternate_titles?: string[]
      cited_by_count?: number
      country_codes?: string[]
      counts_by_year?: components['schemas']['countsByYear']
      created_date?: string
      display_name: string
      hierarchy_level?: number
      homepage_url?: string
      id: string
      ids?: components['schemas']['ids']
      image_thumbnail_url?: string
      image_url?: string
      lineage?: string[]
      parent_publisher?: {
        display_name?: string
        id?: string
      }
      roles?: components['schemas']['roles']
      sources_api_url?: string
      summary_stats?: components['schemas']['summary_stats']
      updated_date?: string
      works_count?: number
    }
    publishers: {
      group_by: components['schemas']['group_by_result']
      meta: components['schemas']['meta']
      results: components['schemas']['publisherSchema'][]
    }
    rootResponseSchema: {
      documentation_url: string
      msg: string
      version: string
    }
    apc_prices: {
      currency: string
      price: number
    }[]
    source: {
      abbreviated_title?: string
      alternate_titles?: string[]
      apc_prices?: components['schemas']['apc_prices']
      apc_usd?: number
      cited_by_count?: number
      country_code?: string
      counts_by_year?: components['schemas']['countsByYear']
      created_date?: string
      display_name: string
      homepage_url?: string
      host_organization?: string
      host_organization_lineage?: string[]
      host_organization_name?: string
      id: string
      ids?: components['schemas']['ids']
      is_in_doaj?: boolean
      is_oa?: boolean
      issn?: string[]
      issn_l?: string
      societies?: {
        url?: string
        organization?: string
      }[]
      summary_stats?: components['schemas']['summary_stats']
      type?: string
      updated_date?: string
      works_api_url?: string
      works_count?: number
      x_concepts?: components['schemas']['dehydratedConceptArray']
    }
    sourceSchema: {
      abbreviated_title?: string
      alternate_titles?: string[]
      apc_prices?: components['schemas']['apc_prices']
      apc_usd?: number
      cited_by_count?: number
      country_code?: string
      counts_by_year?: components['schemas']['countsByYear']
      created_date?: string
      display_name: string
      homepage_url?: string
      host_organization?: string
      host_organization_lineage?: string[]
      host_organization_name?: string
      id: string
      ids?: components['schemas']['ids']
      is_in_doaj?: boolean
      is_oa?: boolean
      issn?: string[]
      issn_l?: string
      societies?: {
        url?: string
        organization?: string
      }[]
      summary_stats?: components['schemas']['summary_stats']
      type?: string
      updated_date?: string
      works_api_url?: string
      works_count?: number
      x_concepts?: components['schemas']['dehydratedConceptArray']
    }
    sources: {
      group_by?: components['schemas']['group_by_result']
      meta?: components['schemas']['meta']
      results?: components['schemas']['sourceSchema'][]
    }
    topicLevelSchema: {
      id: string | number
      display_name: string
    }
    topicLevelArraySchema: {
      siblings?: components['schemas']['topicLevelSchema'][]
    }
    domain: {
      cited_by_count: number
      created_date: string
      description: string
      display_name: string
      display_name_alternatives: string[]
      fields: components['schemas']['topicLevelArraySchema']
      id: string
      ids: components['schemas']['ids']
      siblings: components['schemas']['topicLevelArraySchema']
      updated_date: string
      works_api_url: string
      works_count: number
    }
    field: {
      cited_by_count: number
      created_date: string
      description: string
      display_name: string
      display_name_alternatives: string[]
      domain: components['schemas']['topicLevelSchema']
      id: string
      ids: components['schemas']['ids']
      siblings: components['schemas']['topicLevelArraySchema']
      subfields: components['schemas']['topicLevelArraySchema']
      updated_date: string
      works_api_url: string
      works_count: number
    }
    subfield: {
      cited_by_count: number
      created_date: string
      description: string
      display_name: string
      display_name_alternatives: string[]
      domain: components['schemas']['topicLevelSchema']
      field: components['schemas']['topicLevelSchema']
      id: string
      ids: components['schemas']['ids']
      siblings: components['schemas']['topicLevelArraySchema']
      topics: {
        display_name: string
        id: string
      }[]
      updated_date: string
      works_api_url: string
      works_count: number
    }
    topic: {
      cited_by_count: number
      created_date: string
      description: string
      display_name: string
      domain: components['schemas']['topicLevelArraySchema']
      field: components['schemas']['topicLevelArraySchema']
      id: string
      ids: components['schemas']['ids']
      keywords: string[]
      siblings: components['schemas']['topicLevelSchema']
      subfield: components['schemas']['topicLevelArraySchema']
      updated_date: string
      works_count: number
    }
    topics: {
      group_by: {
        count: number
        key: string
        key_display_name: string
      }[]
      meta: {
        count: number
        db_response_time_ms: number
        groups_count: number
        page: number
        per_page: number
      }
      results?: {
        cited_by_count?: number
        created_date?: string
        description: string
        display_name: string
        domain?: components['schemas']['topicLevelSchema']
        field?: components['schemas']['topicLevelSchema']
        id: string
        ids?: components['schemas']['ids']
        keywords?: string[]
        relevance_score?: number
        siblings?: components['schemas']['topicLevelArraySchema']
        subfield?: components['schemas']['topicLevelSchema']
        updated_date?: string
        works_count?: number
      }[]
    }
    /** @enum {string} */
    workAttributes: 'abstract_inverted_index' | 'apc_list' | 'apc_paid' | 'authorships' | 'best_oa_location' | 'biblio' | 'cited_by_api_url' | 'cited_by_count' | 'cited_by_percentile_year' | 'concepts' | 'corresponding_author_ids' | 'corresponding_institution_ids' | 'countries_distinct_count' | 'counts_by_year' | 'created_date' | 'doi' | 'fulltext_origin' | 'grants' | 'has_fulltext' | 'ids' | 'institutions_distinct_count' | 'is_authors_truncated' | 'is_paratext' | 'is_retracted' | 'keywords' | 'language' | 'locations_count' | 'locations' | 'mesh' | 'ngrams_url' | 'open_access' | 'primary_location' | 'publication_date' | 'publication_year' | 'referenced_works_count' | 'referenced_works' | 'related_works' | 'relevance_score' | 'sustainable_development_goals' | 'title' | 'type_crossref' | 'type' | 'updated_date'
    /** @enum {string} */
    baseSelectionAttributes: 'id' | 'display_name'
    workIdPattern: string
    apc: {
      value: number
      currency: string
      value_usd: number
      provenance: string
    }
    authorships: {
      author: {
        id: string
        display_name: string
        orcid?: string
      }
      author_position: string
      countries: string[]
      institutions: {
        id: string
        display_name: string
        ror: string
        country_code: string
        type: string
        lineage: string[]
      }[]
      is_corresponding: boolean
      raw_affiliation_string?: string
      raw_affiliation_strings: string[]
      raw_author_name: string
    }[]
    location: {
      is_accepted?: boolean
      is_oa?: boolean
      is_published?: boolean
      landing_page_url?: string
      license?: string
      pdf_url?: string
      source?: {
        id?: string
        display_name?: string
        issn_l?: string
        issn?: string[]
        is_oa?: boolean
        is_in_doaj?: boolean
        host_organization?: string
        host_organization_name?: string
        host_organization_lineage?: string[]
        host_organization_lineage_names?: string[]
        type?: string
      }
      version?: string
    }
    work: {
      abstract_inverted_index?: Record<string, never>
      apc_list?: components['schemas']['apc']
      apc_paid?: components['schemas']['apc']
      authorships?: components['schemas']['authorships']
      best_oa_location?: components['schemas']['location']
      biblio?: {
        volume?: string
        issue?: string
        first_page?: string
        last_page?: string
      }
      cited_by_api_url?: string
      cited_by_count?: number
      cited_by_percentile_year?: {
        min: number
        max: number
      }
      concepts?: components['schemas']['dehydratedConceptArray']
      corresponding_author_ids?: string[]
      corresponding_institution_ids?: string[]
      countries_distinct_count?: number
      counts_by_year?: components['schemas']['countsByYear']
      created_date?: string
      display_name: string
      doi?: string
      grants?: {
        funder: string
        funder_display_name: string
        award_id: string
      }[]
      has_fulltext?: boolean
      id: string
      ids?: components['schemas']['ids']
      institutions_distinct_count?: number
      is_paratext?: boolean
      is_retracted?: boolean
      keywords?: {
        /** Format: url */
        id: string
        display_name: string
        score: number
      }[]
      language?: string
      locations?: components['schemas']['location'][]
      locations_count?: number
      mesh?: {
        descriptor_ui: string
        descriptor_name: string
        qualifier_ui: string
        qualifier_name: string
        is_major_topic: boolean
      }[]
      ngrams_url?: string
      open_access?: {
        is_oa: boolean
        oa_status: string
        oa_url: string
        any_repository_has_fulltext: boolean
      }
      primary_location?: components['schemas']['location']
      publication_date?: string
      publication_year?: number
      referenced_works?: string[]
      referenced_works_count?: number
      related_works?: string[]
      sustainable_development_goals?: {
        id: string
        display_name: string
        score: number
      }[]
      title?: string
      type?: string
      type_crossref?: string
      updated_date?: string
    }
    ngramMeta: {
      count: number
      doi?: string
      openalex_id: string
    }
    ngram: {
      ngram: string
      ngram_count: number
      ngram_tokens: number
      term_frequency: number
    }[]
    ngrams: {
      meta?: components['schemas']['ngramMeta']
      ngrams?: components['schemas']['ngram']
    }
    filterWorksSchema: string
    workSchema: {
      abstract_inverted_index?: Record<string, never>
      apc_list?: components['schemas']['apc']
      apc_paid?: components['schemas']['apc']
      authorships?: components['schemas']['authorships']
      best_oa_location?: components['schemas']['location']
      biblio?: {
        volume?: string
        issue?: string
        first_page?: string
        last_page?: string
      }
      cited_by_api_url?: string
      cited_by_count?: number
      cited_by_percentile_year?: {
        min: number
        max: number
      }
      concepts?: components['schemas']['dehydratedConceptArray']
      corresponding_author_ids?: string[]
      corresponding_institution_ids?: string[]
      countries_distinct_count?: number
      counts_by_year?: components['schemas']['countsByYear']
      created_date?: string
      display_name: string
      doi?: string
      grants?: {
        funder: string
        funder_display_name: string
        award_id: string
      }[]
      has_fulltext?: boolean
      id: string
      ids?: components['schemas']['ids']
      institutions_distinct_count?: number
      is_paratext?: boolean
      is_retracted?: boolean
      keywords?: {
        /** Format: url */
        id: string
        display_name: string
        score: number
      }[]
      language?: string
      locations?: components['schemas']['location'][]
      locations_count?: number
      mesh?: {
        descriptor_ui: string
        descriptor_name: string
        qualifier_ui: string
        qualifier_name: string
        is_major_topic: boolean
      }[]
      ngrams_url?: string
      open_access?: {
        is_oa: boolean
        oa_status: string
        oa_url: string
        any_repository_has_fulltext: boolean
      }
      primary_location?: components['schemas']['location']
      publication_date?: string
      publication_year?: number
      referenced_works?: string[]
      referenced_works_count?: number
      related_works?: string[]
      sustainable_development_goals?: {
        id: string
        display_name: string
        score: number
      }[]
      title?: string
      type?: string
      type_crossref?: string
      updated_date?: string
    }
    worksArray: components['schemas']['workSchema'][]
    worksResponse: {
      meta: components['schemas']['meta']
      results: components['schemas']['worksArray']
      group_by?: components['schemas']['group_by_result']
    }
  }
  responses: {
    /** @description Single Author Response */
    authorGet200: {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['author']
      }
    }
    /** @description Authors List Response */
    authorsGet200: {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['authors']
      }
    }
    /** @description Successful response */
    autocompleteGet200Response: {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['autoCompleteResultSchema']
      }
    }
    /** @description Concept */
    concept: {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['concept']
      }
    }
    /** @description Concepts List */
    concepts: {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['concepts']
      }
    }
    funder: {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['funder']
      }
    }
    funders: {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['fundersArray']
      }
    }
    institution: {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['institution']
      }
    }
    institutions: {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['institutions']
      }
    }
    person: {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['person']
      }
    }
    publisher: {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['publisher']
      }
    }
    publishers: {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['publishers']
      }
    }
    root200GetResponses: {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['rootResponseSchema']
      }
    }
    source: {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['source']
      }
    }
    sources: {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['sources']
      }
    }
    domain: {
      headers: {
        'Nel': components['headers']['Nel']
        'Reporting-Endpoints': components['headers']['Reporting-Endpoints']
        'X-Api-Pool': components['headers']['X-Api-Pool']
        'X-Content-Type-Options': components['headers']['X-Content-Type-Options']
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['domain']
      }
    }
    field: {
      headers: {
        'Nel': components['headers']['Nel']
        'Reporting-Endpoints': components['headers']['Reporting-Endpoints']
        'X-Api-Pool': components['headers']['X-Api-Pool']
        'X-Content-Type-Options': components['headers']['X-Content-Type-Options']
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['field']
      }
    }
    subfield: {
      headers: {
        'Nel': components['headers']['Nel']
        'Reporting-Endpoints': components['headers']['Reporting-Endpoints']
        'X-Api-Pool': components['headers']['X-Api-Pool']
        'X-Content-Type-Options': components['headers']['X-Content-Type-Options']
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['subfield']
      }
    }
    topic: {
      headers: {
        'Nel': components['headers']['Nel']
        'Reporting-Endpoints': components['headers']['Reporting-Endpoints']
        'X-Api-Pool': components['headers']['X-Api-Pool']
        'X-Content-Type-Options': components['headers']['X-Content-Type-Options']
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['topic']
      }
    }
    topics: {
      headers: {
        'Nel': components['headers']['Nel']
        'Reporting-Endpoints': components['headers']['Reporting-Endpoints']
        'X-Api-Pool': components['headers']['X-Api-Pool']
        'X-Content-Type-Options': components['headers']['X-Content-Type-Options']
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['topics']
      }
    }
    work: {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['work']
      }
    }
    workNgramsGet200Response: {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['ngrams']
      }
    }
    works: {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['worksResponse']
      }
    }
    resp403: {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['errorMessage']
      }
    }
    resp4xx: {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['resp4xxResponseSchema']
      }
    }
  }
  parameters: {
    /** @description [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool) */
    mailtoHeader: components['schemas']['mailToSchema']
    /**
     * @description The API is the primary way to get OpenAlex data. It's free and requires no authentication.
     *     The daily limit for API calls is 100,000 requests per user per day.
     *     For best performance, add your email to all API requests
     *     The email can be either in the query string, like `mailto:example@domain.com`, or in the User-Agent request header, like `User-Agent: my-app (mailto:example@domain.com)`.
     *     Read more about the polite pool at [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool).
     */
    mailtoQuery: components['schemas']['mailToSchema']
    authorIdParam: string
    select: string
    api_key: string
    cursor: string
    filter: string
    group_by_param: string
    /** @example 1 */
    page_param: number
    /** @example 3 */
    per_page: number
    sample: number
    search: string
    seed: unknown
    sort: string
    autocompleteQuery: string
    conceptIdParam: components['schemas']['conceptIdPattern']
    idParam: string
    /**
     * @description The id of the work to retrieve
     * @example W3033546757
     */
    workId: components['schemas']['workIdPattern']
    workAttributeSelectionParameter: (string & (components['schemas']['workAttributes'] & components['schemas']['baseSelectionAttributes']))[]
    /**
     * @description Filter works by a specific field.
     *     See the [filter works](https://docs.openalex.org/api-entities/works/filter-works) documentation for more information.
     *     Valid filters are:
     *
     *
     *     - `abstract.search`
     *     - `apc_list.currency`
     *     - `apc_list.provenance`
     *     - `apc_list.value`
     *     - `apc_list.value_usd`
     *     - `apc_paid.currency`
     *     - `apc_paid.provenance`
     *     - `apc_paid.value`
     *     - `apc_paid.value_usd`
     *     - `author.id`
     *     - `author.orcid`
     *     - `authors_count`
     *     - `authorships.author.id`
     *     - `authorships.author.orcid`
     *     - `authorships.countries`
     *     - `authorships.institutions.continent`
     *     - `authorships.institutions.country_code`
     *     - `authorships.institutions.id`
     *     - `authorships.institutions.is_global_south`
     *     - `authorships.institutions.lineage`
     *     - `authorships.institutions.ror`
     *     - `authorships.institutions.type`
     *     - `authorships.is_corresponding`
     *     - `best_oa_location.is_accepted`
     *     - `best_oa_location.is_oa`
     *     - `best_oa_location.is_published`
     *     - `best_oa_location.landing_page_url`
     *     - `best_oa_location.license`
     *     - `best_oa_location.source.host_organization`
     *     - `best_oa_location.source.host_organization_lineage`
     *     - `best_oa_location.source.id`
     *     - `best_oa_location.source.is_in_doaj`
     *     - `best_oa_location.source.is_oa`
     *     - `best_oa_location.source.issn`
     *     - `best_oa_location.source.type`
     *     - `best_oa_location.version`
     *     - `best_open_version`
     *     - `cited_by`
     *     - `cited_by_count`
     *     - `cited_by_percentile_year.max`
     *     - `cited_by_percentile_year.min`
     *     - `cites`
     *     - `concept.id`
     *     - `concepts.id`
     *     - `concepts.wikidata`
     *     - `concepts_count`
     *     - `corresponding_author_ids`
     *     - `corresponding_institution_ids`
     *     - `countries_distinct_count`
     *     - `default.search`
     *     - `display_name`
     *     - `display_name.search`
     *     - `doi`
     *     - `doi_starts_with`
     *     - `from_created_date`
     *     - `from_publication_date`
     *     - `fulltext.search`
     *     - `fulltext_origin`
     *     - `grants.award_id`
     *     - `grants.funder`
     *     - `has_abstract`
     *     - `has_doi`
     *     - `has_fulltext`
     *     - `has_ngrams`
     *     - `has_oa_accepted_or_published_version`
     *     - `has_oa_submitted_version`
     *     - `has_old_authors`
     *     - `has_orcid`
     *     - `has_pdf_url`
     *     - `has_pmcid`
     *     - `has_pmid`
     *     - `has_raw_affiliation_string`
     *     - `has_references`
     *     - `host_venue.id`
     *     - `ids.mag`
     *     - `ids.openalex`
     *     - `ids.pmcid`
     *     - `ids.pmid`
     *     - `institution.id`
     *     - `institutions.continent`
     *     - `institutions.country_code`
     *     - `institutions.id`
     *     - `institutions.is_global_south`
     *     - `institutions.ror`
     *     - `institutions.type`
     *     - `institutions_distinct_count`
     *     - `is_corresponding`
     *     - `is_oa`
     *     - `is_paratext`
     *     - `is_retracted`
     *     - `journal`
     *     - `keyword.search`
     *     - `keywords.keyword`
     *     - `language`
     *     - `locations.is_accepted`
     *     - `locations.is_oa`
     *     - `locations.is_published`
     *     - `locations.landing_page_url`
     *     - `locations.license`
     *     - `locations.source.has_issn`
     *     - `locations.source.host_institution_lineage`
     *     - `locations.source.host_organization`
     *     - `locations.source.host_organization_lineage`
     *     - `locations.source.id`
     *     - `locations.source.is_in_doaj`
     *     - `locations.source.is_oa`
     *     - `locations.source.issn`
     *     - `locations.source.publisher_lineage`
     *     - `locations.source.type`
     *     - `locations.version`
     *     - `locations_count`
     *     - `mag`
     *     - `oa_status`
     *     - `open_access.any_repository_has_fulltext`
     *     - `open_access.is_oa`
     *     - `open_access.oa_status`
     *     - `openalex`
     *     - `openalex_id`
     *     - `pmcid`
     *     - `pmid`
     *     - `primary_location.is_accepted`
     *     - `primary_location.is_oa`
     *     - `primary_location.is_published`
     *     - `primary_location.landing_page_url`
     *     - `primary_location.license`
     *     - `primary_location.source.has_issn`
     *     - `primary_location.source.host_institution_lineage`
     *     - `primary_location.source.host_organization`
     *     - `primary_location.source.host_organization_lineage`
     *     - `primary_location.source.id`
     *     - `primary_location.source.is_in_doaj`
     *     - `primary_location.source.is_oa`
     *     - `primary_location.source.issn`
     *     - `primary_location.source.publisher_lineage`
     *     - `primary_location.source.type`
     *     - `primary_location.version`
     *     - `publication_date`
     *     - `publication_year`
     *     - `raw_affiliation_string.search`
     *     - `referenced_works`
     *     - `referenced_works_count`
     *     - `related_to`
     *     - `repository`
     *     - `sustainable_development_goals.id`
     *     - `sustainable_development_goals.score`
     *     - `title.search`
     *     - `title_and_abstract.search`
     *     - `to_publication_date`
     *     - `to_updated_date`
     *     - `type`
     *     - `type_crossref`
     *     - `version`
     * @example abstract.search:
     */
    filterWorks: components['schemas']['filterWorksSchema']
  }
  requestBodies: never
  headers: {
    'Reporting-Endpoints': string
    'X-Api-Pool': string
    'X-Content-Type-Options': string
    'Nel': string
  }
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  getAuthor: {
    parameters: {
      query?: {
        select?: components['parameters']['select']
        /**
         * @description The API is the primary way to get OpenAlex data. It's free and requires no authentication.
         *     The daily limit for API calls is 100,000 requests per user per day.
         *     For best performance, add your email to all API requests
         *     The email can be either in the query string, like `mailto:example@domain.com`, or in the User-Agent request header, like `User-Agent: my-app (mailto:example@domain.com)`.
         *     Read more about the polite pool at [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool).
         */
        mailto?: components['parameters']['mailtoQuery']
      }
      header?: {
        /** @description [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool) */
        'User-Agent'?: components['parameters']['mailtoHeader']
      }
      path: {
        id: components['parameters']['authorIdParam']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['authorGet200']
      403: components['responses']['resp403']
      default: components['responses']['resp4xx']
    }
  }
  getRandomAuthor: {
    parameters: {
      query?: {
        select?: components['parameters']['select']
        /**
         * @description The API is the primary way to get OpenAlex data. It's free and requires no authentication.
         *     The daily limit for API calls is 100,000 requests per user per day.
         *     For best performance, add your email to all API requests
         *     The email can be either in the query string, like `mailto:example@domain.com`, or in the User-Agent request header, like `User-Agent: my-app (mailto:example@domain.com)`.
         *     Read more about the polite pool at [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool).
         */
        mailto?: components['parameters']['mailtoQuery']
      }
      header?: {
        /** @description [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool) */
        'User-Agent'?: components['parameters']['mailtoHeader']
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['authorGet200']
      403: components['responses']['resp403']
      default: components['responses']['resp4xx']
    }
  }
  getAuthors: {
    parameters: {
      query?: {
        api_key?: components['parameters']['api_key']
        cursor?: components['parameters']['cursor']
        filter?: components['parameters']['filter']
        group_by?: components['parameters']['group_by_param']
        /** @example 1 */
        page?: components['parameters']['page_param']
        /** @example 3 */
        per_page?: components['parameters']['per_page']
        sample?: components['parameters']['sample']
        search?: components['parameters']['search']
        seed?: components['parameters']['seed']
        select?: components['parameters']['select']
        sort?: components['parameters']['sort']
        /**
         * @description The API is the primary way to get OpenAlex data. It's free and requires no authentication.
         *     The daily limit for API calls is 100,000 requests per user per day.
         *     For best performance, add your email to all API requests
         *     The email can be either in the query string, like `mailto:example@domain.com`, or in the User-Agent request header, like `User-Agent: my-app (mailto:example@domain.com)`.
         *     Read more about the polite pool at [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool).
         */
        mailto?: components['parameters']['mailtoQuery']
      }
      header?: {
        /** @description [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool) */
        'User-Agent'?: components['parameters']['mailtoHeader']
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['authorsGet200']
      403: components['responses']['resp403']
      default: components['responses']['resp4xx']
    }
  }
  getAutocomplete: {
    parameters: {
      query?: {
        q?: components['parameters']['autocompleteQuery']
        /**
         * @description The API is the primary way to get OpenAlex data. It's free and requires no authentication.
         *     The daily limit for API calls is 100,000 requests per user per day.
         *     For best performance, add your email to all API requests
         *     The email can be either in the query string, like `mailto:example@domain.com`, or in the User-Agent request header, like `User-Agent: my-app (mailto:example@domain.com)`.
         *     Read more about the polite pool at [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool).
         */
        mailto?: components['parameters']['mailtoQuery']
      }
      header?: {
        /** @description [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool) */
        'User-Agent'?: components['parameters']['mailtoHeader']
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['autocompleteGet200Response']
      403: components['responses']['resp403']
      default: components['responses']['resp4xx']
    }
  }
  getAutocompleteAuthors: {
    parameters: {
      query?: {
        q?: components['parameters']['autocompleteQuery']
        /**
         * @description The API is the primary way to get OpenAlex data. It's free and requires no authentication.
         *     The daily limit for API calls is 100,000 requests per user per day.
         *     For best performance, add your email to all API requests
         *     The email can be either in the query string, like `mailto:example@domain.com`, or in the User-Agent request header, like `User-Agent: my-app (mailto:example@domain.com)`.
         *     Read more about the polite pool at [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool).
         */
        mailto?: components['parameters']['mailtoQuery']
      }
      header?: {
        /** @description [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool) */
        'User-Agent'?: components['parameters']['mailtoHeader']
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['autocompleteGet200Response']
      403: components['responses']['resp403']
      default: components['responses']['resp4xx']
    }
  }
  getAutocompleteConcepts: {
    parameters: {
      query?: {
        q?: components['parameters']['autocompleteQuery']
        /**
         * @description The API is the primary way to get OpenAlex data. It's free and requires no authentication.
         *     The daily limit for API calls is 100,000 requests per user per day.
         *     For best performance, add your email to all API requests
         *     The email can be either in the query string, like `mailto:example@domain.com`, or in the User-Agent request header, like `User-Agent: my-app (mailto:example@domain.com)`.
         *     Read more about the polite pool at [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool).
         */
        mailto?: components['parameters']['mailtoQuery']
      }
      header?: {
        /** @description [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool) */
        'User-Agent'?: components['parameters']['mailtoHeader']
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['autocompleteGet200Response']
      403: components['responses']['resp403']
      default: components['responses']['resp4xx']
    }
  }
  getAutocompleteFunders: {
    parameters: {
      query?: {
        q?: components['parameters']['autocompleteQuery']
        /**
         * @description The API is the primary way to get OpenAlex data. It's free and requires no authentication.
         *     The daily limit for API calls is 100,000 requests per user per day.
         *     For best performance, add your email to all API requests
         *     The email can be either in the query string, like `mailto:example@domain.com`, or in the User-Agent request header, like `User-Agent: my-app (mailto:example@domain.com)`.
         *     Read more about the polite pool at [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool).
         */
        mailto?: components['parameters']['mailtoQuery']
      }
      header?: {
        /** @description [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool) */
        'User-Agent'?: components['parameters']['mailtoHeader']
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['autocompleteGet200Response']
      403: components['responses']['resp403']
      default: components['responses']['resp4xx']
    }
  }
  getAutocompleteInstitutions: {
    parameters: {
      query?: {
        q?: components['parameters']['autocompleteQuery']
        /**
         * @description The API is the primary way to get OpenAlex data. It's free and requires no authentication.
         *     The daily limit for API calls is 100,000 requests per user per day.
         *     For best performance, add your email to all API requests
         *     The email can be either in the query string, like `mailto:example@domain.com`, or in the User-Agent request header, like `User-Agent: my-app (mailto:example@domain.com)`.
         *     Read more about the polite pool at [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool).
         */
        mailto?: components['parameters']['mailtoQuery']
      }
      header?: {
        /** @description [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool) */
        'User-Agent'?: components['parameters']['mailtoHeader']
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['autocompleteGet200Response']
      403: components['responses']['resp403']
      default: components['responses']['resp4xx']
    }
  }
  getAutocompletePublishers: {
    parameters: {
      query?: {
        q?: components['parameters']['autocompleteQuery']
        /**
         * @description The API is the primary way to get OpenAlex data. It's free and requires no authentication.
         *     The daily limit for API calls is 100,000 requests per user per day.
         *     For best performance, add your email to all API requests
         *     The email can be either in the query string, like `mailto:example@domain.com`, or in the User-Agent request header, like `User-Agent: my-app (mailto:example@domain.com)`.
         *     Read more about the polite pool at [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool).
         */
        mailto?: components['parameters']['mailtoQuery']
      }
      header?: {
        /** @description [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool) */
        'User-Agent'?: components['parameters']['mailtoHeader']
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['autocompleteGet200Response']
      403: components['responses']['resp403']
      default: components['responses']['resp4xx']
    }
  }
  getAutocompleteSources: {
    parameters: {
      query?: {
        q?: components['parameters']['autocompleteQuery']
        /**
         * @description The API is the primary way to get OpenAlex data. It's free and requires no authentication.
         *     The daily limit for API calls is 100,000 requests per user per day.
         *     For best performance, add your email to all API requests
         *     The email can be either in the query string, like `mailto:example@domain.com`, or in the User-Agent request header, like `User-Agent: my-app (mailto:example@domain.com)`.
         *     Read more about the polite pool at [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool).
         */
        mailto?: components['parameters']['mailtoQuery']
      }
      header?: {
        /** @description [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool) */
        'User-Agent'?: components['parameters']['mailtoHeader']
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['autocompleteGet200Response']
      403: components['responses']['resp403']
      default: components['responses']['resp4xx']
    }
  }
  getAutocompleteWorks: {
    parameters: {
      query?: {
        filter?: components['parameters']['filter']
        search?: components['parameters']['search']
        q?: components['parameters']['autocompleteQuery']
        /**
         * @description The API is the primary way to get OpenAlex data. It's free and requires no authentication.
         *     The daily limit for API calls is 100,000 requests per user per day.
         *     For best performance, add your email to all API requests
         *     The email can be either in the query string, like `mailto:example@domain.com`, or in the User-Agent request header, like `User-Agent: my-app (mailto:example@domain.com)`.
         *     Read more about the polite pool at [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool).
         */
        mailto?: components['parameters']['mailtoQuery']
      }
      header?: {
        /** @description [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool) */
        'User-Agent'?: components['parameters']['mailtoHeader']
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['autocompleteGet200Response']
      403: components['responses']['resp403']
      default: components['responses']['resp4xx']
    }
  }
  getConceptById: {
    parameters: {
      query?: {
        select?: components['parameters']['select']
        /**
         * @description The API is the primary way to get OpenAlex data. It's free and requires no authentication.
         *     The daily limit for API calls is 100,000 requests per user per day.
         *     For best performance, add your email to all API requests
         *     The email can be either in the query string, like `mailto:example@domain.com`, or in the User-Agent request header, like `User-Agent: my-app (mailto:example@domain.com)`.
         *     Read more about the polite pool at [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool).
         */
        mailto?: components['parameters']['mailtoQuery']
      }
      header?: {
        /** @description [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool) */
        'User-Agent'?: components['parameters']['mailtoHeader']
      }
      path: {
        id: components['parameters']['conceptIdParam']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['concept']
      403: components['responses']['resp403']
      default: components['responses']['resp4xx']
    }
  }
  getRandomConcept: {
    parameters: {
      query?: {
        select?: components['parameters']['select']
        /**
         * @description The API is the primary way to get OpenAlex data. It's free and requires no authentication.
         *     The daily limit for API calls is 100,000 requests per user per day.
         *     For best performance, add your email to all API requests
         *     The email can be either in the query string, like `mailto:example@domain.com`, or in the User-Agent request header, like `User-Agent: my-app (mailto:example@domain.com)`.
         *     Read more about the polite pool at [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool).
         */
        mailto?: components['parameters']['mailtoQuery']
      }
      header?: {
        /** @description [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool) */
        'User-Agent'?: components['parameters']['mailtoHeader']
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['concept']
      403: components['responses']['resp403']
      default: components['responses']['resp4xx']
    }
  }
  getConcepts: {
    parameters: {
      query?: {
        api_key?: components['parameters']['api_key']
        cursor?: components['parameters']['cursor']
        filter?: components['parameters']['filter']
        group_by?: components['parameters']['group_by_param']
        /** @example 1 */
        page?: components['parameters']['page_param']
        /** @example 3 */
        per_page?: components['parameters']['per_page']
        sample?: components['parameters']['sample']
        search?: components['parameters']['search']
        seed?: components['parameters']['seed']
        select?: components['parameters']['select']
        sort?: components['parameters']['sort']
        /**
         * @description The API is the primary way to get OpenAlex data. It's free and requires no authentication.
         *     The daily limit for API calls is 100,000 requests per user per day.
         *     For best performance, add your email to all API requests
         *     The email can be either in the query string, like `mailto:example@domain.com`, or in the User-Agent request header, like `User-Agent: my-app (mailto:example@domain.com)`.
         *     Read more about the polite pool at [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool).
         */
        mailto?: components['parameters']['mailtoQuery']
      }
      header?: {
        /** @description [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool) */
        'User-Agent'?: components['parameters']['mailtoHeader']
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['concepts']
      403: components['responses']['resp403']
      default: components['responses']['resp4xx']
    }
  }
  getFunders: {
    parameters: {
      query?: {
        api_key?: components['parameters']['api_key']
        cursor?: components['parameters']['cursor']
        filter?: components['parameters']['filter']
        group_by?: components['parameters']['group_by_param']
        /** @example 1 */
        page?: components['parameters']['page_param']
        /** @example 3 */
        per_page?: components['parameters']['per_page']
        sample?: components['parameters']['sample']
        search?: components['parameters']['search']
        seed?: components['parameters']['seed']
        select?: components['parameters']['select']
        sort?: components['parameters']['sort']
        /**
         * @description The API is the primary way to get OpenAlex data. It's free and requires no authentication.
         *     The daily limit for API calls is 100,000 requests per user per day.
         *     For best performance, add your email to all API requests
         *     The email can be either in the query string, like `mailto:example@domain.com`, or in the User-Agent request header, like `User-Agent: my-app (mailto:example@domain.com)`.
         *     Read more about the polite pool at [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool).
         */
        mailto?: components['parameters']['mailtoQuery']
      }
      header?: {
        /** @description [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool) */
        'User-Agent'?: components['parameters']['mailtoHeader']
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['funders']
      403: components['responses']['resp403']
      default: components['responses']['resp4xx']
    }
  }
  getFunder: {
    parameters: {
      query?: {
        select?: components['parameters']['select']
        /**
         * @description The API is the primary way to get OpenAlex data. It's free and requires no authentication.
         *     The daily limit for API calls is 100,000 requests per user per day.
         *     For best performance, add your email to all API requests
         *     The email can be either in the query string, like `mailto:example@domain.com`, or in the User-Agent request header, like `User-Agent: my-app (mailto:example@domain.com)`.
         *     Read more about the polite pool at [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool).
         */
        mailto?: components['parameters']['mailtoQuery']
      }
      header?: {
        /** @description [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool) */
        'User-Agent'?: components['parameters']['mailtoHeader']
      }
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['funder']
      403: components['responses']['resp403']
      default: components['responses']['resp4xx']
    }
  }
  getRandomFunder: {
    parameters: {
      query?: {
        select?: components['parameters']['select']
        /**
         * @description The API is the primary way to get OpenAlex data. It's free and requires no authentication.
         *     The daily limit for API calls is 100,000 requests per user per day.
         *     For best performance, add your email to all API requests
         *     The email can be either in the query string, like `mailto:example@domain.com`, or in the User-Agent request header, like `User-Agent: my-app (mailto:example@domain.com)`.
         *     Read more about the polite pool at [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool).
         */
        mailto?: components['parameters']['mailtoQuery']
      }
      header?: {
        /** @description [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool) */
        'User-Agent'?: components['parameters']['mailtoHeader']
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['funder']
      403: components['responses']['resp403']
      default: components['responses']['resp4xx']
    }
  }
  getInstitutions: {
    parameters: {
      query?: {
        api_key?: components['parameters']['api_key']
        cursor?: components['parameters']['cursor']
        filter?: components['parameters']['filter']
        group_by?: components['parameters']['group_by_param']
        /** @example 1 */
        page?: components['parameters']['page_param']
        /** @example 3 */
        per_page?: components['parameters']['per_page']
        sample?: components['parameters']['sample']
        search?: components['parameters']['search']
        seed?: components['parameters']['seed']
        select?: components['parameters']['select']
        sort?: components['parameters']['sort']
        /**
         * @description The API is the primary way to get OpenAlex data. It's free and requires no authentication.
         *     The daily limit for API calls is 100,000 requests per user per day.
         *     For best performance, add your email to all API requests
         *     The email can be either in the query string, like `mailto:example@domain.com`, or in the User-Agent request header, like `User-Agent: my-app (mailto:example@domain.com)`.
         *     Read more about the polite pool at [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool).
         */
        mailto?: components['parameters']['mailtoQuery']
      }
      header?: {
        /** @description [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool) */
        'User-Agent'?: components['parameters']['mailtoHeader']
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['institutions']
      403: components['responses']['resp403']
      default: components['responses']['resp4xx']
    }
  }
  getInstitution: {
    parameters: {
      query?: {
        select?: components['parameters']['select']
        /**
         * @description The API is the primary way to get OpenAlex data. It's free and requires no authentication.
         *     The daily limit for API calls is 100,000 requests per user per day.
         *     For best performance, add your email to all API requests
         *     The email can be either in the query string, like `mailto:example@domain.com`, or in the User-Agent request header, like `User-Agent: my-app (mailto:example@domain.com)`.
         *     Read more about the polite pool at [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool).
         */
        mailto?: components['parameters']['mailtoQuery']
      }
      header?: {
        /** @description [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool) */
        'User-Agent'?: components['parameters']['mailtoHeader']
      }
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['institution']
      403: components['responses']['resp403']
      default: components['responses']['resp4xx']
    }
  }
  getRandomInstitution: {
    parameters: {
      query?: {
        select?: components['parameters']['select']
        /**
         * @description The API is the primary way to get OpenAlex data. It's free and requires no authentication.
         *     The daily limit for API calls is 100,000 requests per user per day.
         *     For best performance, add your email to all API requests
         *     The email can be either in the query string, like `mailto:example@domain.com`, or in the User-Agent request header, like `User-Agent: my-app (mailto:example@domain.com)`.
         *     Read more about the polite pool at [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool).
         */
        mailto?: components['parameters']['mailtoQuery']
      }
      header?: {
        /** @description [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool) */
        'User-Agent'?: components['parameters']['mailtoHeader']
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['institution']
      403: components['responses']['resp403']
      default: components['responses']['resp4xx']
    }
  }
  getPerson: {
    parameters: {
      query?: {
        select?: components['parameters']['select']
        /**
         * @description The API is the primary way to get OpenAlex data. It's free and requires no authentication.
         *     The daily limit for API calls is 100,000 requests per user per day.
         *     For best performance, add your email to all API requests
         *     The email can be either in the query string, like `mailto:example@domain.com`, or in the User-Agent request header, like `User-Agent: my-app (mailto:example@domain.com)`.
         *     Read more about the polite pool at [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool).
         */
        mailto?: components['parameters']['mailtoQuery']
      }
      header?: {
        /** @description [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool) */
        'User-Agent'?: components['parameters']['mailtoHeader']
      }
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['person']
      403: components['responses']['resp403']
      default: components['responses']['resp4xx']
    }
  }
  getPublishers: {
    parameters: {
      query?: {
        api_key?: components['parameters']['api_key']
        cursor?: components['parameters']['cursor']
        filter?: components['parameters']['filter']
        group_by?: components['parameters']['group_by_param']
        /** @example 1 */
        page?: components['parameters']['page_param']
        /** @example 3 */
        per_page?: components['parameters']['per_page']
        sample?: components['parameters']['sample']
        search?: components['parameters']['search']
        seed?: components['parameters']['seed']
        select?: components['parameters']['select']
        sort?: components['parameters']['sort']
        /**
         * @description The API is the primary way to get OpenAlex data. It's free and requires no authentication.
         *     The daily limit for API calls is 100,000 requests per user per day.
         *     For best performance, add your email to all API requests
         *     The email can be either in the query string, like `mailto:example@domain.com`, or in the User-Agent request header, like `User-Agent: my-app (mailto:example@domain.com)`.
         *     Read more about the polite pool at [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool).
         */
        mailto?: components['parameters']['mailtoQuery']
      }
      header?: {
        /** @description [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool) */
        'User-Agent'?: components['parameters']['mailtoHeader']
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['publishers']
      403: components['responses']['resp403']
      default: components['responses']['resp4xx']
    }
  }
  getPublisher: {
    parameters: {
      query?: {
        select?: components['parameters']['select']
        /**
         * @description The API is the primary way to get OpenAlex data. It's free and requires no authentication.
         *     The daily limit for API calls is 100,000 requests per user per day.
         *     For best performance, add your email to all API requests
         *     The email can be either in the query string, like `mailto:example@domain.com`, or in the User-Agent request header, like `User-Agent: my-app (mailto:example@domain.com)`.
         *     Read more about the polite pool at [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool).
         */
        mailto?: components['parameters']['mailtoQuery']
      }
      header?: {
        /** @description [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool) */
        'User-Agent'?: components['parameters']['mailtoHeader']
      }
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['publisher']
      403: components['responses']['resp403']
      default: components['responses']['resp4xx']
    }
  }
  getRandomPublisher: {
    parameters: {
      query?: {
        select?: components['parameters']['select']
        /**
         * @description The API is the primary way to get OpenAlex data. It's free and requires no authentication.
         *     The daily limit for API calls is 100,000 requests per user per day.
         *     For best performance, add your email to all API requests
         *     The email can be either in the query string, like `mailto:example@domain.com`, or in the User-Agent request header, like `User-Agent: my-app (mailto:example@domain.com)`.
         *     Read more about the polite pool at [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool).
         */
        mailto?: components['parameters']['mailtoQuery']
      }
      header?: {
        /** @description [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool) */
        'User-Agent'?: components['parameters']['mailtoHeader']
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['publisher']
      403: components['responses']['resp403']
      default: components['responses']['resp4xx']
    }
  }
  getRoot: {
    parameters: {
      query?: {
        /**
         * @description The API is the primary way to get OpenAlex data. It's free and requires no authentication.
         *     The daily limit for API calls is 100,000 requests per user per day.
         *     For best performance, add your email to all API requests
         *     The email can be either in the query string, like `mailto:example@domain.com`, or in the User-Agent request header, like `User-Agent: my-app (mailto:example@domain.com)`.
         *     Read more about the polite pool at [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool).
         */
        mailto?: components['parameters']['mailtoQuery']
      }
      header?: {
        /** @description [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool) */
        'User-Agent'?: components['parameters']['mailtoHeader']
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['root200GetResponses']
      403: components['responses']['resp403']
      default: components['responses']['resp4xx']
    }
  }
  getSources: {
    parameters: {
      query?: {
        group_by?: string
        /**
         * @description The API is the primary way to get OpenAlex data. It's free and requires no authentication.
         *     The daily limit for API calls is 100,000 requests per user per day.
         *     For best performance, add your email to all API requests
         *     The email can be either in the query string, like `mailto:example@domain.com`, or in the User-Agent request header, like `User-Agent: my-app (mailto:example@domain.com)`.
         *     Read more about the polite pool at [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool).
         */
        mailto?: components['parameters']['mailtoQuery']
      }
      header?: {
        /** @description [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool) */
        'User-Agent'?: components['parameters']['mailtoHeader']
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['sources']
      403: components['responses']['resp403']
      default: components['responses']['resp4xx']
    }
  }
  getSource: {
    parameters: {
      query?: {
        select?: components['parameters']['select']
        /**
         * @description The API is the primary way to get OpenAlex data. It's free and requires no authentication.
         *     The daily limit for API calls is 100,000 requests per user per day.
         *     For best performance, add your email to all API requests
         *     The email can be either in the query string, like `mailto:example@domain.com`, or in the User-Agent request header, like `User-Agent: my-app (mailto:example@domain.com)`.
         *     Read more about the polite pool at [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool).
         */
        mailto?: components['parameters']['mailtoQuery']
      }
      header?: {
        /** @description [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool) */
        'User-Agent'?: components['parameters']['mailtoHeader']
      }
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['source']
      403: components['responses']['resp403']
      default: components['responses']['resp4xx']
    }
  }
  getRandomSource: {
    parameters: {
      query?: {
        select?: components['parameters']['select']
        /**
         * @description The API is the primary way to get OpenAlex data. It's free and requires no authentication.
         *     The daily limit for API calls is 100,000 requests per user per day.
         *     For best performance, add your email to all API requests
         *     The email can be either in the query string, like `mailto:example@domain.com`, or in the User-Agent request header, like `User-Agent: my-app (mailto:example@domain.com)`.
         *     Read more about the polite pool at [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool).
         */
        mailto?: components['parameters']['mailtoQuery']
      }
      header?: {
        /** @description [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool) */
        'User-Agent'?: components['parameters']['mailtoHeader']
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['source']
      403: components['responses']['resp403']
      default: components['responses']['resp4xx']
    }
  }
  getWork: {
    parameters: {
      query?: {
        select?: components['parameters']['workAttributeSelectionParameter']
        /**
         * @description The API is the primary way to get OpenAlex data. It's free and requires no authentication.
         *     The daily limit for API calls is 100,000 requests per user per day.
         *     For best performance, add your email to all API requests
         *     The email can be either in the query string, like `mailto:example@domain.com`, or in the User-Agent request header, like `User-Agent: my-app (mailto:example@domain.com)`.
         *     Read more about the polite pool at [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool).
         */
        mailto?: components['parameters']['mailtoQuery']
      }
      header?: {
        /** @description [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool) */
        'User-Agent'?: components['parameters']['mailtoHeader']
      }
      path: {
        /**
         * @description The id of the work to retrieve
         * @example W3033546757
         */
        id: components['parameters']['workId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['work']
      403: components['responses']['resp403']
      default: components['responses']['resp4xx']
    }
  }
  getWorkNgrams: {
    parameters: {
      query?: {
        /**
         * @description The API is the primary way to get OpenAlex data. It's free and requires no authentication.
         *     The daily limit for API calls is 100,000 requests per user per day.
         *     For best performance, add your email to all API requests
         *     The email can be either in the query string, like `mailto:example@domain.com`, or in the User-Agent request header, like `User-Agent: my-app (mailto:example@domain.com)`.
         *     Read more about the polite pool at [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool).
         */
        mailto?: components['parameters']['mailtoQuery']
      }
      header?: {
        /** @description [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool) */
        'User-Agent'?: components['parameters']['mailtoHeader']
      }
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['workNgramsGet200Response']
      403: components['responses']['resp403']
      default: components['responses']['resp4xx']
    }
  }
  getRandomWork: {
    parameters: {
      query?: {
        select?: components['parameters']['workAttributeSelectionParameter']
        /**
         * @description The API is the primary way to get OpenAlex data. It's free and requires no authentication.
         *     The daily limit for API calls is 100,000 requests per user per day.
         *     For best performance, add your email to all API requests
         *     The email can be either in the query string, like `mailto:example@domain.com`, or in the User-Agent request header, like `User-Agent: my-app (mailto:example@domain.com)`.
         *     Read more about the polite pool at [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool).
         */
        mailto?: components['parameters']['mailtoQuery']
      }
      header?: {
        /** @description [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool) */
        'User-Agent'?: components['parameters']['mailtoHeader']
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['work']
      403: components['responses']['resp403']
      default: components['responses']['resp4xx']
    }
  }
  getWorks: {
    parameters: {
      query?: {
        api_key?: components['parameters']['api_key']
        cursor?: components['parameters']['cursor']
        group_by?: components['parameters']['group_by_param']
        /** @example 1 */
        page?: components['parameters']['page_param']
        /** @example 3 */
        per_page?: components['parameters']['per_page']
        sample?: components['parameters']['sample']
        search?: components['parameters']['search']
        seed?: components['parameters']['seed']
        select?: components['parameters']['select']
        sort?: components['parameters']['sort']
        /**
         * @description Filter works by a specific field.
         *     See the [filter works](https://docs.openalex.org/api-entities/works/filter-works) documentation for more information.
         *     Valid filters are:
         *
         *
         *     - `abstract.search`
         *     - `apc_list.currency`
         *     - `apc_list.provenance`
         *     - `apc_list.value`
         *     - `apc_list.value_usd`
         *     - `apc_paid.currency`
         *     - `apc_paid.provenance`
         *     - `apc_paid.value`
         *     - `apc_paid.value_usd`
         *     - `author.id`
         *     - `author.orcid`
         *     - `authors_count`
         *     - `authorships.author.id`
         *     - `authorships.author.orcid`
         *     - `authorships.countries`
         *     - `authorships.institutions.continent`
         *     - `authorships.institutions.country_code`
         *     - `authorships.institutions.id`
         *     - `authorships.institutions.is_global_south`
         *     - `authorships.institutions.lineage`
         *     - `authorships.institutions.ror`
         *     - `authorships.institutions.type`
         *     - `authorships.is_corresponding`
         *     - `best_oa_location.is_accepted`
         *     - `best_oa_location.is_oa`
         *     - `best_oa_location.is_published`
         *     - `best_oa_location.landing_page_url`
         *     - `best_oa_location.license`
         *     - `best_oa_location.source.host_organization`
         *     - `best_oa_location.source.host_organization_lineage`
         *     - `best_oa_location.source.id`
         *     - `best_oa_location.source.is_in_doaj`
         *     - `best_oa_location.source.is_oa`
         *     - `best_oa_location.source.issn`
         *     - `best_oa_location.source.type`
         *     - `best_oa_location.version`
         *     - `best_open_version`
         *     - `cited_by`
         *     - `cited_by_count`
         *     - `cited_by_percentile_year.max`
         *     - `cited_by_percentile_year.min`
         *     - `cites`
         *     - `concept.id`
         *     - `concepts.id`
         *     - `concepts.wikidata`
         *     - `concepts_count`
         *     - `corresponding_author_ids`
         *     - `corresponding_institution_ids`
         *     - `countries_distinct_count`
         *     - `default.search`
         *     - `display_name`
         *     - `display_name.search`
         *     - `doi`
         *     - `doi_starts_with`
         *     - `from_created_date`
         *     - `from_publication_date`
         *     - `fulltext.search`
         *     - `fulltext_origin`
         *     - `grants.award_id`
         *     - `grants.funder`
         *     - `has_abstract`
         *     - `has_doi`
         *     - `has_fulltext`
         *     - `has_ngrams`
         *     - `has_oa_accepted_or_published_version`
         *     - `has_oa_submitted_version`
         *     - `has_old_authors`
         *     - `has_orcid`
         *     - `has_pdf_url`
         *     - `has_pmcid`
         *     - `has_pmid`
         *     - `has_raw_affiliation_string`
         *     - `has_references`
         *     - `host_venue.id`
         *     - `ids.mag`
         *     - `ids.openalex`
         *     - `ids.pmcid`
         *     - `ids.pmid`
         *     - `institution.id`
         *     - `institutions.continent`
         *     - `institutions.country_code`
         *     - `institutions.id`
         *     - `institutions.is_global_south`
         *     - `institutions.ror`
         *     - `institutions.type`
         *     - `institutions_distinct_count`
         *     - `is_corresponding`
         *     - `is_oa`
         *     - `is_paratext`
         *     - `is_retracted`
         *     - `journal`
         *     - `keyword.search`
         *     - `keywords.keyword`
         *     - `language`
         *     - `locations.is_accepted`
         *     - `locations.is_oa`
         *     - `locations.is_published`
         *     - `locations.landing_page_url`
         *     - `locations.license`
         *     - `locations.source.has_issn`
         *     - `locations.source.host_institution_lineage`
         *     - `locations.source.host_organization`
         *     - `locations.source.host_organization_lineage`
         *     - `locations.source.id`
         *     - `locations.source.is_in_doaj`
         *     - `locations.source.is_oa`
         *     - `locations.source.issn`
         *     - `locations.source.publisher_lineage`
         *     - `locations.source.type`
         *     - `locations.version`
         *     - `locations_count`
         *     - `mag`
         *     - `oa_status`
         *     - `open_access.any_repository_has_fulltext`
         *     - `open_access.is_oa`
         *     - `open_access.oa_status`
         *     - `openalex`
         *     - `openalex_id`
         *     - `pmcid`
         *     - `pmid`
         *     - `primary_location.is_accepted`
         *     - `primary_location.is_oa`
         *     - `primary_location.is_published`
         *     - `primary_location.landing_page_url`
         *     - `primary_location.license`
         *     - `primary_location.source.has_issn`
         *     - `primary_location.source.host_institution_lineage`
         *     - `primary_location.source.host_organization`
         *     - `primary_location.source.host_organization_lineage`
         *     - `primary_location.source.id`
         *     - `primary_location.source.is_in_doaj`
         *     - `primary_location.source.is_oa`
         *     - `primary_location.source.issn`
         *     - `primary_location.source.publisher_lineage`
         *     - `primary_location.source.type`
         *     - `primary_location.version`
         *     - `publication_date`
         *     - `publication_year`
         *     - `raw_affiliation_string.search`
         *     - `referenced_works`
         *     - `referenced_works_count`
         *     - `related_to`
         *     - `repository`
         *     - `sustainable_development_goals.id`
         *     - `sustainable_development_goals.score`
         *     - `title.search`
         *     - `title_and_abstract.search`
         *     - `to_publication_date`
         *     - `to_updated_date`
         *     - `type`
         *     - `type_crossref`
         *     - `version`
         * @example abstract.search:
         */
        filter?: components['parameters']['filterWorks']
        /**
         * @description The API is the primary way to get OpenAlex data. It's free and requires no authentication.
         *     The daily limit for API calls is 100,000 requests per user per day.
         *     For best performance, add your email to all API requests
         *     The email can be either in the query string, like `mailto:example@domain.com`, or in the User-Agent request header, like `User-Agent: my-app (mailto:example@domain.com)`.
         *     Read more about the polite pool at [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool).
         */
        mailto?: components['parameters']['mailtoQuery']
      }
      header?: {
        /** @description [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool) */
        'User-Agent'?: components['parameters']['mailtoHeader']
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['works']
      403: components['responses']['resp403']
      default: components['responses']['resp4xx']
    }
  }
  getDomainById: {
    parameters: {
      query?: {
        /** @example 3 */
        per_page?: components['parameters']['per_page']
        /**
         * @description The API is the primary way to get OpenAlex data. It's free and requires no authentication.
         *     The daily limit for API calls is 100,000 requests per user per day.
         *     For best performance, add your email to all API requests
         *     The email can be either in the query string, like `mailto:example@domain.com`, or in the User-Agent request header, like `User-Agent: my-app (mailto:example@domain.com)`.
         *     Read more about the polite pool at [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool).
         */
        mailto?: components['parameters']['mailtoQuery']
      }
      header?: {
        /** @description [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool) */
        'User-Agent'?: components['parameters']['mailtoHeader']
      }
      path: {
        id: components['parameters']['idParam']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['domain']
      403: components['responses']['resp403']
      default: components['responses']['resp4xx']
    }
  }
  getFieldById: {
    parameters: {
      query?: {
        /** @example 3 */
        per_page?: components['parameters']['per_page']
        /**
         * @description The API is the primary way to get OpenAlex data. It's free and requires no authentication.
         *     The daily limit for API calls is 100,000 requests per user per day.
         *     For best performance, add your email to all API requests
         *     The email can be either in the query string, like `mailto:example@domain.com`, or in the User-Agent request header, like `User-Agent: my-app (mailto:example@domain.com)`.
         *     Read more about the polite pool at [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool).
         */
        mailto?: components['parameters']['mailtoQuery']
      }
      header?: {
        /** @description [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool) */
        'User-Agent'?: components['parameters']['mailtoHeader']
      }
      path: {
        id: components['parameters']['idParam']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['field']
      403: components['responses']['resp403']
      default: components['responses']['resp4xx']
    }
  }
  getSubfieldById: {
    parameters: {
      query?: {
        /** @example 3 */
        per_page?: components['parameters']['per_page']
        /**
         * @description The API is the primary way to get OpenAlex data. It's free and requires no authentication.
         *     The daily limit for API calls is 100,000 requests per user per day.
         *     For best performance, add your email to all API requests
         *     The email can be either in the query string, like `mailto:example@domain.com`, or in the User-Agent request header, like `User-Agent: my-app (mailto:example@domain.com)`.
         *     Read more about the polite pool at [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool).
         */
        mailto?: components['parameters']['mailtoQuery']
      }
      header?: {
        /** @description [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool) */
        'User-Agent'?: components['parameters']['mailtoHeader']
      }
      path: {
        id: components['parameters']['idParam']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['subfield']
      403: components['responses']['resp403']
      default: components['responses']['resp4xx']
    }
  }
  getTopicById: {
    parameters: {
      query?: {
        /** @example 3 */
        per_page?: components['parameters']['per_page']
        /**
         * @description The API is the primary way to get OpenAlex data. It's free and requires no authentication.
         *     The daily limit for API calls is 100,000 requests per user per day.
         *     For best performance, add your email to all API requests
         *     The email can be either in the query string, like `mailto:example@domain.com`, or in the User-Agent request header, like `User-Agent: my-app (mailto:example@domain.com)`.
         *     Read more about the polite pool at [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool).
         */
        mailto?: components['parameters']['mailtoQuery']
      }
      header?: {
        /** @description [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool) */
        'User-Agent'?: components['parameters']['mailtoHeader']
      }
      path: {
        id: components['parameters']['idParam']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['topic']
      403: components['responses']['resp403']
      default: components['responses']['resp4xx']
    }
  }
  getTopics: {
    parameters: {
      query?: {
        sort?: string
        /** @example 3 */
        per_page?: components['parameters']['per_page']
        page?: string
        sample?: string
        select?: string
        filter?: string
        search?: string
        group_by?: string
        /**
         * @description The API is the primary way to get OpenAlex data. It's free and requires no authentication.
         *     The daily limit for API calls is 100,000 requests per user per day.
         *     For best performance, add your email to all API requests
         *     The email can be either in the query string, like `mailto:example@domain.com`, or in the User-Agent request header, like `User-Agent: my-app (mailto:example@domain.com)`.
         *     Read more about the polite pool at [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool).
         */
        mailto?: components['parameters']['mailtoQuery']
      }
      header?: {
        /** @description [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool) */
        'User-Agent'?: components['parameters']['mailtoHeader']
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['topics']
      403: components['responses']['resp403']
      default: components['responses']['resp4xx']
    }
  }
}
