/* tslint:disable */
/* eslint-disable */
/**
 * OpenAlex
 * ![](https://raw.githubusercontent.com/ourresearch/openalex-docs/main/.gitbook/assets/OpenAlex-logo-5.png)  **OpenAlex** is a fully open catalog of the global research system.  It\'s named after the [ancient Library of Alexandria](https://en.wikipedia.org/wiki/Library_of_Alexandria) and made by the nonprofit [OurResearch](https://ourresearch.org/).  ## OpenAPI Specification  [Mearman/openalex-api-spec](https://github.com/Mearman/openalex-api-spec)  This OpenAPI specification is reverse-engineered and derived from spec generated by [openapi-devtools](https://github.com/AndrewWalsh/openapi-devtools).  The specification document itself is OpenAPI version 3.1 and is generated from TypeScript source code.  [![Open in](https://img.shields.io/badge/Open%20in-Swagger%20UI-85EA2D?style=for-the-badge&logo=Swagger&link=https://mearman.github.io/openalex-swagger-ui-react/)](https://mearman.github.io/openalex-swagger-ui-react/)  **[Releases](https://github.com/Mearman/openalex-api-spec/releases)**  ## Clients  [![TypeScript](https://img.shields.io/badge/TypeScript-3178C6?style=for-the-badge&logo=TypeScript&logoColor=white&link=https://github.com/Mearman/openalex-typescript)](https://github.com/Mearman/openalex-typescript)  [![TypeScript Fetch](https://img.shields.io/badge/TypeScript%20Fetch-3178C6?style=for-the-badge&logo=TypeScript&logoColor=white&link=https://github.com/Mearman/openalex-typescript-fetch)](https://github.com/Mearman/openalex-typescript-fetch)  [![TypeScript Node](https://img.shields.io/badge/TypeScript%20Node-339933?style=for-the-badge&logo=Node.js&logoColor=white&link=https://github.com/Mearman/openalex-typescript-node)](https://github.com/Mearman/openalex-typescript-node)  [![Python](https://img.shields.io/badge/Python-3776AB?style=for-the-badge&logo=Python&logoColor=white&link=https://github.com/Mearman/openalex-python)](https://github.com/Mearman/openalex-python) [![Open in](https://img.shields.io/badge/Open%20in-CodeSpaces-181717?style=for-the-badge&logo=GitHub&link=https://codespaces.new/Mearman/openalex-python)](https://codespaces.new/Mearman/openalex-python) [![Open in](https://img.shields.io/badge/Open%20in-Colab-F9AB00?style=for-the-badge&logo=Google%20Colab&link=https://colab.research.google.com/github/Mearman/openalex-python/blob/main/README.ipynb)](https://colab.research.google.com/github/Mearman/openalex-python/blob/main/README.ipynb)  ---
 *
 * The version of the OpenAPI document: 0.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TopicLevelArraySchema } from './TopicLevelArraySchema';
import {
    TopicLevelArraySchemaFromJSON,
    TopicLevelArraySchemaFromJSONTyped,
    TopicLevelArraySchemaToJSON,
    TopicLevelArraySchemaToJSONTyped,
} from './TopicLevelArraySchema';
import type { TopicLevelSchema } from './TopicLevelSchema';
import {
    TopicLevelSchemaFromJSON,
    TopicLevelSchemaFromJSONTyped,
    TopicLevelSchemaToJSON,
    TopicLevelSchemaToJSONTyped,
} from './TopicLevelSchema';
import type { Ids } from './Ids';
import {
    IdsFromJSON,
    IdsFromJSONTyped,
    IdsToJSON,
    IdsToJSONTyped,
} from './Ids';

/**
 * 
 * @export
 * @interface Field
 */
export interface Field {
    /**
     * 
     * @type {number}
     * @memberof Field
     */
    cited_by_count: number;
    /**
     * 
     * @type {string}
     * @memberof Field
     */
    created_date: string;
    /**
     * 
     * @type {string}
     * @memberof Field
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof Field
     */
    display_name: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Field
     */
    display_name_alternatives: Array<string>;
    /**
     * 
     * @type {TopicLevelSchema}
     * @memberof Field
     */
    domain: TopicLevelSchema;
    /**
     * 
     * @type {string}
     * @memberof Field
     */
    id: string;
    /**
     * 
     * @type {Ids}
     * @memberof Field
     */
    ids: Ids;
    /**
     * 
     * @type {TopicLevelArraySchema}
     * @memberof Field
     */
    siblings: TopicLevelArraySchema;
    /**
     * 
     * @type {TopicLevelArraySchema}
     * @memberof Field
     */
    subfields: TopicLevelArraySchema;
    /**
     * 
     * @type {string}
     * @memberof Field
     */
    updated_date: string;
    /**
     * 
     * @type {string}
     * @memberof Field
     */
    works_api_url: string;
    /**
     * 
     * @type {number}
     * @memberof Field
     */
    works_count: number;
}

/**
 * Check if a given object implements the Field interface.
 */
export function instanceOfField(value: object): value is Field {
    if (!('cited_by_count' in value) || value['cited_by_count'] === undefined) return false;
    if (!('created_date' in value) || value['created_date'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('display_name' in value) || value['display_name'] === undefined) return false;
    if (!('display_name_alternatives' in value) || value['display_name_alternatives'] === undefined) return false;
    if (!('domain' in value) || value['domain'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('ids' in value) || value['ids'] === undefined) return false;
    if (!('siblings' in value) || value['siblings'] === undefined) return false;
    if (!('subfields' in value) || value['subfields'] === undefined) return false;
    if (!('updated_date' in value) || value['updated_date'] === undefined) return false;
    if (!('works_api_url' in value) || value['works_api_url'] === undefined) return false;
    if (!('works_count' in value) || value['works_count'] === undefined) return false;
    return true;
}

export function FieldFromJSON(json: any): Field {
    return FieldFromJSONTyped(json, false);
}

export function FieldFromJSONTyped(json: any, ignoreDiscriminator: boolean): Field {
    if (json == null) {
        return json;
    }
    return {
        
        'cited_by_count': json['cited_by_count'],
        'created_date': json['created_date'],
        'description': json['description'],
        'display_name': json['display_name'],
        'display_name_alternatives': json['display_name_alternatives'],
        'domain': TopicLevelSchemaFromJSON(json['domain']),
        'id': json['id'],
        'ids': IdsFromJSON(json['ids']),
        'siblings': TopicLevelArraySchemaFromJSON(json['siblings']),
        'subfields': TopicLevelArraySchemaFromJSON(json['subfields']),
        'updated_date': json['updated_date'],
        'works_api_url': json['works_api_url'],
        'works_count': json['works_count'],
    };
}

export function FieldToJSON(json: any): Field {
    return FieldToJSONTyped(json, false);
}

export function FieldToJSONTyped(value?: Field | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'cited_by_count': value['cited_by_count'],
        'created_date': value['created_date'],
        'description': value['description'],
        'display_name': value['display_name'],
        'display_name_alternatives': value['display_name_alternatives'],
        'domain': TopicLevelSchemaToJSON(value['domain']),
        'id': value['id'],
        'ids': IdsToJSON(value['ids']),
        'siblings': TopicLevelArraySchemaToJSON(value['siblings']),
        'subfields': TopicLevelArraySchemaToJSON(value['subfields']),
        'updated_date': value['updated_date'],
        'works_api_url': value['works_api_url'],
        'works_count': value['works_count'],
    };
}

