/* tslint:disable */
/* eslint-disable */
/**
 * OpenAlex
 * ![](https://raw.githubusercontent.com/ourresearch/openalex-docs/main/.gitbook/assets/OpenAlex-logo-5.png)  **OpenAlex** is a fully open catalog of the global research system.  It\'s named after the [ancient Library of Alexandria](https://en.wikipedia.org/wiki/Library_of_Alexandria) and made by the nonprofit [OurResearch](https://ourresearch.org/).  ## OpenAPI Specification  [Mearman/openalex-api-spec](https://github.com/Mearman/openalex-api-spec)  This OpenAPI specification is reverse-engineered and derived from spec generated by [openapi-devtools](https://github.com/AndrewWalsh/openapi-devtools).  The specification document itself is OpenAPI version 3.1 and is generated from TypeScript source code.  [![Open in](https://img.shields.io/badge/Open%20in-Swagger%20UI-85EA2D?style=for-the-badge&logo=Swagger&link=https://mearman.github.io/openalex-swagger-ui-react/)](https://mearman.github.io/openalex-swagger-ui-react/)  **[Releases](https://github.com/Mearman/openalex-api-spec/releases)**  ## Clients  [![TypeScript](https://img.shields.io/badge/TypeScript-3178C6?style=for-the-badge&logo=TypeScript&logoColor=white&link=https://github.com/Mearman/openalex-typescript)](https://github.com/Mearman/openalex-typescript)  [![TypeScript Fetch](https://img.shields.io/badge/TypeScript%20Fetch-3178C6?style=for-the-badge&logo=TypeScript&logoColor=white&link=https://github.com/Mearman/openalex-typescript-fetch)](https://github.com/Mearman/openalex-typescript-fetch)  [![TypeScript Node](https://img.shields.io/badge/TypeScript%20Node-339933?style=for-the-badge&logo=Node.js&logoColor=white&link=https://github.com/Mearman/openalex-typescript-node)](https://github.com/Mearman/openalex-typescript-node)  [![Python](https://img.shields.io/badge/Python-3776AB?style=for-the-badge&logo=Python&logoColor=white&link=https://github.com/Mearman/openalex-python)](https://github.com/Mearman/openalex-python) [![Open in](https://img.shields.io/badge/Open%20in-CodeSpaces-181717?style=for-the-badge&logo=GitHub&link=https://codespaces.new/Mearman/openalex-python)](https://codespaces.new/Mearman/openalex-python) [![Open in](https://img.shields.io/badge/Open%20in-Colab-F9AB00?style=for-the-badge&logo=Google%20Colab&link=https://colab.research.google.com/github/Mearman/openalex-python/blob/main/README.ipynb)](https://colab.research.google.com/github/Mearman/openalex-python/blob/main/README.ipynb)  ---
 *
 * The version of the OpenAPI document: 0.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


/**
 * 
 * @export
 */
export const WorkAttributes = {
    AbstractInvertedIndex: 'abstract_inverted_index',
    ApcList: 'apc_list',
    ApcPaid: 'apc_paid',
    Authorships: 'authorships',
    BestOaLocation: 'best_oa_location',
    Biblio: 'biblio',
    CitedByApiUrl: 'cited_by_api_url',
    CitedByCount: 'cited_by_count',
    CitedByPercentileYear: 'cited_by_percentile_year',
    Concepts: 'concepts',
    CorrespondingAuthorIds: 'corresponding_author_ids',
    CorrespondingInstitutionIds: 'corresponding_institution_ids',
    CountriesDistinctCount: 'countries_distinct_count',
    CountsByYear: 'counts_by_year',
    CreatedDate: 'created_date',
    Doi: 'doi',
    FulltextOrigin: 'fulltext_origin',
    Grants: 'grants',
    HasFulltext: 'has_fulltext',
    Ids: 'ids',
    InstitutionsDistinctCount: 'institutions_distinct_count',
    IsAuthorsTruncated: 'is_authors_truncated',
    IsParatext: 'is_paratext',
    IsRetracted: 'is_retracted',
    Keywords: 'keywords',
    Language: 'language',
    LocationsCount: 'locations_count',
    Locations: 'locations',
    Mesh: 'mesh',
    NgramsUrl: 'ngrams_url',
    OpenAccess: 'open_access',
    PrimaryLocation: 'primary_location',
    PublicationDate: 'publication_date',
    PublicationYear: 'publication_year',
    ReferencedWorksCount: 'referenced_works_count',
    ReferencedWorks: 'referenced_works',
    RelatedWorks: 'related_works',
    RelevanceScore: 'relevance_score',
    SustainableDevelopmentGoals: 'sustainable_development_goals',
    Title: 'title',
    TypeCrossref: 'type_crossref',
    Type: 'type',
    UpdatedDate: 'updated_date'
} as const;
export type WorkAttributes = typeof WorkAttributes[keyof typeof WorkAttributes];


export function instanceOfWorkAttributes(value: any): boolean {
    for (const key in WorkAttributes) {
        if (Object.prototype.hasOwnProperty.call(WorkAttributes, key)) {
            if ((WorkAttributes as Record<string, WorkAttributes>)[key] === value) {
                return true;
            }
        }
    }
    return false;
}

export function WorkAttributesFromJSON(json: any): WorkAttributes {
    return WorkAttributesFromJSONTyped(json, false);
}

export function WorkAttributesFromJSONTyped(json: any, ignoreDiscriminator: boolean): WorkAttributes {
    return json as WorkAttributes;
}

export function WorkAttributesToJSON(value?: WorkAttributes | null): any {
    return value as any;
}

