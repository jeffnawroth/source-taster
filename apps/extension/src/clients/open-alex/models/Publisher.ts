/* tslint:disable */
/* eslint-disable */
/**
 * OpenAlex
 * ![](https://raw.githubusercontent.com/ourresearch/openalex-docs/main/.gitbook/assets/OpenAlex-logo-5.png)  **OpenAlex** is a fully open catalog of the global research system.  It\'s named after the [ancient Library of Alexandria](https://en.wikipedia.org/wiki/Library_of_Alexandria) and made by the nonprofit [OurResearch](https://ourresearch.org/).  ## OpenAPI Specification  [Mearman/openalex-api-spec](https://github.com/Mearman/openalex-api-spec)  This OpenAPI specification is reverse-engineered and derived from spec generated by [openapi-devtools](https://github.com/AndrewWalsh/openapi-devtools).  The specification document itself is OpenAPI version 3.1 and is generated from TypeScript source code.  [![Open in](https://img.shields.io/badge/Open%20in-Swagger%20UI-85EA2D?style=for-the-badge&logo=Swagger&link=https://mearman.github.io/openalex-swagger-ui-react/)](https://mearman.github.io/openalex-swagger-ui-react/)  **[Releases](https://github.com/Mearman/openalex-api-spec/releases)**  ## Clients  [![TypeScript](https://img.shields.io/badge/TypeScript-3178C6?style=for-the-badge&logo=TypeScript&logoColor=white&link=https://github.com/Mearman/openalex-typescript)](https://github.com/Mearman/openalex-typescript)  [![TypeScript Fetch](https://img.shields.io/badge/TypeScript%20Fetch-3178C6?style=for-the-badge&logo=TypeScript&logoColor=white&link=https://github.com/Mearman/openalex-typescript-fetch)](https://github.com/Mearman/openalex-typescript-fetch)  [![TypeScript Node](https://img.shields.io/badge/TypeScript%20Node-339933?style=for-the-badge&logo=Node.js&logoColor=white&link=https://github.com/Mearman/openalex-typescript-node)](https://github.com/Mearman/openalex-typescript-node)  [![Python](https://img.shields.io/badge/Python-3776AB?style=for-the-badge&logo=Python&logoColor=white&link=https://github.com/Mearman/openalex-python)](https://github.com/Mearman/openalex-python) [![Open in](https://img.shields.io/badge/Open%20in-CodeSpaces-181717?style=for-the-badge&logo=GitHub&link=https://codespaces.new/Mearman/openalex-python)](https://codespaces.new/Mearman/openalex-python) [![Open in](https://img.shields.io/badge/Open%20in-Colab-F9AB00?style=for-the-badge&logo=Google%20Colab&link=https://colab.research.google.com/github/Mearman/openalex-python/blob/main/README.ipynb)](https://colab.research.google.com/github/Mearman/openalex-python/blob/main/README.ipynb)  ---
 *
 * The version of the OpenAPI document: 0.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CountsByYear } from './CountsByYear';
import {
    CountsByYearFromJSON,
    CountsByYearFromJSONTyped,
    CountsByYearToJSON,
} from './CountsByYear';
import type { PublisherParentPublisher } from './PublisherParentPublisher';
import {
    PublisherParentPublisherFromJSON,
    PublisherParentPublisherFromJSONTyped,
    PublisherParentPublisherToJSON,
} from './PublisherParentPublisher';
import type { SummaryStats } from './SummaryStats';
import {
    SummaryStatsFromJSON,
    SummaryStatsFromJSONTyped,
    SummaryStatsToJSON,
} from './SummaryStats';
import type { Ids } from './Ids';
import {
    IdsFromJSON,
    IdsFromJSONTyped,
    IdsToJSON,
} from './Ids';
import type { Roles } from './Roles';
import {
    RolesFromJSON,
    RolesFromJSONTyped,
    RolesToJSON,
} from './Roles';

/**
 * 
 * @export
 * @interface Publisher
 */
export interface Publisher {
    /**
     * 
     * @type {Array<string>}
     * @memberof Publisher
     */
    alternateTitles?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof Publisher
     */
    citedByCount?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof Publisher
     */
    countryCodes?: Array<string>;
    /**
     * 
     * @type {CountsByYear}
     * @memberof Publisher
     */
    countsByYear?: CountsByYear;
    /**
     * 
     * @type {string}
     * @memberof Publisher
     */
    createdDate?: string;
    /**
     * 
     * @type {string}
     * @memberof Publisher
     */
    displayName: string;
    /**
     * 
     * @type {number}
     * @memberof Publisher
     */
    hierarchyLevel?: number;
    /**
     * 
     * @type {string}
     * @memberof Publisher
     */
    homepageUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof Publisher
     */
    id: string;
    /**
     * 
     * @type {Ids}
     * @memberof Publisher
     */
    ids?: Ids;
    /**
     * 
     * @type {string}
     * @memberof Publisher
     */
    imageThumbnailUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof Publisher
     */
    imageUrl?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Publisher
     */
    lineage?: Array<string>;
    /**
     * 
     * @type {PublisherParentPublisher}
     * @memberof Publisher
     */
    parentPublisher?: PublisherParentPublisher;
    /**
     * 
     * @type {Roles}
     * @memberof Publisher
     */
    roles?: Roles;
    /**
     * 
     * @type {string}
     * @memberof Publisher
     */
    sourcesApiUrl?: string;
    /**
     * 
     * @type {SummaryStats}
     * @memberof Publisher
     */
    summaryStats?: SummaryStats;
    /**
     * 
     * @type {string}
     * @memberof Publisher
     */
    updatedDate?: string;
    /**
     * 
     * @type {number}
     * @memberof Publisher
     */
    worksCount?: number;
}

/**
 * Check if a given object implements the Publisher interface.
 */
export function instanceOfPublisher(value: object): value is Publisher {
    if (!('displayName' in value) || value['displayName'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    return true;
}

export function PublisherFromJSON(json: any): Publisher {
    return PublisherFromJSONTyped(json, false);
}

export function PublisherFromJSONTyped(json: any, ignoreDiscriminator: boolean): Publisher {
    if (json == null) {
        return json;
    }
    return {
        
        'alternateTitles': json['alternate_titles'] == null ? undefined : json['alternate_titles'],
        'citedByCount': json['cited_by_count'] == null ? undefined : json['cited_by_count'],
        'countryCodes': json['country_codes'] == null ? undefined : json['country_codes'],
        'countsByYear': json['counts_by_year'] == null ? undefined : CountsByYearFromJSON(json['counts_by_year']),
        'createdDate': json['created_date'] == null ? undefined : json['created_date'],
        'displayName': json['display_name'],
        'hierarchyLevel': json['hierarchy_level'] == null ? undefined : json['hierarchy_level'],
        'homepageUrl': json['homepage_url'] == null ? undefined : json['homepage_url'],
        'id': json['id'],
        'ids': json['ids'] == null ? undefined : IdsFromJSON(json['ids']),
        'imageThumbnailUrl': json['image_thumbnail_url'] == null ? undefined : json['image_thumbnail_url'],
        'imageUrl': json['image_url'] == null ? undefined : json['image_url'],
        'lineage': json['lineage'] == null ? undefined : json['lineage'],
        'parentPublisher': json['parent_publisher'] == null ? undefined : PublisherParentPublisherFromJSON(json['parent_publisher']),
        'roles': json['roles'] == null ? undefined : RolesFromJSON(json['roles']),
        'sourcesApiUrl': json['sources_api_url'] == null ? undefined : json['sources_api_url'],
        'summaryStats': json['summary_stats'] == null ? undefined : SummaryStatsFromJSON(json['summary_stats']),
        'updatedDate': json['updated_date'] == null ? undefined : json['updated_date'],
        'worksCount': json['works_count'] == null ? undefined : json['works_count'],
    };
}

export function PublisherToJSON(value?: Publisher | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'alternate_titles': value['alternateTitles'],
        'cited_by_count': value['citedByCount'],
        'country_codes': value['countryCodes'],
        'counts_by_year': CountsByYearToJSON(value['countsByYear']),
        'created_date': value['createdDate'],
        'display_name': value['displayName'],
        'hierarchy_level': value['hierarchyLevel'],
        'homepage_url': value['homepageUrl'],
        'id': value['id'],
        'ids': IdsToJSON(value['ids']),
        'image_thumbnail_url': value['imageThumbnailUrl'],
        'image_url': value['imageUrl'],
        'lineage': value['lineage'],
        'parent_publisher': PublisherParentPublisherToJSON(value['parentPublisher']),
        'roles': RolesToJSON(value['roles']),
        'sources_api_url': value['sourcesApiUrl'],
        'summary_stats': SummaryStatsToJSON(value['summaryStats']),
        'updated_date': value['updatedDate'],
        'works_count': value['worksCount'],
    };
}

