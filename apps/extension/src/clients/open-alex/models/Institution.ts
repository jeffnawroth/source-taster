/* tslint:disable */
/* eslint-disable */
/**
 * OpenAlex
 * ![](https://raw.githubusercontent.com/ourresearch/openalex-docs/main/.gitbook/assets/OpenAlex-logo-5.png)  **OpenAlex** is a fully open catalog of the global research system.  It\'s named after the [ancient Library of Alexandria](https://en.wikipedia.org/wiki/Library_of_Alexandria) and made by the nonprofit [OurResearch](https://ourresearch.org/).  ## OpenAPI Specification  [Mearman/openalex-api-spec](https://github.com/Mearman/openalex-api-spec)  This OpenAPI specification is reverse-engineered and derived from spec generated by [openapi-devtools](https://github.com/AndrewWalsh/openapi-devtools).  The specification document itself is OpenAPI version 3.1 and is generated from TypeScript source code.  [![Open in](https://img.shields.io/badge/Open%20in-Swagger%20UI-85EA2D?style=for-the-badge&logo=Swagger&link=https://mearman.github.io/openalex-swagger-ui-react/)](https://mearman.github.io/openalex-swagger-ui-react/)  **[Releases](https://github.com/Mearman/openalex-api-spec/releases)**  ## Clients  [![TypeScript](https://img.shields.io/badge/TypeScript-3178C6?style=for-the-badge&logo=TypeScript&logoColor=white&link=https://github.com/Mearman/openalex-typescript)](https://github.com/Mearman/openalex-typescript)  [![TypeScript Fetch](https://img.shields.io/badge/TypeScript%20Fetch-3178C6?style=for-the-badge&logo=TypeScript&logoColor=white&link=https://github.com/Mearman/openalex-typescript-fetch)](https://github.com/Mearman/openalex-typescript-fetch)  [![TypeScript Node](https://img.shields.io/badge/TypeScript%20Node-339933?style=for-the-badge&logo=Node.js&logoColor=white&link=https://github.com/Mearman/openalex-typescript-node)](https://github.com/Mearman/openalex-typescript-node)  [![Python](https://img.shields.io/badge/Python-3776AB?style=for-the-badge&logo=Python&logoColor=white&link=https://github.com/Mearman/openalex-python)](https://github.com/Mearman/openalex-python) [![Open in](https://img.shields.io/badge/Open%20in-CodeSpaces-181717?style=for-the-badge&logo=GitHub&link=https://codespaces.new/Mearman/openalex-python)](https://codespaces.new/Mearman/openalex-python) [![Open in](https://img.shields.io/badge/Open%20in-Colab-F9AB00?style=for-the-badge&logo=Google%20Colab&link=https://colab.research.google.com/github/Mearman/openalex-python/blob/main/README.ipynb)](https://colab.research.google.com/github/Mearman/openalex-python/blob/main/README.ipynb)  ---
 *
 * The version of the OpenAPI document: 0.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AssociatedInstitutionArray } from './AssociatedInstitutionArray';
import {
    AssociatedInstitutionArrayFromJSON,
    AssociatedInstitutionArrayFromJSONTyped,
    AssociatedInstitutionArrayToJSON,
} from './AssociatedInstitutionArray';
import type { CountsByYear } from './CountsByYear';
import {
    CountsByYearFromJSON,
    CountsByYearFromJSONTyped,
    CountsByYearToJSON,
} from './CountsByYear';
import type { Geo } from './Geo';
import {
    GeoFromJSON,
    GeoFromJSONTyped,
    GeoToJSON,
} from './Geo';
import type { RepositoriesArray } from './RepositoriesArray';
import {
    RepositoriesArrayFromJSON,
    RepositoriesArrayFromJSONTyped,
    RepositoriesArrayToJSON,
} from './RepositoriesArray';
import type { DehydratedConceptArray } from './DehydratedConceptArray';
import {
    DehydratedConceptArrayFromJSON,
    DehydratedConceptArrayFromJSONTyped,
    DehydratedConceptArrayToJSON,
} from './DehydratedConceptArray';
import type { InternationalDisplayName } from './InternationalDisplayName';
import {
    InternationalDisplayNameFromJSON,
    InternationalDisplayNameFromJSONTyped,
    InternationalDisplayNameToJSON,
} from './InternationalDisplayName';
import type { SummaryStats } from './SummaryStats';
import {
    SummaryStatsFromJSON,
    SummaryStatsFromJSONTyped,
    SummaryStatsToJSON,
} from './SummaryStats';
import type { Ids } from './Ids';
import {
    IdsFromJSON,
    IdsFromJSONTyped,
    IdsToJSON,
} from './Ids';
import type { Roles } from './Roles';
import {
    RolesFromJSON,
    RolesFromJSONTyped,
    RolesToJSON,
} from './Roles';

/**
 * 
 * @export
 * @interface Institution
 */
export interface Institution {
    /**
     * 
     * @type {AssociatedInstitutionArray}
     * @memberof Institution
     */
    associatedInstitutions?: AssociatedInstitutionArray;
    /**
     * 
     * @type {number}
     * @memberof Institution
     */
    citedByCount?: number;
    /**
     * 
     * @type {string}
     * @memberof Institution
     */
    countryCode?: string;
    /**
     * 
     * @type {CountsByYear}
     * @memberof Institution
     */
    countsByYear?: CountsByYear;
    /**
     * 
     * @type {string}
     * @memberof Institution
     */
    createdDate?: string;
    /**
     * 
     * @type {string}
     * @memberof Institution
     */
    displayName: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Institution
     */
    displayNameAcronyms?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Institution
     */
    displayNameAlternatives?: Array<string>;
    /**
     * 
     * @type {Geo}
     * @memberof Institution
     */
    geo?: Geo;
    /**
     * 
     * @type {string}
     * @memberof Institution
     */
    homepageUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof Institution
     */
    id: string;
    /**
     * 
     * @type {Ids}
     * @memberof Institution
     */
    ids?: Ids;
    /**
     * 
     * @type {string}
     * @memberof Institution
     */
    imageThumbnailUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof Institution
     */
    imageUrl?: string;
    /**
     * 
     * @type {InternationalDisplayName}
     * @memberof Institution
     */
    international?: InternationalDisplayName;
    /**
     * 
     * @type {Array<string>}
     * @memberof Institution
     */
    lineage?: Array<string>;
    /**
     * 
     * @type {RepositoriesArray}
     * @memberof Institution
     */
    repositories?: RepositoriesArray;
    /**
     * 
     * @type {Roles}
     * @memberof Institution
     */
    roles?: Roles;
    /**
     * 
     * @type {string}
     * @memberof Institution
     */
    ror?: string;
    /**
     * 
     * @type {SummaryStats}
     * @memberof Institution
     */
    summaryStats?: SummaryStats;
    /**
     * 
     * @type {string}
     * @memberof Institution
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof Institution
     */
    updatedDate?: string;
    /**
     * 
     * @type {string}
     * @memberof Institution
     */
    worksApiUrl?: string;
    /**
     * 
     * @type {number}
     * @memberof Institution
     */
    worksCount?: number;
    /**
     * 
     * @type {DehydratedConceptArray}
     * @memberof Institution
     */
    xConcepts?: DehydratedConceptArray;
}

/**
 * Check if a given object implements the Institution interface.
 */
export function instanceOfInstitution(value: object): value is Institution {
    if (!('displayName' in value) || value['displayName'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    return true;
}

export function InstitutionFromJSON(json: any): Institution {
    return InstitutionFromJSONTyped(json, false);
}

export function InstitutionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Institution {
    if (json == null) {
        return json;
    }
    return {
        
        'associatedInstitutions': json['associated_institutions'] == null ? undefined : AssociatedInstitutionArrayFromJSON(json['associated_institutions']),
        'citedByCount': json['cited_by_count'] == null ? undefined : json['cited_by_count'],
        'countryCode': json['country_code'] == null ? undefined : json['country_code'],
        'countsByYear': json['counts_by_year'] == null ? undefined : CountsByYearFromJSON(json['counts_by_year']),
        'createdDate': json['created_date'] == null ? undefined : json['created_date'],
        'displayName': json['display_name'],
        'displayNameAcronyms': json['display_name_acronyms'] == null ? undefined : json['display_name_acronyms'],
        'displayNameAlternatives': json['display_name_alternatives'] == null ? undefined : json['display_name_alternatives'],
        'geo': json['geo'] == null ? undefined : GeoFromJSON(json['geo']),
        'homepageUrl': json['homepage_url'] == null ? undefined : json['homepage_url'],
        'id': json['id'],
        'ids': json['ids'] == null ? undefined : IdsFromJSON(json['ids']),
        'imageThumbnailUrl': json['image_thumbnail_url'] == null ? undefined : json['image_thumbnail_url'],
        'imageUrl': json['image_url'] == null ? undefined : json['image_url'],
        'international': json['international'] == null ? undefined : InternationalDisplayNameFromJSON(json['international']),
        'lineage': json['lineage'] == null ? undefined : json['lineage'],
        'repositories': json['repositories'] == null ? undefined : RepositoriesArrayFromJSON(json['repositories']),
        'roles': json['roles'] == null ? undefined : RolesFromJSON(json['roles']),
        'ror': json['ror'] == null ? undefined : json['ror'],
        'summaryStats': json['summary_stats'] == null ? undefined : SummaryStatsFromJSON(json['summary_stats']),
        'type': json['type'] == null ? undefined : json['type'],
        'updatedDate': json['updated_date'] == null ? undefined : json['updated_date'],
        'worksApiUrl': json['works_api_url'] == null ? undefined : json['works_api_url'],
        'worksCount': json['works_count'] == null ? undefined : json['works_count'],
        'xConcepts': json['x_concepts'] == null ? undefined : DehydratedConceptArrayFromJSON(json['x_concepts']),
    };
}

export function InstitutionToJSON(value?: Institution | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'associated_institutions': AssociatedInstitutionArrayToJSON(value['associatedInstitutions']),
        'cited_by_count': value['citedByCount'],
        'country_code': value['countryCode'],
        'counts_by_year': CountsByYearToJSON(value['countsByYear']),
        'created_date': value['createdDate'],
        'display_name': value['displayName'],
        'display_name_acronyms': value['displayNameAcronyms'],
        'display_name_alternatives': value['displayNameAlternatives'],
        'geo': GeoToJSON(value['geo']),
        'homepage_url': value['homepageUrl'],
        'id': value['id'],
        'ids': IdsToJSON(value['ids']),
        'image_thumbnail_url': value['imageThumbnailUrl'],
        'image_url': value['imageUrl'],
        'international': InternationalDisplayNameToJSON(value['international']),
        'lineage': value['lineage'],
        'repositories': RepositoriesArrayToJSON(value['repositories']),
        'roles': RolesToJSON(value['roles']),
        'ror': value['ror'],
        'summary_stats': SummaryStatsToJSON(value['summaryStats']),
        'type': value['type'],
        'updated_date': value['updatedDate'],
        'works_api_url': value['worksApiUrl'],
        'works_count': value['worksCount'],
        'x_concepts': DehydratedConceptArrayToJSON(value['xConcepts']),
    };
}

