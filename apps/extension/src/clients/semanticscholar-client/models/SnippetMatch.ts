/* tslint:disable */
/* eslint-disable */
/**
 * Academic Graph API
 * Fetch paper and author data from the Semantic Scholar Academic Graph (S2AG).         <br><br>         Some things to note:         <ul>         <li>If you are using an API key, it must be set in the header <code>x-api-key</code> (case-sensitive).</li>         <li>We have two different IDs for a single paper:           <ul>             <li><code>paperId</code> - string - The primary way to identify papers when using our website or this API</li>             <li><code>corpusId</code> - int64 - A second way to identify papers. Our datasets use corpusId when pointing to papers.</li>           </ul>         </li>         <li>Other useful resources<ul>         <li><a href=\"https://www.semanticscholar.org/product/api\">Overview</a></li>         <li><a href=\"https://github.com/allenai/s2-folks/\">allenai/s2-folks</a></li>         <li><a href=\"https://github.com/allenai/s2-folks/blob/main/FAQ.md\">FAQ</a> in allenai/s2folks</li>         </ul></li>         
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { SnippetMatch } from './SnippetMatch2';
import {
    SnippetMatchFromJSON,
    SnippetMatchFromJSONTyped,
    SnippetMatchToJSON,
    SnippetMatchToJSONTyped,
} from './SnippetMatch2';

/**
 * 
 * @export
 * @interface SnippetMatch
 */
export interface SnippetMatch {
    /**
     * 
     * @type {Array<Snippet Match>}
     * @memberof SnippetMatch
     */
    data?: Array<SnippetMatch>;
    /**
     * A rough representation of the retrieval approach we've used to get the results. We'll usually bump this if we change something about how we get results. Note that the same retrievalVersion value doesn't guarantee that you'll get the same results for the same query at different times, and a different retrievalVersion value doesn't always mean you'll get different results.
     * @type {string}
     * @memberof SnippetMatch
     */
    retrievalVersion?: string;
}

/**
 * Check if a given object implements the SnippetMatch interface.
 */
export function instanceOfSnippetMatch(value: object): value is SnippetMatch {
    return true;
}

export function SnippetMatchFromJSON(json: any): SnippetMatch {
    return SnippetMatchFromJSONTyped(json, false);
}

export function SnippetMatchFromJSONTyped(json: any, ignoreDiscriminator: boolean): SnippetMatch {
    if (json == null) {
        return json;
    }
    return {
        
        'data': json['data'] == null ? undefined : ((json['data'] as Array<any>).map(SnippetMatchFromJSON)),
        'retrievalVersion': json['retrievalVersion'] == null ? undefined : json['retrievalVersion'],
    };
}

export function SnippetMatchToJSON(json: any): SnippetMatch {
    return SnippetMatchToJSONTyped(json, false);
}

export function SnippetMatchToJSONTyped(value?: SnippetMatch | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'data': value['data'] == null ? undefined : ((value['data'] as Array<any>).map(SnippetMatchToJSON)),
        'retrievalVersion': value['retrievalVersion'],
    };
}

