/* tslint:disable */
/* eslint-disable */
/**
 * OpenAlex
 * ![](https://raw.githubusercontent.com/ourresearch/openalex-docs/main/.gitbook/assets/OpenAlex-logo-5.png)  **OpenAlex** is a fully open catalog of the global research system.  It\'s named after the [ancient Library of Alexandria](https://en.wikipedia.org/wiki/Library_of_Alexandria) and made by the nonprofit [OurResearch](https://ourresearch.org/).  ## OpenAPI Specification  [Mearman/openalex-api-spec](https://github.com/Mearman/openalex-api-spec)  This OpenAPI specification is reverse-engineered and derived from spec generated by [openapi-devtools](https://github.com/AndrewWalsh/openapi-devtools).  The specification document itself is OpenAPI version 3.1 and is generated from TypeScript source code.  [![Open in](https://img.shields.io/badge/Open%20in-Swagger%20UI-85EA2D?style=for-the-badge&logo=Swagger&link=https://mearman.github.io/openalex-swagger-ui-react/)](https://mearman.github.io/openalex-swagger-ui-react/)  **[Releases](https://github.com/Mearman/openalex-api-spec/releases)**  ## Clients  [![TypeScript](https://img.shields.io/badge/TypeScript-3178C6?style=for-the-badge&logo=TypeScript&logoColor=white&link=https://github.com/Mearman/openalex-typescript)](https://github.com/Mearman/openalex-typescript)  [![TypeScript Fetch](https://img.shields.io/badge/TypeScript%20Fetch-3178C6?style=for-the-badge&logo=TypeScript&logoColor=white&link=https://github.com/Mearman/openalex-typescript-fetch)](https://github.com/Mearman/openalex-typescript-fetch)  [![TypeScript Node](https://img.shields.io/badge/TypeScript%20Node-339933?style=for-the-badge&logo=Node.js&logoColor=white&link=https://github.com/Mearman/openalex-typescript-node)](https://github.com/Mearman/openalex-typescript-node)  [![Python](https://img.shields.io/badge/Python-3776AB?style=for-the-badge&logo=Python&logoColor=white&link=https://github.com/Mearman/openalex-python)](https://github.com/Mearman/openalex-python) [![Open in](https://img.shields.io/badge/Open%20in-CodeSpaces-181717?style=for-the-badge&logo=GitHub&link=https://codespaces.new/Mearman/openalex-python)](https://codespaces.new/Mearman/openalex-python) [![Open in](https://img.shields.io/badge/Open%20in-Colab-F9AB00?style=for-the-badge&logo=Google%20Colab&link=https://colab.research.google.com/github/Mearman/openalex-python/blob/main/README.ipynb)](https://colab.research.google.com/github/Mearman/openalex-python/blob/main/README.ipynb)  ---
 *
 * The version of the OpenAPI document: 0.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { WorkGrantsInner } from './WorkGrantsInner';
import {
    WorkGrantsInnerFromJSON,
    WorkGrantsInnerFromJSONTyped,
    WorkGrantsInnerToJSON,
    WorkGrantsInnerToJSONTyped,
} from './WorkGrantsInner';
import type { CountsByYearInner } from './CountsByYearInner';
import {
    CountsByYearInnerFromJSON,
    CountsByYearInnerFromJSONTyped,
    CountsByYearInnerToJSON,
    CountsByYearInnerToJSONTyped,
} from './CountsByYearInner';
import type { WorkSustainableDevelopmentGoalsInner } from './WorkSustainableDevelopmentGoalsInner';
import {
    WorkSustainableDevelopmentGoalsInnerFromJSON,
    WorkSustainableDevelopmentGoalsInnerFromJSONTyped,
    WorkSustainableDevelopmentGoalsInnerToJSON,
    WorkSustainableDevelopmentGoalsInnerToJSONTyped,
} from './WorkSustainableDevelopmentGoalsInner';
import type { DehydratedConcept } from './DehydratedConcept';
import {
    DehydratedConceptFromJSON,
    DehydratedConceptFromJSONTyped,
    DehydratedConceptToJSON,
    DehydratedConceptToJSONTyped,
} from './DehydratedConcept';
import type { WorkOpenAccess } from './WorkOpenAccess';
import {
    WorkOpenAccessFromJSON,
    WorkOpenAccessFromJSONTyped,
    WorkOpenAccessToJSON,
    WorkOpenAccessToJSONTyped,
} from './WorkOpenAccess';
import type { Apc } from './Apc';
import {
    ApcFromJSON,
    ApcFromJSONTyped,
    ApcToJSON,
    ApcToJSONTyped,
} from './Apc';
import type { AuthorshipsInner } from './AuthorshipsInner';
import {
    AuthorshipsInnerFromJSON,
    AuthorshipsInnerFromJSONTyped,
    AuthorshipsInnerToJSON,
    AuthorshipsInnerToJSONTyped,
} from './AuthorshipsInner';
import type { WorkKeywordsInner } from './WorkKeywordsInner';
import {
    WorkKeywordsInnerFromJSON,
    WorkKeywordsInnerFromJSONTyped,
    WorkKeywordsInnerToJSON,
    WorkKeywordsInnerToJSONTyped,
} from './WorkKeywordsInner';
import type { WorkMeshInner } from './WorkMeshInner';
import {
    WorkMeshInnerFromJSON,
    WorkMeshInnerFromJSONTyped,
    WorkMeshInnerToJSON,
    WorkMeshInnerToJSONTyped,
} from './WorkMeshInner';
import type { Ids } from './Ids';
import {
    IdsFromJSON,
    IdsFromJSONTyped,
    IdsToJSON,
    IdsToJSONTyped,
} from './Ids';
import type { WorkCitedByPercentileYear } from './WorkCitedByPercentileYear';
import {
    WorkCitedByPercentileYearFromJSON,
    WorkCitedByPercentileYearFromJSONTyped,
    WorkCitedByPercentileYearToJSON,
    WorkCitedByPercentileYearToJSONTyped,
} from './WorkCitedByPercentileYear';
import type { Location } from './Location';
import {
    LocationFromJSON,
    LocationFromJSONTyped,
    LocationToJSON,
    LocationToJSONTyped,
} from './Location';
import type { WorkBiblio } from './WorkBiblio';
import {
    WorkBiblioFromJSON,
    WorkBiblioFromJSONTyped,
    WorkBiblioToJSON,
    WorkBiblioToJSONTyped,
} from './WorkBiblio';

/**
 * 
 * @export
 * @interface Work
 */
export interface Work {
    /**
     * 
     * @type {object}
     * @memberof Work
     */
    abstract_inverted_index?: object;
    /**
     * 
     * @type {Apc}
     * @memberof Work
     */
    apc_list?: Apc;
    /**
     * 
     * @type {Apc}
     * @memberof Work
     */
    apc_paid?: Apc;
    /**
     * 
     * @type {Array<AuthorshipsInner>}
     * @memberof Work
     */
    authorships?: Array<AuthorshipsInner>;
    /**
     * 
     * @type {Location}
     * @memberof Work
     */
    best_oa_location?: Location;
    /**
     * 
     * @type {WorkBiblio}
     * @memberof Work
     */
    biblio?: WorkBiblio;
    /**
     * 
     * @type {string}
     * @memberof Work
     */
    cited_by_api_url?: string;
    /**
     * 
     * @type {number}
     * @memberof Work
     */
    cited_by_count?: number;
    /**
     * 
     * @type {WorkCitedByPercentileYear}
     * @memberof Work
     */
    cited_by_percentile_year?: WorkCitedByPercentileYear;
    /**
     * 
     * @type {Array<DehydratedConcept>}
     * @memberof Work
     */
    concepts?: Array<DehydratedConcept>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Work
     */
    corresponding_author_ids?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Work
     */
    corresponding_institution_ids?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof Work
     */
    countries_distinct_count?: number;
    /**
     * 
     * @type {Array<CountsByYearInner>}
     * @memberof Work
     */
    counts_by_year?: Array<CountsByYearInner>;
    /**
     * 
     * @type {string}
     * @memberof Work
     */
    created_date?: string;
    /**
     * 
     * @type {string}
     * @memberof Work
     */
    display_name: string;
    /**
     * 
     * @type {string}
     * @memberof Work
     */
    doi?: string;
    /**
     * 
     * @type {Array<WorkGrantsInner>}
     * @memberof Work
     */
    grants?: Array<WorkGrantsInner>;
    /**
     * 
     * @type {boolean}
     * @memberof Work
     */
    has_fulltext?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Work
     */
    id: string;
    /**
     * 
     * @type {Ids}
     * @memberof Work
     */
    ids?: Ids;
    /**
     * 
     * @type {number}
     * @memberof Work
     */
    institutions_distinct_count?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Work
     */
    is_paratext?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Work
     */
    is_retracted?: boolean;
    /**
     * 
     * @type {Array<WorkKeywordsInner>}
     * @memberof Work
     */
    keywords?: Array<WorkKeywordsInner>;
    /**
     * 
     * @type {string}
     * @memberof Work
     */
    language?: string;
    /**
     * 
     * @type {Array<Location>}
     * @memberof Work
     */
    locations?: Array<Location>;
    /**
     * 
     * @type {number}
     * @memberof Work
     */
    locations_count?: number;
    /**
     * 
     * @type {Array<WorkMeshInner>}
     * @memberof Work
     */
    mesh?: Array<WorkMeshInner>;
    /**
     * 
     * @type {string}
     * @memberof Work
     */
    ngrams_url?: string;
    /**
     * 
     * @type {WorkOpenAccess}
     * @memberof Work
     */
    open_access?: WorkOpenAccess;
    /**
     * 
     * @type {Location}
     * @memberof Work
     */
    primary_location?: Location;
    /**
     * 
     * @type {string}
     * @memberof Work
     */
    publication_date?: string;
    /**
     * 
     * @type {number}
     * @memberof Work
     */
    publication_year?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof Work
     */
    referenced_works?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof Work
     */
    referenced_works_count?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof Work
     */
    related_works?: Array<string>;
    /**
     * 
     * @type {Array<WorkSustainableDevelopmentGoalsInner>}
     * @memberof Work
     */
    sustainable_development_goals?: Array<WorkSustainableDevelopmentGoalsInner>;
    /**
     * 
     * @type {string}
     * @memberof Work
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof Work
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof Work
     */
    type_crossref?: string;
    /**
     * 
     * @type {string}
     * @memberof Work
     */
    updated_date?: string;
}

/**
 * Check if a given object implements the Work interface.
 */
export function instanceOfWork(value: object): value is Work {
    if (!('display_name' in value) || value['display_name'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    return true;
}

export function WorkFromJSON(json: any): Work {
    return WorkFromJSONTyped(json, false);
}

export function WorkFromJSONTyped(json: any, ignoreDiscriminator: boolean): Work {
    if (json == null) {
        return json;
    }
    return {
        
        'abstract_inverted_index': json['abstract_inverted_index'] == null ? undefined : json['abstract_inverted_index'],
        'apc_list': json['apc_list'] == null ? undefined : ApcFromJSON(json['apc_list']),
        'apc_paid': json['apc_paid'] == null ? undefined : ApcFromJSON(json['apc_paid']),
        'authorships': json['authorships'] == null ? undefined : ((json['authorships'] as Array<any>).map(AuthorshipsInnerFromJSON)),
        'best_oa_location': json['best_oa_location'] == null ? undefined : LocationFromJSON(json['best_oa_location']),
        'biblio': json['biblio'] == null ? undefined : WorkBiblioFromJSON(json['biblio']),
        'cited_by_api_url': json['cited_by_api_url'] == null ? undefined : json['cited_by_api_url'],
        'cited_by_count': json['cited_by_count'] == null ? undefined : json['cited_by_count'],
        'cited_by_percentile_year': json['cited_by_percentile_year'] == null ? undefined : WorkCitedByPercentileYearFromJSON(json['cited_by_percentile_year']),
        'concepts': json['concepts'] == null ? undefined : ((json['concepts'] as Array<any>).map(DehydratedConceptFromJSON)),
        'corresponding_author_ids': json['corresponding_author_ids'] == null ? undefined : json['corresponding_author_ids'],
        'corresponding_institution_ids': json['corresponding_institution_ids'] == null ? undefined : json['corresponding_institution_ids'],
        'countries_distinct_count': json['countries_distinct_count'] == null ? undefined : json['countries_distinct_count'],
        'counts_by_year': json['counts_by_year'] == null ? undefined : ((json['counts_by_year'] as Array<any>).map(CountsByYearInnerFromJSON)),
        'created_date': json['created_date'] == null ? undefined : json['created_date'],
        'display_name': json['display_name'],
        'doi': json['doi'] == null ? undefined : json['doi'],
        'grants': json['grants'] == null ? undefined : ((json['grants'] as Array<any>).map(WorkGrantsInnerFromJSON)),
        'has_fulltext': json['has_fulltext'] == null ? undefined : json['has_fulltext'],
        'id': json['id'],
        'ids': json['ids'] == null ? undefined : IdsFromJSON(json['ids']),
        'institutions_distinct_count': json['institutions_distinct_count'] == null ? undefined : json['institutions_distinct_count'],
        'is_paratext': json['is_paratext'] == null ? undefined : json['is_paratext'],
        'is_retracted': json['is_retracted'] == null ? undefined : json['is_retracted'],
        'keywords': json['keywords'] == null ? undefined : ((json['keywords'] as Array<any>).map(WorkKeywordsInnerFromJSON)),
        'language': json['language'] == null ? undefined : json['language'],
        'locations': json['locations'] == null ? undefined : ((json['locations'] as Array<any>).map(LocationFromJSON)),
        'locations_count': json['locations_count'] == null ? undefined : json['locations_count'],
        'mesh': json['mesh'] == null ? undefined : ((json['mesh'] as Array<any>).map(WorkMeshInnerFromJSON)),
        'ngrams_url': json['ngrams_url'] == null ? undefined : json['ngrams_url'],
        'open_access': json['open_access'] == null ? undefined : WorkOpenAccessFromJSON(json['open_access']),
        'primary_location': json['primary_location'] == null ? undefined : LocationFromJSON(json['primary_location']),
        'publication_date': json['publication_date'] == null ? undefined : json['publication_date'],
        'publication_year': json['publication_year'] == null ? undefined : json['publication_year'],
        'referenced_works': json['referenced_works'] == null ? undefined : json['referenced_works'],
        'referenced_works_count': json['referenced_works_count'] == null ? undefined : json['referenced_works_count'],
        'related_works': json['related_works'] == null ? undefined : json['related_works'],
        'sustainable_development_goals': json['sustainable_development_goals'] == null ? undefined : ((json['sustainable_development_goals'] as Array<any>).map(WorkSustainableDevelopmentGoalsInnerFromJSON)),
        'title': json['title'] == null ? undefined : json['title'],
        'type': json['type'] == null ? undefined : json['type'],
        'type_crossref': json['type_crossref'] == null ? undefined : json['type_crossref'],
        'updated_date': json['updated_date'] == null ? undefined : json['updated_date'],
    };
}

export function WorkToJSON(json: any): Work {
    return WorkToJSONTyped(json, false);
}

export function WorkToJSONTyped(value?: Work | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'abstract_inverted_index': value['abstract_inverted_index'],
        'apc_list': ApcToJSON(value['apc_list']),
        'apc_paid': ApcToJSON(value['apc_paid']),
        'authorships': value['authorships'] == null ? undefined : ((value['authorships'] as Array<any>).map(AuthorshipsInnerToJSON)),
        'best_oa_location': LocationToJSON(value['best_oa_location']),
        'biblio': WorkBiblioToJSON(value['biblio']),
        'cited_by_api_url': value['cited_by_api_url'],
        'cited_by_count': value['cited_by_count'],
        'cited_by_percentile_year': WorkCitedByPercentileYearToJSON(value['cited_by_percentile_year']),
        'concepts': value['concepts'] == null ? undefined : ((value['concepts'] as Array<any>).map(DehydratedConceptToJSON)),
        'corresponding_author_ids': value['corresponding_author_ids'],
        'corresponding_institution_ids': value['corresponding_institution_ids'],
        'countries_distinct_count': value['countries_distinct_count'],
        'counts_by_year': value['counts_by_year'] == null ? undefined : ((value['counts_by_year'] as Array<any>).map(CountsByYearInnerToJSON)),
        'created_date': value['created_date'],
        'display_name': value['display_name'],
        'doi': value['doi'],
        'grants': value['grants'] == null ? undefined : ((value['grants'] as Array<any>).map(WorkGrantsInnerToJSON)),
        'has_fulltext': value['has_fulltext'],
        'id': value['id'],
        'ids': IdsToJSON(value['ids']),
        'institutions_distinct_count': value['institutions_distinct_count'],
        'is_paratext': value['is_paratext'],
        'is_retracted': value['is_retracted'],
        'keywords': value['keywords'] == null ? undefined : ((value['keywords'] as Array<any>).map(WorkKeywordsInnerToJSON)),
        'language': value['language'],
        'locations': value['locations'] == null ? undefined : ((value['locations'] as Array<any>).map(LocationToJSON)),
        'locations_count': value['locations_count'],
        'mesh': value['mesh'] == null ? undefined : ((value['mesh'] as Array<any>).map(WorkMeshInnerToJSON)),
        'ngrams_url': value['ngrams_url'],
        'open_access': WorkOpenAccessToJSON(value['open_access']),
        'primary_location': LocationToJSON(value['primary_location']),
        'publication_date': value['publication_date'],
        'publication_year': value['publication_year'],
        'referenced_works': value['referenced_works'],
        'referenced_works_count': value['referenced_works_count'],
        'related_works': value['related_works'],
        'sustainable_development_goals': value['sustainable_development_goals'] == null ? undefined : ((value['sustainable_development_goals'] as Array<any>).map(WorkSustainableDevelopmentGoalsInnerToJSON)),
        'title': value['title'],
        'type': value['type'],
        'type_crossref': value['type_crossref'],
        'updated_date': value['updated_date'],
    };
}

