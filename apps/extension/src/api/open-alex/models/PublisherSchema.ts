/* tslint:disable */
/* eslint-disable */
/**
 * OpenAlex
 * ![](https://raw.githubusercontent.com/ourresearch/openalex-docs/main/.gitbook/assets/OpenAlex-logo-5.png)  **OpenAlex** is a fully open catalog of the global research system.  It\'s named after the [ancient Library of Alexandria](https://en.wikipedia.org/wiki/Library_of_Alexandria) and made by the nonprofit [OurResearch](https://ourresearch.org/).  ## OpenAPI Specification  [Mearman/openalex-api-spec](https://github.com/Mearman/openalex-api-spec)  This OpenAPI specification is reverse-engineered and derived from spec generated by [openapi-devtools](https://github.com/AndrewWalsh/openapi-devtools).  The specification document itself is OpenAPI version 3.1 and is generated from TypeScript source code.  [![Open in](https://img.shields.io/badge/Open%20in-Swagger%20UI-85EA2D?style=for-the-badge&logo=Swagger&link=https://mearman.github.io/openalex-swagger-ui-react/)](https://mearman.github.io/openalex-swagger-ui-react/)  **[Releases](https://github.com/Mearman/openalex-api-spec/releases)**  ## Clients  [![TypeScript](https://img.shields.io/badge/TypeScript-3178C6?style=for-the-badge&logo=TypeScript&logoColor=white&link=https://github.com/Mearman/openalex-typescript)](https://github.com/Mearman/openalex-typescript)  [![TypeScript Fetch](https://img.shields.io/badge/TypeScript%20Fetch-3178C6?style=for-the-badge&logo=TypeScript&logoColor=white&link=https://github.com/Mearman/openalex-typescript-fetch)](https://github.com/Mearman/openalex-typescript-fetch)  [![TypeScript Node](https://img.shields.io/badge/TypeScript%20Node-339933?style=for-the-badge&logo=Node.js&logoColor=white&link=https://github.com/Mearman/openalex-typescript-node)](https://github.com/Mearman/openalex-typescript-node)  [![Python](https://img.shields.io/badge/Python-3776AB?style=for-the-badge&logo=Python&logoColor=white&link=https://github.com/Mearman/openalex-python)](https://github.com/Mearman/openalex-python) [![Open in](https://img.shields.io/badge/Open%20in-CodeSpaces-181717?style=for-the-badge&logo=GitHub&link=https://codespaces.new/Mearman/openalex-python)](https://codespaces.new/Mearman/openalex-python) [![Open in](https://img.shields.io/badge/Open%20in-Colab-F9AB00?style=for-the-badge&logo=Google%20Colab&link=https://colab.research.google.com/github/Mearman/openalex-python/blob/main/README.ipynb)](https://colab.research.google.com/github/Mearman/openalex-python/blob/main/README.ipynb)  ---
 *
 * The version of the OpenAPI document: 0.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PublisherParentPublisher } from './PublisherParentPublisher';
import {
    PublisherParentPublisherFromJSON,
    PublisherParentPublisherFromJSONTyped,
    PublisherParentPublisherToJSON,
    PublisherParentPublisherToJSONTyped,
} from './PublisherParentPublisher';
import type { Role } from './Role';
import {
    RoleFromJSON,
    RoleFromJSONTyped,
    RoleToJSON,
    RoleToJSONTyped,
} from './Role';
import type { CountsByYearInner } from './CountsByYearInner';
import {
    CountsByYearInnerFromJSON,
    CountsByYearInnerFromJSONTyped,
    CountsByYearInnerToJSON,
    CountsByYearInnerToJSONTyped,
} from './CountsByYearInner';
import type { SummaryStats } from './SummaryStats';
import {
    SummaryStatsFromJSON,
    SummaryStatsFromJSONTyped,
    SummaryStatsToJSON,
    SummaryStatsToJSONTyped,
} from './SummaryStats';
import type { Ids } from './Ids';
import {
    IdsFromJSON,
    IdsFromJSONTyped,
    IdsToJSON,
    IdsToJSONTyped,
} from './Ids';

/**
 * 
 * @export
 * @interface PublisherSchema
 */
export interface PublisherSchema {
    /**
     * 
     * @type {Array<string>}
     * @memberof PublisherSchema
     */
    alternate_titles?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof PublisherSchema
     */
    cited_by_count?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof PublisherSchema
     */
    country_codes?: Array<string>;
    /**
     * 
     * @type {Array<CountsByYearInner>}
     * @memberof PublisherSchema
     */
    counts_by_year?: Array<CountsByYearInner>;
    /**
     * 
     * @type {string}
     * @memberof PublisherSchema
     */
    created_date?: string;
    /**
     * 
     * @type {string}
     * @memberof PublisherSchema
     */
    display_name: string;
    /**
     * 
     * @type {number}
     * @memberof PublisherSchema
     */
    hierarchy_level?: number;
    /**
     * 
     * @type {string}
     * @memberof PublisherSchema
     */
    homepage_url?: string;
    /**
     * 
     * @type {string}
     * @memberof PublisherSchema
     */
    id: string;
    /**
     * 
     * @type {Ids}
     * @memberof PublisherSchema
     */
    ids?: Ids;
    /**
     * 
     * @type {string}
     * @memberof PublisherSchema
     */
    image_thumbnail_url?: string;
    /**
     * 
     * @type {string}
     * @memberof PublisherSchema
     */
    image_url?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PublisherSchema
     */
    lineage?: Array<string>;
    /**
     * 
     * @type {PublisherParentPublisher}
     * @memberof PublisherSchema
     */
    parent_publisher?: PublisherParentPublisher;
    /**
     * 
     * @type {Array<Role>}
     * @memberof PublisherSchema
     */
    roles?: Array<Role>;
    /**
     * 
     * @type {string}
     * @memberof PublisherSchema
     */
    sources_api_url?: string;
    /**
     * 
     * @type {SummaryStats}
     * @memberof PublisherSchema
     */
    summary_stats?: SummaryStats;
    /**
     * 
     * @type {string}
     * @memberof PublisherSchema
     */
    updated_date?: string;
    /**
     * 
     * @type {number}
     * @memberof PublisherSchema
     */
    works_count?: number;
}

/**
 * Check if a given object implements the PublisherSchema interface.
 */
export function instanceOfPublisherSchema(value: object): value is PublisherSchema {
    if (!('display_name' in value) || value['display_name'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    return true;
}

export function PublisherSchemaFromJSON(json: any): PublisherSchema {
    return PublisherSchemaFromJSONTyped(json, false);
}

export function PublisherSchemaFromJSONTyped(json: any, ignoreDiscriminator: boolean): PublisherSchema {
    if (json == null) {
        return json;
    }
    return {
        
        'alternate_titles': json['alternate_titles'] == null ? undefined : json['alternate_titles'],
        'cited_by_count': json['cited_by_count'] == null ? undefined : json['cited_by_count'],
        'country_codes': json['country_codes'] == null ? undefined : json['country_codes'],
        'counts_by_year': json['counts_by_year'] == null ? undefined : ((json['counts_by_year'] as Array<any>).map(CountsByYearInnerFromJSON)),
        'created_date': json['created_date'] == null ? undefined : json['created_date'],
        'display_name': json['display_name'],
        'hierarchy_level': json['hierarchy_level'] == null ? undefined : json['hierarchy_level'],
        'homepage_url': json['homepage_url'] == null ? undefined : json['homepage_url'],
        'id': json['id'],
        'ids': json['ids'] == null ? undefined : IdsFromJSON(json['ids']),
        'image_thumbnail_url': json['image_thumbnail_url'] == null ? undefined : json['image_thumbnail_url'],
        'image_url': json['image_url'] == null ? undefined : json['image_url'],
        'lineage': json['lineage'] == null ? undefined : json['lineage'],
        'parent_publisher': json['parent_publisher'] == null ? undefined : PublisherParentPublisherFromJSON(json['parent_publisher']),
        'roles': json['roles'] == null ? undefined : ((json['roles'] as Array<any>).map(RoleFromJSON)),
        'sources_api_url': json['sources_api_url'] == null ? undefined : json['sources_api_url'],
        'summary_stats': json['summary_stats'] == null ? undefined : SummaryStatsFromJSON(json['summary_stats']),
        'updated_date': json['updated_date'] == null ? undefined : json['updated_date'],
        'works_count': json['works_count'] == null ? undefined : json['works_count'],
    };
}

export function PublisherSchemaToJSON(json: any): PublisherSchema {
    return PublisherSchemaToJSONTyped(json, false);
}

export function PublisherSchemaToJSONTyped(value?: PublisherSchema | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'alternate_titles': value['alternate_titles'],
        'cited_by_count': value['cited_by_count'],
        'country_codes': value['country_codes'],
        'counts_by_year': value['counts_by_year'] == null ? undefined : ((value['counts_by_year'] as Array<any>).map(CountsByYearInnerToJSON)),
        'created_date': value['created_date'],
        'display_name': value['display_name'],
        'hierarchy_level': value['hierarchy_level'],
        'homepage_url': value['homepage_url'],
        'id': value['id'],
        'ids': IdsToJSON(value['ids']),
        'image_thumbnail_url': value['image_thumbnail_url'],
        'image_url': value['image_url'],
        'lineage': value['lineage'],
        'parent_publisher': PublisherParentPublisherToJSON(value['parent_publisher']),
        'roles': value['roles'] == null ? undefined : ((value['roles'] as Array<any>).map(RoleToJSON)),
        'sources_api_url': value['sources_api_url'],
        'summary_stats': SummaryStatsToJSON(value['summary_stats']),
        'updated_date': value['updated_date'],
        'works_count': value['works_count'],
    };
}

