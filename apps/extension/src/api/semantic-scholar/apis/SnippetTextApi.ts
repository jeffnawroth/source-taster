/* tslint:disable */
/* eslint-disable */
/**
 * Academic Graph API
 * Fetch paper and author data from the Semantic Scholar Academic Graph (S2AG).         <br><br>         Some things to note:         <ul>         <li>If you are using an API key, it must be set in the header <code>x-api-key</code> (case-sensitive).</li>         <li>We have two different IDs for a single paper:           <ul>             <li><code>paperId</code> - string - The primary way to identify papers when using our website or this API</li>             <li><code>corpusId</code> - int64 - A second way to identify papers. Our datasets use corpusId when pointing to papers.</li>           </ul>         </li>         <li>Other useful resources<ul>         <li><a href=\"https://www.semanticscholar.org/product/api\">Overview</a></li>         <li><a href=\"https://github.com/allenai/s2-folks/\">allenai/s2-folks</a></li>         <li><a href=\"https://github.com/allenai/s2-folks/blob/main/FAQ.md\">FAQ</a> in allenai/s2folks</li>         </ul></li>         
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Error400,
  SnippetMatch,
} from '../models/index';
import {
    Error400FromJSON,
    Error400ToJSON,
    SnippetMatchFromJSON,
    SnippetMatchToJSON,
} from '../models/index';

export interface GetSnippetSearchRequest {
    query: string;
    fields?: string;
    paperIds?: string;
    minCitationCount?: string;
    insertedBefore?: string;
    publicationDateOrYear?: string;
    year?: string;
    venue?: string;
    fieldsOfStudy?: string;
    limit?: number;
}

/**
 * 
 */
export class SnippetTextApi extends runtime.BaseAPI {

    /**
     * Return the text snippets that most closely match the query. Text snippets are excerpts of approximately 500 words, drawn from a paper\'s title, abstract, and body text, but excluding figure captions and the bibliography. It will return the highest ranked snippet first, as well as some basic data about the paper it was found in. Examples: <ul>   <li><code>https://api.semanticscholar.org/graph/v1/snippet/search?query=The literature graph is a property graph with directed edges&limit=1</code></li>   <ul>     <li>Returns a single snippet that is the highest ranked match.</li>     <li>Each snippet has text, snippetKind, section, annotation data, and score. As well as the following data about the paper it comes from: corpusId, title, authors, and openAccessInfo.</li>   </ul> </ul>   <br>     Limitations:     <ul>         <li>You must include a query.</li>         <li>If you don\'t set a limit, it will automatically return 10 results.</li>         <li>The max limit allowed is 1000.</li>     </ul> </ul>
     * Text snippet search
     */
    async getSnippetSearchRaw(requestParameters: GetSnippetSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SnippetMatch>> {
        if (requestParameters['query'] == null) {
            throw new runtime.RequiredError(
                'query',
                'Required parameter "query" was null or undefined when calling getSnippetSearch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        if (requestParameters['paperIds'] != null) {
            queryParameters['paperIds'] = requestParameters['paperIds'];
        }

        if (requestParameters['minCitationCount'] != null) {
            queryParameters['minCitationCount'] = requestParameters['minCitationCount'];
        }

        if (requestParameters['insertedBefore'] != null) {
            queryParameters['insertedBefore'] = requestParameters['insertedBefore'];
        }

        if (requestParameters['publicationDateOrYear'] != null) {
            queryParameters['publicationDateOrYear'] = requestParameters['publicationDateOrYear'];
        }

        if (requestParameters['year'] != null) {
            queryParameters['year'] = requestParameters['year'];
        }

        if (requestParameters['venue'] != null) {
            queryParameters['venue'] = requestParameters['venue'];
        }

        if (requestParameters['fieldsOfStudy'] != null) {
            queryParameters['fieldsOfStudy'] = requestParameters['fieldsOfStudy'];
        }

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/snippet/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SnippetMatchFromJSON(jsonValue));
    }

    /**
     * Return the text snippets that most closely match the query. Text snippets are excerpts of approximately 500 words, drawn from a paper\'s title, abstract, and body text, but excluding figure captions and the bibliography. It will return the highest ranked snippet first, as well as some basic data about the paper it was found in. Examples: <ul>   <li><code>https://api.semanticscholar.org/graph/v1/snippet/search?query=The literature graph is a property graph with directed edges&limit=1</code></li>   <ul>     <li>Returns a single snippet that is the highest ranked match.</li>     <li>Each snippet has text, snippetKind, section, annotation data, and score. As well as the following data about the paper it comes from: corpusId, title, authors, and openAccessInfo.</li>   </ul> </ul>   <br>     Limitations:     <ul>         <li>You must include a query.</li>         <li>If you don\'t set a limit, it will automatically return 10 results.</li>         <li>The max limit allowed is 1000.</li>     </ul> </ul>
     * Text snippet search
     */
    async getSnippetSearch(requestParameters: GetSnippetSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SnippetMatch> {
        const response = await this.getSnippetSearchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
