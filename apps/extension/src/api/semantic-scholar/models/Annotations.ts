/* tslint:disable */
/* eslint-disable */
/**
 * Academic Graph API
 * Fetch paper and author data from the Semantic Scholar Academic Graph (S2AG).         <br><br>         Some things to note:         <ul>         <li>If you are using an API key, it must be set in the header <code>x-api-key</code> (case-sensitive).</li>         <li>We have two different IDs for a single paper:           <ul>             <li><code>paperId</code> - string - The primary way to identify papers when using our website or this API</li>             <li><code>corpusId</code> - int64 - A second way to identify papers. Our datasets use corpusId when pointing to papers.</li>           </ul>         </li>         <li>Other useful resources<ul>         <li><a href=\"https://www.semanticscholar.org/product/api\">Overview</a></li>         <li><a href=\"https://github.com/allenai/s2-folks/\">allenai/s2-folks</a></li>         <li><a href=\"https://github.com/allenai/s2-folks/blob/main/FAQ.md\">FAQ</a> in allenai/s2folks</li>         </ul></li>         
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RefMention } from './RefMention';
import {
    RefMentionFromJSON,
    RefMentionFromJSONTyped,
    RefMentionToJSON,
    RefMentionToJSONTyped,
} from './RefMention';
import type { Sentence } from './Sentence';
import {
    SentenceFromJSON,
    SentenceFromJSONTyped,
    SentenceToJSON,
    SentenceToJSONTyped,
} from './Sentence';

/**
 * 
 * @export
 * @interface Annotations
 */
export interface Annotations {
    /**
     * 
     * @type {Array<Sentence>}
     * @memberof Annotations
     */
    sentences?: Array<Sentence>;
    /**
     * 
     * @type {Array<RefMention>}
     * @memberof Annotations
     */
    refMentions?: Array<RefMention>;
}

/**
 * Check if a given object implements the Annotations interface.
 */
export function instanceOfAnnotations(value: object): value is Annotations {
    return true;
}

export function AnnotationsFromJSON(json: any): Annotations {
    return AnnotationsFromJSONTyped(json, false);
}

export function AnnotationsFromJSONTyped(json: any, ignoreDiscriminator: boolean): Annotations {
    if (json == null) {
        return json;
    }
    return {
        
        'sentences': json['sentences'] == null ? undefined : ((json['sentences'] as Array<any>).map(SentenceFromJSON)),
        'refMentions': json['refMentions'] == null ? undefined : ((json['refMentions'] as Array<any>).map(RefMentionFromJSON)),
    };
}

export function AnnotationsToJSON(json: any): Annotations {
    return AnnotationsToJSONTyped(json, false);
}

export function AnnotationsToJSONTyped(value?: Annotations | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'sentences': value['sentences'] == null ? undefined : ((value['sentences'] as Array<any>).map(SentenceToJSON)),
        'refMentions': value['refMentions'] == null ? undefined : ((value['refMentions'] as Array<any>).map(RefMentionToJSON)),
    };
}

