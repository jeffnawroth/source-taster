/* tslint:disable */
/* eslint-disable */
/**
 * Academic Graph API
 * Fetch paper and author data from the Semantic Scholar Academic Graph (S2AG).         <br><br>         Some things to note:         <ul>         <li>If you are using an API key, it must be set in the header <code>x-api-key</code> (case-sensitive).</li>         <li>We have two different IDs for a single paper:           <ul>             <li><code>paperId</code> - string - The primary way to identify papers when using our website or this API</li>             <li><code>corpusId</code> - int64 - A second way to identify papers. Our datasets use corpusId when pointing to papers.</li>           </ul>         </li>         <li>Other useful resources<ul>         <li><a href=\"https://www.semanticscholar.org/product/api\">Overview</a></li>         <li><a href=\"https://github.com/allenai/s2-folks/\">allenai/s2-folks</a></li>         <li><a href=\"https://github.com/allenai/s2-folks/blob/main/FAQ.md\">FAQ</a> in allenai/s2folks</li>         </ul></li>         
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AuthorWithPapers } from './AuthorWithPapers';
import {
    AuthorWithPapersFromJSON,
    AuthorWithPapersFromJSONTyped,
    AuthorWithPapersToJSON,
    AuthorWithPapersToJSONTyped,
} from './AuthorWithPapers';

/**
 * 
 * @export
 * @interface AuthorBatch
 */
export interface AuthorBatch {
    /**
     * Starting position for this batch.
     * @type {number}
     * @memberof AuthorBatch
     */
    offset?: number;
    /**
     * Starting position of the next batch. Absent if no more data exists.
     * @type {number}
     * @memberof AuthorBatch
     */
    next?: number;
    /**
     * 
     * @type {Array<AuthorWithPapers>}
     * @memberof AuthorBatch
     */
    data?: Array<AuthorWithPapers>;
}

/**
 * Check if a given object implements the AuthorBatch interface.
 */
export function instanceOfAuthorBatch(value: object): value is AuthorBatch {
    return true;
}

export function AuthorBatchFromJSON(json: any): AuthorBatch {
    return AuthorBatchFromJSONTyped(json, false);
}

export function AuthorBatchFromJSONTyped(json: any, ignoreDiscriminator: boolean): AuthorBatch {
    if (json == null) {
        return json;
    }
    return {
        
        'offset': json['offset'] == null ? undefined : json['offset'],
        'next': json['next'] == null ? undefined : json['next'],
        'data': json['data'] == null ? undefined : ((json['data'] as Array<any>).map(AuthorWithPapersFromJSON)),
    };
}

export function AuthorBatchToJSON(json: any): AuthorBatch {
    return AuthorBatchToJSONTyped(json, false);
}

export function AuthorBatchToJSONTyped(value?: AuthorBatch | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'offset': value['offset'],
        'next': value['next'],
        'data': value['data'] == null ? undefined : ((value['data'] as Array<any>).map(AuthorWithPapersToJSON)),
    };
}

