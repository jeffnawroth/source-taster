/* tslint:disable */
/* eslint-disable */
/**
 * Academic Graph API
 * Fetch paper and author data from the Semantic Scholar Academic Graph (S2AG).         <br><br>         Some things to note:         <ul>         <li>If you are using an API key, it must be set in the header <code>x-api-key</code> (case-sensitive).</li>         <li>We have two different IDs for a single paper:           <ul>             <li><code>paperId</code> - string - The primary way to identify papers when using our website or this API</li>             <li><code>corpusId</code> - int64 - A second way to identify papers. Our datasets use corpusId when pointing to papers.</li>           </ul>         </li>         <li>Other useful resources<ul>         <li><a href=\"https://www.semanticscholar.org/product/api\">Overview</a></li>         <li><a href=\"https://github.com/allenai/s2-folks/\">allenai/s2-folks</a></li>         <li><a href=\"https://github.com/allenai/s2-folks/blob/main/FAQ.md\">FAQ</a> in allenai/s2folks</li>         </ul></li>         
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Paper } from './Paper';
import {
    PaperFromJSON,
    PaperFromJSONTyped,
    PaperToJSON,
    PaperToJSONTyped,
} from './Paper';
import type { Snippet } from './Snippet';
import {
    SnippetFromJSON,
    SnippetFromJSONTyped,
    SnippetToJSON,
    SnippetToJSONTyped,
} from './Snippet';

/**
 * 
 * @export
 * @interface Snippet Match
 */
export interface SnippetMatch {
    /**
     * 
     * @type {Snippet}
     * @memberof Snippet Match
     */
    snippet?: Snippet;
    /**
     * 
     * @type {number}
     * @memberof Snippet Match
     */
    score?: number;
    /**
     * 
     * @type {Paper}
     * @memberof Snippet Match
     */
    paper?: Paper;
}

/**
 * Check if a given object implements the Snippet Match interface.
 */
export function instanceOfSnippetMatch(value: object): value is SnippetMatch {
    return true;
}

export function SnippetMatchFromJSON(json: any): SnippetMatch {
    return SnippetMatchFromJSONTyped(json, false);
}

export function SnippetMatchFromJSONTyped(json: any, ignoreDiscriminator: boolean): SnippetMatch {
    if (json == null) {
        return json;
    }
    return {
        
        'snippet': json['snippet'] == null ? undefined : SnippetFromJSON(json['snippet']),
        'score': json['score'] == null ? undefined : json['score'],
        'paper': json['paper'] == null ? undefined : PaperFromJSON(json['paper']),
    };
}

export function SnippetMatchToJSON(json: any): SnippetMatch {
    return SnippetMatchToJSONTyped(json, false);
}

export function SnippetMatchToJSONTyped(value?: SnippetMatch | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'snippet': SnippetToJSON(value['snippet']),
        'score': value['score'],
        'paper': PaperToJSON(value['paper']),
    };
}

