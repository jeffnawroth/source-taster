/* tslint:disable */
/* eslint-disable */
/**
 * Academic Graph API
 * Fetch paper and author data from the Semantic Scholar Academic Graph (S2AG).         <br><br>         Some things to note:         <ul>         <li>If you are using an API key, it must be set in the header <code>x-api-key</code> (case-sensitive).</li>         <li>We have two different IDs for a single paper:           <ul>             <li><code>paperId</code> - string - The primary way to identify papers when using our website or this API</li>             <li><code>corpusId</code> - int64 - A second way to identify papers. Our datasets use corpusId when pointing to papers.</li>           </ul>         </li>         <li>Other useful resources<ul>         <li><a href=\"https://www.semanticscholar.org/product/api\">Overview</a></li>         <li><a href=\"https://github.com/allenai/s2-folks/\">allenai/s2-folks</a></li>         <li><a href=\"https://github.com/allenai/s2-folks/blob/main/FAQ.md\">FAQ</a> in allenai/s2folks</li>         </ul></li>         
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AuthorInfo } from './AuthorInfo';
import {
    AuthorInfoFromJSON,
    AuthorInfoFromJSONTyped,
    AuthorInfoToJSON,
    AuthorInfoToJSONTyped,
} from './AuthorInfo';

/**
 * 
 * @export
 * @interface PaperInfo
 */
export interface PaperInfo {
    /**
     * Semantic Scholar’s primary unique identifier for a paper.
     * @type {string}
     * @memberof PaperInfo
     */
    paperId?: string;
    /**
     * Semantic Scholar’s secondary unique identifier for a paper.
     * @type {number}
     * @memberof PaperInfo
     */
    corpusId?: number;
    /**
     * URL of the paper on the Semantic Scholar website.
     * @type {string}
     * @memberof PaperInfo
     */
    url?: string;
    /**
     * Title of the paper.
     * @type {string}
     * @memberof PaperInfo
     */
    title?: string;
    /**
     * The name of the paper’s publication venue.
     * @type {string}
     * @memberof PaperInfo
     */
    venue?: string;
    /**
     * An object that contains the following information about the journal or conference in which this paper was published: id (the venue’s unique ID), name (the venue’s name), type (the type of venue), alternate_names (an array of alternate names for the venue), and url (the venue’s website).
     * @type {object}
     * @memberof PaperInfo
     */
    publicationVenue?: object;
    /**
     * The year the paper was published.
     * @type {number}
     * @memberof PaperInfo
     */
    year?: number;
    /**
     * Details about the paper's authors
     * @type {Array<AuthorInfo>}
     * @memberof PaperInfo
     */
    authors?: Array<AuthorInfo>;
}

/**
 * Check if a given object implements the PaperInfo interface.
 */
export function instanceOfPaperInfo(value: object): value is PaperInfo {
    return true;
}

export function PaperInfoFromJSON(json: any): PaperInfo {
    return PaperInfoFromJSONTyped(json, false);
}

export function PaperInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): PaperInfo {
    if (json == null) {
        return json;
    }
    return {
        
        'paperId': json['paperId'] == null ? undefined : json['paperId'],
        'corpusId': json['corpusId'] == null ? undefined : json['corpusId'],
        'url': json['url'] == null ? undefined : json['url'],
        'title': json['title'] == null ? undefined : json['title'],
        'venue': json['venue'] == null ? undefined : json['venue'],
        'publicationVenue': json['publicationVenue'] == null ? undefined : json['publicationVenue'],
        'year': json['year'] == null ? undefined : json['year'],
        'authors': json['authors'] == null ? undefined : ((json['authors'] as Array<any>).map(AuthorInfoFromJSON)),
    };
}

export function PaperInfoToJSON(json: any): PaperInfo {
    return PaperInfoToJSONTyped(json, false);
}

export function PaperInfoToJSONTyped(value?: PaperInfo | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'paperId': value['paperId'],
        'corpusId': value['corpusId'],
        'url': value['url'],
        'title': value['title'],
        'venue': value['venue'],
        'publicationVenue': value['publicationVenue'],
        'year': value['year'],
        'authors': value['authors'] == null ? undefined : ((value['authors'] as Array<any>).map(AuthorInfoToJSON)),
    };
}

