/* tslint:disable */
/* eslint-disable */
/**
 * Academic Graph API
 * Fetch paper and author data from the Semantic Scholar Academic Graph (S2AG).         <br><br>         Some things to note:         <ul>         <li>If you are using an API key, it must be set in the header <code>x-api-key</code> (case-sensitive).</li>         <li>We have two different IDs for a single paper:           <ul>             <li><code>paperId</code> - string - The primary way to identify papers when using our website or this API</li>             <li><code>corpusId</code> - int64 - A second way to identify papers. Our datasets use corpusId when pointing to papers.</li>           </ul>         </li>         <li>Other useful resources<ul>         <li><a href=\"https://www.semanticscholar.org/product/api\">Overview</a></li>         <li><a href=\"https://github.com/allenai/s2-folks/\">allenai/s2-folks</a></li>         <li><a href=\"https://github.com/allenai/s2-folks/blob/main/FAQ.md\">FAQ</a> in allenai/s2folks</li>         </ul></li>         
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthorIdList,
  AuthorPaperBatch,
  AuthorSearchBatch,
  AuthorWithPapers,
  Error400,
  Error404,
} from '../models/index';
import {
    AuthorIdListFromJSON,
    AuthorIdListToJSON,
    AuthorPaperBatchFromJSON,
    AuthorPaperBatchToJSON,
    AuthorSearchBatchFromJSON,
    AuthorSearchBatchToJSON,
    AuthorWithPapersFromJSON,
    AuthorWithPapersToJSON,
    Error400FromJSON,
    Error400ToJSON,
    Error404FromJSON,
    Error404ToJSON,
} from '../models/index';

export interface GetGraphGetAuthorRequest {
    authorId: string;
    fields?: string;
}

export interface GetGraphGetAuthorPapersRequest {
    authorId: string;
    offset?: number;
    limit?: number;
    fields?: string;
}

export interface GetGraphGetAuthorSearchRequest {
    query: string;
    offset?: number;
    limit?: number;
    fields?: string;
}

export interface PostGraphGetAuthorsRequest {
    payload: AuthorIdList;
    fields?: string;
}

/**
 * 
 */
export class AuthorDataApi extends runtime.BaseAPI {

    /**
     * Examples: <ul>     <li><code>https://api.semanticscholar.org/graph/v1/author/1741101</code></li>     <ul>         <li>Returns the author\'s authorId and name.</li>     </ul>     <li><code>https://api.semanticscholar.org/graph/v1/author/1741101?fields=url,papers</code></li>     <ul>         <li>Returns the author\'s authorId, url, and list of papers.  </li>         <li>Each paper has its paperId plus its title.</li>     </ul>     <li><code>https://api.semanticscholar.org/graph/v1/author/1741101?fields=url,papers.abstract,papers.authors</code></li>     <ul>         <li>Returns the author\'s authorId, url, and list of papers.  </li>         <li>Each paper has its paperId, abstract, and list of authors.</li>         <li>In that list of authors, each author has their authorId and name.</li>     </ul>     <br>     Limitations:     <ul>         <li>Can only return up to 10 MB of data at a time.</li>     </ul> </ul>
     * Details about an author
     */
    async getGraphGetAuthorRaw(requestParameters: GetGraphGetAuthorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthorWithPapers>> {
        if (requestParameters['authorId'] == null) {
            throw new runtime.RequiredError(
                'authorId',
                'Required parameter "authorId" was null or undefined when calling getGraphGetAuthor().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/author/{author_id}`.replace(`{${"author_id"}}`, encodeURIComponent(String(requestParameters['authorId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthorWithPapersFromJSON(jsonValue));
    }

    /**
     * Examples: <ul>     <li><code>https://api.semanticscholar.org/graph/v1/author/1741101</code></li>     <ul>         <li>Returns the author\'s authorId and name.</li>     </ul>     <li><code>https://api.semanticscholar.org/graph/v1/author/1741101?fields=url,papers</code></li>     <ul>         <li>Returns the author\'s authorId, url, and list of papers.  </li>         <li>Each paper has its paperId plus its title.</li>     </ul>     <li><code>https://api.semanticscholar.org/graph/v1/author/1741101?fields=url,papers.abstract,papers.authors</code></li>     <ul>         <li>Returns the author\'s authorId, url, and list of papers.  </li>         <li>Each paper has its paperId, abstract, and list of authors.</li>         <li>In that list of authors, each author has their authorId and name.</li>     </ul>     <br>     Limitations:     <ul>         <li>Can only return up to 10 MB of data at a time.</li>     </ul> </ul>
     * Details about an author
     */
    async getGraphGetAuthor(requestParameters: GetGraphGetAuthorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthorWithPapers> {
        const response = await this.getGraphGetAuthorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetch the papers of an author in batches.<br> Only retrieves the most recent 10,000 citations/references for papers belonging to the batch.<br> To retrieve the full set of citations for a paper, use the /paper/{paper_id}/citations endpoint <br><br> Examples: <ul>     <li><code>https://api.semanticscholar.org/graph/v1/author/1741101/papers</code></li>     <ul>         <li>Return with offset=0, and data is a list of the first 100 papers.</li>         <li>Each paper has its paperId and title.</li>     </ul>     <li><code>https://api.semanticscholar.org/graph/v1/author/1741101/papers?fields=url,year,authors&limit=2</code></li>     <ul>         <li>Returns with offset=0, next=2, and data is a list of 2 papers.</li>         <li>Each paper has its paperId, url, year, and list of authors.</li>         <li>Each author has their authorId and name.</li>     </ul>     <li><code>https://api.semanticscholar.org/graph/v1/author/1741101/papers?fields=citations.authors&offset=260</code></li>     <ul>         <li>Returns with offset=260, and data is a list of the last 4 papers.</li>         <li>Each paper has its paperId and a list of citations.</li>         <li>Each citation has its paperId and a list of authors.</li>         <li>Each author has their authorId and name.</li>     </ul> </ul>
     * Details about an author\'s papers
     */
    async getGraphGetAuthorPapersRaw(requestParameters: GetGraphGetAuthorPapersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthorPaperBatch>> {
        if (requestParameters['authorId'] == null) {
            throw new runtime.RequiredError(
                'authorId',
                'Required parameter "authorId" was null or undefined when calling getGraphGetAuthorPapers().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/author/{author_id}/papers`.replace(`{${"author_id"}}`, encodeURIComponent(String(requestParameters['authorId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthorPaperBatchFromJSON(jsonValue));
    }

    /**
     * Fetch the papers of an author in batches.<br> Only retrieves the most recent 10,000 citations/references for papers belonging to the batch.<br> To retrieve the full set of citations for a paper, use the /paper/{paper_id}/citations endpoint <br><br> Examples: <ul>     <li><code>https://api.semanticscholar.org/graph/v1/author/1741101/papers</code></li>     <ul>         <li>Return with offset=0, and data is a list of the first 100 papers.</li>         <li>Each paper has its paperId and title.</li>     </ul>     <li><code>https://api.semanticscholar.org/graph/v1/author/1741101/papers?fields=url,year,authors&limit=2</code></li>     <ul>         <li>Returns with offset=0, next=2, and data is a list of 2 papers.</li>         <li>Each paper has its paperId, url, year, and list of authors.</li>         <li>Each author has their authorId and name.</li>     </ul>     <li><code>https://api.semanticscholar.org/graph/v1/author/1741101/papers?fields=citations.authors&offset=260</code></li>     <ul>         <li>Returns with offset=260, and data is a list of the last 4 papers.</li>         <li>Each paper has its paperId and a list of citations.</li>         <li>Each citation has its paperId and a list of authors.</li>         <li>Each author has their authorId and name.</li>     </ul> </ul>
     * Details about an author\'s papers
     */
    async getGraphGetAuthorPapers(requestParameters: GetGraphGetAuthorPapersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthorPaperBatch> {
        const response = await this.getGraphGetAuthorPapersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Specifying <code>papers</code> fields in the request will return all papers linked to each author in the results. Set a <code>limit</code> on the search results to reduce output size and latency.<br><br> Examples: <ul>     <li><code>https://api.semanticscholar.org/graph/v1/author/search?query=adam+smith</code></li>     <ul>         <li>Returns with total=490, offset=0, next=100, and data is a list of 100 authors.</li>         <li>Each author has their authorId and name. </li>     </ul>     <li><code>https://api.semanticscholar.org/graph/v1/author/search?query=adam+smith&fields=name,url,papers.title,papers.year&limit=5</code></li>     <ul>         <li>Returns with total=490, offset=0, next=5, and data is a list of 5 authors.</li>         <li>Each author has authorId, name, url, and a list of their papers title and year.</li>     </ul>     <li><code>https://api.semanticscholar.org/graph/v1/author/search?query=totalGarbageNonsense</code></li>     <ul>         <li>Returns with total = 0, offset=0, and data is a list of 0 author.</li>     </ul>     <br>     Limitations: <ul>     <li>Can only return up to 10 MB of data at a time.</li> </ul>
     * Search for authors by name
     */
    async getGraphGetAuthorSearchRaw(requestParameters: GetGraphGetAuthorSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthorSearchBatch>> {
        if (requestParameters['query'] == null) {
            throw new runtime.RequiredError(
                'query',
                'Required parameter "query" was null or undefined when calling getGraphGetAuthorSearch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/author/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthorSearchBatchFromJSON(jsonValue));
    }

    /**
     * Specifying <code>papers</code> fields in the request will return all papers linked to each author in the results. Set a <code>limit</code> on the search results to reduce output size and latency.<br><br> Examples: <ul>     <li><code>https://api.semanticscholar.org/graph/v1/author/search?query=adam+smith</code></li>     <ul>         <li>Returns with total=490, offset=0, next=100, and data is a list of 100 authors.</li>         <li>Each author has their authorId and name. </li>     </ul>     <li><code>https://api.semanticscholar.org/graph/v1/author/search?query=adam+smith&fields=name,url,papers.title,papers.year&limit=5</code></li>     <ul>         <li>Returns with total=490, offset=0, next=5, and data is a list of 5 authors.</li>         <li>Each author has authorId, name, url, and a list of their papers title and year.</li>     </ul>     <li><code>https://api.semanticscholar.org/graph/v1/author/search?query=totalGarbageNonsense</code></li>     <ul>         <li>Returns with total = 0, offset=0, and data is a list of 0 author.</li>     </ul>     <br>     Limitations: <ul>     <li>Can only return up to 10 MB of data at a time.</li> </ul>
     * Search for authors by name
     */
    async getGraphGetAuthorSearch(requestParameters: GetGraphGetAuthorSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthorSearchBatch> {
        const response = await this.getGraphGetAuthorSearchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * * Fields is a single-value string parameter, not a multi-value one. * It is a query parameter, not to be submitted in the POST request\'s body.  In python:      r = requests.post(         \'https://api.semanticscholar.org/graph/v1/author/batch\',         params={\'fields\': \'name,hIndex,citationCount\'},         json={\"ids\":[\"1741101\", \"1780531\"]}     )     print(json.dumps(r.json(), indent=2))      [       {         \"authorId\": \"1741101\",         \"name\": \"Oren Etzioni\",         \"citationCount\": 34803,         \"hIndex\": 86       },       {         \"authorId\": \"1780531\",         \"name\": \"Daniel S. Weld\",         \"citationCount\": 35526,         \"hIndex\": 89       }     ]  Other Examples: <ul>     <li><code>https://api.semanticscholar.org/graph/v1/author/batch</code></li>     <ul>         <li><code>{\"ids\":[\"1741101\", \"1780531\", \"48323507\"]}</code></li>         <li>Returns details for 3 authors.</li>         <li>Each author returns the field authorId and name if no other fields are specified.</li>     </ul>     <li><code>https://api.semanticscholar.org/graph/v1/author/batch?fields=url,name,paperCount,papers,papers.title,papers.openAccessPdf</code></li>     <ul>         <li><code>{\"ids\":[\"1741101\", \"1780531\", \"48323507\"]}</code></li>         <li>Returns authorID, url, name, paperCount, and list of papers for 3 authors.</li>         <li>Each paper has its paperID, title, and link if available.</li>     </ul> </ul> <br> Limitations: <ul>     <li>Can only process 1,000 author ids at a time.</li>     <li>Can only return up to 10 MB of data at a time.</li> </ul>
     * Get details for multiple authors at once
     */
    async postGraphGetAuthorsRaw(requestParameters: PostGraphGetAuthorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthorWithPapers>> {
        if (requestParameters['payload'] == null) {
            throw new runtime.RequiredError(
                'payload',
                'Required parameter "payload" was null or undefined when calling postGraphGetAuthors().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/author/batch`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthorIdListToJSON(requestParameters['payload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthorWithPapersFromJSON(jsonValue));
    }

    /**
     * * Fields is a single-value string parameter, not a multi-value one. * It is a query parameter, not to be submitted in the POST request\'s body.  In python:      r = requests.post(         \'https://api.semanticscholar.org/graph/v1/author/batch\',         params={\'fields\': \'name,hIndex,citationCount\'},         json={\"ids\":[\"1741101\", \"1780531\"]}     )     print(json.dumps(r.json(), indent=2))      [       {         \"authorId\": \"1741101\",         \"name\": \"Oren Etzioni\",         \"citationCount\": 34803,         \"hIndex\": 86       },       {         \"authorId\": \"1780531\",         \"name\": \"Daniel S. Weld\",         \"citationCount\": 35526,         \"hIndex\": 89       }     ]  Other Examples: <ul>     <li><code>https://api.semanticscholar.org/graph/v1/author/batch</code></li>     <ul>         <li><code>{\"ids\":[\"1741101\", \"1780531\", \"48323507\"]}</code></li>         <li>Returns details for 3 authors.</li>         <li>Each author returns the field authorId and name if no other fields are specified.</li>     </ul>     <li><code>https://api.semanticscholar.org/graph/v1/author/batch?fields=url,name,paperCount,papers,papers.title,papers.openAccessPdf</code></li>     <ul>         <li><code>{\"ids\":[\"1741101\", \"1780531\", \"48323507\"]}</code></li>         <li>Returns authorID, url, name, paperCount, and list of papers for 3 authors.</li>         <li>Each paper has its paperID, title, and link if available.</li>     </ul> </ul> <br> Limitations: <ul>     <li>Can only process 1,000 author ids at a time.</li>     <li>Can only return up to 10 MB of data at a time.</li> </ul>
     * Get details for multiple authors at once
     */
    async postGraphGetAuthors(requestParameters: PostGraphGetAuthorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthorWithPapers> {
        const response = await this.postGraphGetAuthorsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
