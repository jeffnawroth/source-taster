/* tslint:disable */
/* eslint-disable */
/**
 * Academic Graph API
 * Fetch paper and author data from the Semantic Scholar Academic Graph (S2AG).         <br><br>         Some things to note:         <ul>         <li>If you are using an API key, it must be set in the header <code>x-api-key</code> (case-sensitive).</li>         <li>We have two different IDs for a single paper:           <ul>             <li><code>paperId</code> - string - The primary way to identify papers when using our website or this API</li>             <li><code>corpusId</code> - int64 - A second way to identify papers. Our datasets use corpusId when pointing to papers.</li>           </ul>         </li>         <li>Other useful resources<ul>         <li><a href=\"https://www.semanticscholar.org/product/api\">Overview</a></li>         <li><a href=\"https://github.com/allenai/s2-folks/\">allenai/s2-folks</a></li>         <li><a href=\"https://github.com/allenai/s2-folks/blob/main/FAQ.md\">FAQ</a> in allenai/s2folks</li>         </ul></li>         
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Error400
 */
export interface Error400 {
    /**
     * Depending on the case, error message may be any of these:
     * <ul>
     *     <li><code>"Unrecognized or unsupported fields: [bad1, bad2, etc...]"</code></li>
     *     <li><code>"Unacceptable query params: [badK1=badV1, badK2=badV2, etc...}]"</code></li>
     *     <li><code>"Response would exceed maximum size...."</code></li>
     *         <ul><li>This error will occur when the response exceeds 10 MB. Suggestions to either break the request into smaller batches, or make use of the limit and offset features will be presented.</li></ul>
     *     <li>A custom message string</li></ul>
     * @type {string}
     * @memberof Error400
     */
    error?: string;
}

/**
 * Check if a given object implements the Error400 interface.
 */
export function instanceOfError400(value: object): value is Error400 {
    return true;
}

export function Error400FromJSON(json: any): Error400 {
    return Error400FromJSONTyped(json, false);
}

export function Error400FromJSONTyped(json: any, ignoreDiscriminator: boolean): Error400 {
    if (json == null) {
        return json;
    }
    return {
        
        'error': json['error'] == null ? undefined : json['error'],
    };
}

export function Error400ToJSON(json: any): Error400 {
    return Error400ToJSONTyped(json, false);
}

export function Error400ToJSONTyped(value?: Error400 | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'error': value['error'],
    };
}

