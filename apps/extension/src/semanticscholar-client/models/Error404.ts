/* tslint:disable */
/* eslint-disable */
/**
 * Academic Graph API
 * Fetch paper and author data from the Semantic Scholar Academic Graph (S2AG).         <br><br>         Some things to note:         <ul>         <li>If you are using an API key, it must be set in the header <code>x-api-key</code> (case-sensitive).</li>         <li>We have two different IDs for a single paper:           <ul>             <li><code>paperId</code> - string - The primary way to identify papers when using our website or this API</li>             <li><code>corpusId</code> - int64 - A second way to identify papers. Our datasets use corpusId when pointing to papers.</li>           </ul>         </li>         <li>Other useful resources<ul>         <li><a href=\"https://www.semanticscholar.org/product/api\">Overview</a></li>         <li><a href=\"https://github.com/allenai/s2-folks/\">allenai/s2-folks</a></li>         <li><a href=\"https://github.com/allenai/s2-folks/blob/main/FAQ.md\">FAQ</a> in allenai/s2folks</li>         </ul></li>         
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Error404
 */
export interface Error404 {
    /**
     * Depending on the case, error message may be any of these:
     * <ul>
     *     <li><code>"Paper/Author/Object not found"</code></li>
     *     <li><code>"Paper/Author/Object with id ### not found"</code></li>
     * </ul>
     * @type {string}
     * @memberof Error404
     */
    error?: string;
}

/**
 * Check if a given object implements the Error404 interface.
 */
export function instanceOfError404(value: object): value is Error404 {
    return true;
}

export function Error404FromJSON(json: any): Error404 {
    return Error404FromJSONTyped(json, false);
}

export function Error404FromJSONTyped(json: any, ignoreDiscriminator: boolean): Error404 {
    if (json == null) {
        return json;
    }
    return {
        
        'error': json['error'] == null ? undefined : json['error'],
    };
}

export function Error404ToJSON(json: any): Error404 {
    return Error404ToJSONTyped(json, false);
}

export function Error404ToJSONTyped(value?: Error404 | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'error': value['error'],
    };
}

