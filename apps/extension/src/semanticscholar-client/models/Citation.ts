/* tslint:disable */
/* eslint-disable */
/**
 * Academic Graph API
 * Fetch paper and author data from the Semantic Scholar Academic Graph (S2AG).         <br><br>         Some things to note:         <ul>         <li>If you are using an API key, it must be set in the header <code>x-api-key</code> (case-sensitive).</li>         <li>We have two different IDs for a single paper:           <ul>             <li><code>paperId</code> - string - The primary way to identify papers when using our website or this API</li>             <li><code>corpusId</code> - int64 - A second way to identify papers. Our datasets use corpusId when pointing to papers.</li>           </ul>         </li>         <li>Other useful resources<ul>         <li><a href=\"https://www.semanticscholar.org/product/api\">Overview</a></li>         <li><a href=\"https://github.com/allenai/s2-folks/\">allenai/s2-folks</a></li>         <li><a href=\"https://github.com/allenai/s2-folks/blob/main/FAQ.md\">FAQ</a> in allenai/s2folks</li>         </ul></li>         
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { BasePaper } from './BasePaper';
import {
    BasePaperFromJSON,
    BasePaperFromJSONTyped,
    BasePaperToJSON,
    BasePaperToJSONTyped,
} from './BasePaper';

/**
 * 
 * @export
 * @interface Citation
 */
export interface Citation {
    /**
     * Array of text snippets where the reference to the paper is mentioned.
     * @type {Array<string>}
     * @memberof Citation
     */
    contexts?: Array<string>;
    /**
     * Array of citation intents that summarizes how the reference to the paper is mentioned. Possible intents: https://www.semanticscholar.org/faq#citation-intent
     * @type {Array<string>}
     * @memberof Citation
     */
    intents?: Array<string>;
    /**
     * Array of objects that contain both contexts and the intents they are associated with.
     * @type {Array<object>}
     * @memberof Citation
     */
    contextsWithIntent?: Array<object>;
    /**
     * Whether the citing paper is highly influential. See more about influential citations: https://www.semanticscholar.org/faq#influential-citations
     * @type {boolean}
     * @memberof Citation
     */
    isInfluential?: boolean;
    /**
     * Details about the citing paper
     * @type {BasePaper}
     * @memberof Citation
     */
    citingPaper?: BasePaper;
}

/**
 * Check if a given object implements the Citation interface.
 */
export function instanceOfCitation(value: object): value is Citation {
    return true;
}

export function CitationFromJSON(json: any): Citation {
    return CitationFromJSONTyped(json, false);
}

export function CitationFromJSONTyped(json: any, ignoreDiscriminator: boolean): Citation {
    if (json == null) {
        return json;
    }
    return {
        
        'contexts': json['contexts'] == null ? undefined : json['contexts'],
        'intents': json['intents'] == null ? undefined : json['intents'],
        'contextsWithIntent': json['contextsWithIntent'] == null ? undefined : json['contextsWithIntent'],
        'isInfluential': json['isInfluential'] == null ? undefined : json['isInfluential'],
        'citingPaper': json['citingPaper'] == null ? undefined : BasePaperFromJSON(json['citingPaper']),
    };
}

export function CitationToJSON(json: any): Citation {
    return CitationToJSONTyped(json, false);
}

export function CitationToJSONTyped(value?: Citation | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'contexts': value['contexts'],
        'intents': value['intents'],
        'contextsWithIntent': value['contextsWithIntent'],
        'isInfluential': value['isInfluential'],
        'citingPaper': BasePaperToJSON(value['citingPaper']),
    };
}

