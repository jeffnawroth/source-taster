/* tslint:disable */
/* eslint-disable */
/**
 * Academic Graph API
 * Fetch paper and author data from the Semantic Scholar Academic Graph (S2AG).         <br><br>         Some things to note:         <ul>         <li>If you are using an API key, it must be set in the header <code>x-api-key</code> (case-sensitive).</li>         <li>We have two different IDs for a single paper:           <ul>             <li><code>paperId</code> - string - The primary way to identify papers when using our website or this API</li>             <li><code>corpusId</code> - int64 - A second way to identify papers. Our datasets use corpusId when pointing to papers.</li>           </ul>         </li>         <li>Other useful resources<ul>         <li><a href=\"https://www.semanticscholar.org/product/api\">Overview</a></li>         <li><a href=\"https://github.com/allenai/s2-folks/\">allenai/s2-folks</a></li>         <li><a href=\"https://github.com/allenai/s2-folks/blob/main/FAQ.md\">FAQ</a> in allenai/s2folks</li>         </ul></li>         
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AuthorInfo } from './AuthorInfo';
import {
    AuthorInfoFromJSON,
    AuthorInfoFromJSONTyped,
    AuthorInfoToJSON,
    AuthorInfoToJSONTyped,
} from './AuthorInfo';
import type { PaperInfo } from './PaperInfo';
import {
    PaperInfoFromJSON,
    PaperInfoFromJSONTyped,
    PaperInfoToJSON,
    PaperInfoToJSONTyped,
} from './PaperInfo';

/**
 * 
 * @export
 * @interface PaperWithLinks
 */
export interface PaperWithLinks {
    /**
     * Semantic Scholar’s primary unique identifier for a paper.
     * @type {string}
     * @memberof PaperWithLinks
     */
    paperId?: string;
    /**
     * Semantic Scholar’s secondary unique identifier for a paper.
     * @type {number}
     * @memberof PaperWithLinks
     */
    corpusId?: number;
    /**
     * An object that contains the paper’s unique identifiers in external sources. The external sources are limited to: ArXiv, MAG, ACL, PubMed, Medline, PubMedCentral, DBLP, and DOI.
     * @type {object}
     * @memberof PaperWithLinks
     */
    externalIds?: object;
    /**
     * URL of the paper on the Semantic Scholar website.
     * @type {string}
     * @memberof PaperWithLinks
     */
    url?: string;
    /**
     * Title of the paper.
     * @type {string}
     * @memberof PaperWithLinks
     */
    title?: string;
    /**
     * The paper's abstract. Note that due to legal reasons, this may be missing even if we display an abstract on the website.
     * @type {string}
     * @memberof PaperWithLinks
     */
    _abstract?: string;
    /**
     * The name of the paper’s publication venue.
     * @type {string}
     * @memberof PaperWithLinks
     */
    venue?: string;
    /**
     * An object that contains the following information about the journal or conference in which this paper was published: id (the venue’s unique ID), name (the venue’s name), type (the type of venue), alternate_names (an array of alternate names for the venue), and url (the venue’s website).
     * @type {object}
     * @memberof PaperWithLinks
     */
    publicationVenue?: object;
    /**
     * The year the paper was published.
     * @type {number}
     * @memberof PaperWithLinks
     */
    year?: number;
    /**
     * The total number of papers this paper references.
     * @type {number}
     * @memberof PaperWithLinks
     */
    referenceCount?: number;
    /**
     * The total number of papers that references this paper.
     * @type {number}
     * @memberof PaperWithLinks
     */
    citationCount?: number;
    /**
     * A subset of the citation count, where the cited publication has a significant impact on the citing publication. Determined by Semantic Scholar’s algorithm: https://www.semanticscholar.org/faq#influential-citations.
     * @type {number}
     * @memberof PaperWithLinks
     */
    influentialCitationCount?: number;
    /**
     * Whether the paper is open access. More information here: https://www.openaccess.nl/en/what-is-open-access.
     * @type {boolean}
     * @memberof PaperWithLinks
     */
    isOpenAccess?: boolean;
    /**
     * An object that contains the following parameters: url (a link to the paper’s PDF), status (the type of open access https://en.wikipedia.org/wiki/Open_access#Colour_naming_system), the paper's license, and a legal disclaimer.
     * @type {object}
     * @memberof PaperWithLinks
     */
    openAccessPdf?: object;
    /**
     * A list of the paper’s high-level academic categories from external sources. The possible fields are: Computer Science, Medicine, Chemistry, Biology, Materials Science, Physics, Geology, Psychology, Art, History, Geography, Sociology, Business, Political Science, Economics, Philosophy, Mathematics, Engineering, Environmental Science, Agricultural and Food Sciences, Education, Law, and Linguistics.
     * @type {Array<string>}
     * @memberof PaperWithLinks
     */
    fieldsOfStudy?: Array<string>;
    /**
     * An array of objects. Each object contains the following parameters: category (a field of study. The possible fields are the same as in fieldsOfStudy), and source (specifies whether the category was classified by Semantic Scholar or by an external source. More information on how Semantic Scholar classifies papers https://blog.allenai.org/announcing-s2fos-an-open-source-academic-field-of-study-classifier-9d2f641949e5)
     * @type {Array<object>}
     * @memberof PaperWithLinks
     */
    s2FieldsOfStudy?: Array<object>;
    /**
     * The type of this publication.
     * @type {Array<string>}
     * @memberof PaperWithLinks
     */
    publicationTypes?: Array<string>;
    /**
     * The date when this paper was published, in YYYY-MM-DD format.
     * @type {string}
     * @memberof PaperWithLinks
     */
    publicationDate?: string;
    /**
     * An object that contains the following parameters, if available: name (the journal name), volume (the journal’s volume number), and pages (the page number range)
     * @type {object}
     * @memberof PaperWithLinks
     */
    journal?: object;
    /**
     * The BibTex bibliographical citation of the paper.
     * @type {object}
     * @memberof PaperWithLinks
     */
    citationStyles?: object;
    /**
     * Details about the paper's authors
     * @type {Array<AuthorInfo>}
     * @memberof PaperWithLinks
     */
    authors?: Array<AuthorInfo>;
    /**
     * 
     * @type {Array<PaperInfo>}
     * @memberof PaperWithLinks
     */
    citations?: Array<PaperInfo>;
    /**
     * 
     * @type {Array<PaperInfo>}
     * @memberof PaperWithLinks
     */
    references?: Array<PaperInfo>;
}

/**
 * Check if a given object implements the PaperWithLinks interface.
 */
export function instanceOfPaperWithLinks(value: object): value is PaperWithLinks {
    return true;
}

export function PaperWithLinksFromJSON(json: any): PaperWithLinks {
    return PaperWithLinksFromJSONTyped(json, false);
}

export function PaperWithLinksFromJSONTyped(json: any, ignoreDiscriminator: boolean): PaperWithLinks {
    if (json == null) {
        return json;
    }
    return {
        
        'paperId': json['paperId'] == null ? undefined : json['paperId'],
        'corpusId': json['corpusId'] == null ? undefined : json['corpusId'],
        'externalIds': json['externalIds'] == null ? undefined : json['externalIds'],
        'url': json['url'] == null ? undefined : json['url'],
        'title': json['title'] == null ? undefined : json['title'],
        '_abstract': json['abstract'] == null ? undefined : json['abstract'],
        'venue': json['venue'] == null ? undefined : json['venue'],
        'publicationVenue': json['publicationVenue'] == null ? undefined : json['publicationVenue'],
        'year': json['year'] == null ? undefined : json['year'],
        'referenceCount': json['referenceCount'] == null ? undefined : json['referenceCount'],
        'citationCount': json['citationCount'] == null ? undefined : json['citationCount'],
        'influentialCitationCount': json['influentialCitationCount'] == null ? undefined : json['influentialCitationCount'],
        'isOpenAccess': json['isOpenAccess'] == null ? undefined : json['isOpenAccess'],
        'openAccessPdf': json['openAccessPdf'] == null ? undefined : json['openAccessPdf'],
        'fieldsOfStudy': json['fieldsOfStudy'] == null ? undefined : json['fieldsOfStudy'],
        's2FieldsOfStudy': json['s2FieldsOfStudy'] == null ? undefined : json['s2FieldsOfStudy'],
        'publicationTypes': json['publicationTypes'] == null ? undefined : json['publicationTypes'],
        'publicationDate': json['publicationDate'] == null ? undefined : json['publicationDate'],
        'journal': json['journal'] == null ? undefined : json['journal'],
        'citationStyles': json['citationStyles'] == null ? undefined : json['citationStyles'],
        'authors': json['authors'] == null ? undefined : ((json['authors'] as Array<any>).map(AuthorInfoFromJSON)),
        'citations': json['citations'] == null ? undefined : ((json['citations'] as Array<any>).map(PaperInfoFromJSON)),
        'references': json['references'] == null ? undefined : ((json['references'] as Array<any>).map(PaperInfoFromJSON)),
    };
}

export function PaperWithLinksToJSON(json: any): PaperWithLinks {
    return PaperWithLinksToJSONTyped(json, false);
}

export function PaperWithLinksToJSONTyped(value?: PaperWithLinks | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'paperId': value['paperId'],
        'corpusId': value['corpusId'],
        'externalIds': value['externalIds'],
        'url': value['url'],
        'title': value['title'],
        'abstract': value['_abstract'],
        'venue': value['venue'],
        'publicationVenue': value['publicationVenue'],
        'year': value['year'],
        'referenceCount': value['referenceCount'],
        'citationCount': value['citationCount'],
        'influentialCitationCount': value['influentialCitationCount'],
        'isOpenAccess': value['isOpenAccess'],
        'openAccessPdf': value['openAccessPdf'],
        'fieldsOfStudy': value['fieldsOfStudy'],
        's2FieldsOfStudy': value['s2FieldsOfStudy'],
        'publicationTypes': value['publicationTypes'],
        'publicationDate': value['publicationDate'],
        'journal': value['journal'],
        'citationStyles': value['citationStyles'],
        'authors': value['authors'] == null ? undefined : ((value['authors'] as Array<any>).map(AuthorInfoToJSON)),
        'citations': value['citations'] == null ? undefined : ((value['citations'] as Array<any>).map(PaperInfoToJSON)),
        'references': value['references'] == null ? undefined : ((value['references'] as Array<any>).map(PaperInfoToJSON)),
    };
}

