/* tslint:disable */
/* eslint-disable */
/**
 * Academic Graph API
 * Fetch paper and author data from the Semantic Scholar Academic Graph (S2AG).         <br><br>         Some things to note:         <ul>         <li>If you are using an API key, it must be set in the header <code>x-api-key</code> (case-sensitive).</li>         <li>We have two different IDs for a single paper:           <ul>             <li><code>paperId</code> - string - The primary way to identify papers when using our website or this API</li>             <li><code>corpusId</code> - int64 - A second way to identify papers. Our datasets use corpusId when pointing to papers.</li>           </ul>         </li>         <li>Other useful resources<ul>         <li><a href=\"https://www.semanticscholar.org/product/api\">Overview</a></li>         <li><a href=\"https://github.com/allenai/s2-folks/\">allenai/s2-folks</a></li>         <li><a href=\"https://github.com/allenai/s2-folks/blob/main/FAQ.md\">FAQ</a> in allenai/s2folks</li>         </ul></li>         
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Tldr } from './Tldr';
import {
    TldrFromJSON,
    TldrFromJSONTyped,
    TldrToJSON,
    TldrToJSONTyped,
} from './Tldr';
import type { Author } from './Author';
import {
    AuthorFromJSON,
    AuthorFromJSONTyped,
    AuthorToJSON,
    AuthorToJSONTyped,
} from './Author';
import type { Embedding } from './Embedding';
import {
    EmbeddingFromJSON,
    EmbeddingFromJSONTyped,
    EmbeddingToJSON,
    EmbeddingToJSONTyped,
} from './Embedding';
import type { BasePaper } from './BasePaper';
import {
    BasePaperFromJSON,
    BasePaperFromJSONTyped,
    BasePaperToJSON,
    BasePaperToJSONTyped,
} from './BasePaper';

/**
 * 
 * @export
 * @interface FullPaper
 */
export interface FullPaper {
    /**
     * Semantic Scholar’s primary unique identifier for a paper.
     * @type {string}
     * @memberof FullPaper
     */
    paperId?: string;
    /**
     * Semantic Scholar’s secondary unique identifier for a paper.
     * @type {number}
     * @memberof FullPaper
     */
    corpusId?: number;
    /**
     * An object that contains the paper’s unique identifiers in external sources. The external sources are limited to: ArXiv, MAG, ACL, PubMed, Medline, PubMedCentral, DBLP, and DOI.
     * @type {object}
     * @memberof FullPaper
     */
    externalIds?: object;
    /**
     * URL of the paper on the Semantic Scholar website.
     * @type {string}
     * @memberof FullPaper
     */
    url?: string;
    /**
     * Title of the paper.
     * @type {string}
     * @memberof FullPaper
     */
    title?: string;
    /**
     * The paper's abstract. Note that due to legal reasons, this may be missing even if we display an abstract on the website.
     * @type {string}
     * @memberof FullPaper
     */
    _abstract?: string;
    /**
     * The name of the paper’s publication venue.
     * @type {string}
     * @memberof FullPaper
     */
    venue?: string;
    /**
     * An object that contains the following information about the journal or conference in which this paper was published: id (the venue’s unique ID), name (the venue’s name), type (the type of venue), alternate_names (an array of alternate names for the venue), and url (the venue’s website).
     * @type {object}
     * @memberof FullPaper
     */
    publicationVenue?: object;
    /**
     * The year the paper was published.
     * @type {number}
     * @memberof FullPaper
     */
    year?: number;
    /**
     * The total number of papers this paper references.
     * @type {number}
     * @memberof FullPaper
     */
    referenceCount?: number;
    /**
     * The total number of papers that references this paper.
     * @type {number}
     * @memberof FullPaper
     */
    citationCount?: number;
    /**
     * A subset of the citation count, where the cited publication has a significant impact on the citing publication. Determined by Semantic Scholar’s algorithm: https://www.semanticscholar.org/faq#influential-citations.
     * @type {number}
     * @memberof FullPaper
     */
    influentialCitationCount?: number;
    /**
     * Whether the paper is open access. More information here: https://www.openaccess.nl/en/what-is-open-access.
     * @type {boolean}
     * @memberof FullPaper
     */
    isOpenAccess?: boolean;
    /**
     * An object that contains the following parameters: url (a link to the paper’s PDF), status (the type of open access https://en.wikipedia.org/wiki/Open_access#Colour_naming_system), the paper's license, and a legal disclaimer.
     * @type {object}
     * @memberof FullPaper
     */
    openAccessPdf?: object;
    /**
     * A list of the paper’s high-level academic categories from external sources. The possible fields are: Computer Science, Medicine, Chemistry, Biology, Materials Science, Physics, Geology, Psychology, Art, History, Geography, Sociology, Business, Political Science, Economics, Philosophy, Mathematics, Engineering, Environmental Science, Agricultural and Food Sciences, Education, Law, and Linguistics.
     * @type {Array<string>}
     * @memberof FullPaper
     */
    fieldsOfStudy?: Array<string>;
    /**
     * An array of objects. Each object contains the following parameters: category (a field of study. The possible fields are the same as in fieldsOfStudy), and source (specifies whether the category was classified by Semantic Scholar or by an external source. More information on how Semantic Scholar classifies papers https://blog.allenai.org/announcing-s2fos-an-open-source-academic-field-of-study-classifier-9d2f641949e5)
     * @type {Array<object>}
     * @memberof FullPaper
     */
    s2FieldsOfStudy?: Array<object>;
    /**
     * The type of this publication.
     * @type {Array<string>}
     * @memberof FullPaper
     */
    publicationTypes?: Array<string>;
    /**
     * The date when this paper was published, in YYYY-MM-DD format.
     * @type {string}
     * @memberof FullPaper
     */
    publicationDate?: string;
    /**
     * An object that contains the following parameters, if available: name (the journal name), volume (the journal’s volume number), and pages (the page number range)
     * @type {object}
     * @memberof FullPaper
     */
    journal?: object;
    /**
     * The BibTex bibliographical citation of the paper.
     * @type {object}
     * @memberof FullPaper
     */
    citationStyles?: object;
    /**
     * 
     * @type {Array<Author>}
     * @memberof FullPaper
     */
    authors?: Array<Author>;
    /**
     * 
     * @type {Array<BasePaper>}
     * @memberof FullPaper
     */
    citations?: Array<BasePaper>;
    /**
     * 
     * @type {Array<BasePaper>}
     * @memberof FullPaper
     */
    references?: Array<BasePaper>;
    /**
     * 
     * @type {Embedding}
     * @memberof FullPaper
     */
    embedding?: Embedding;
    /**
     * 
     * @type {Tldr}
     * @memberof FullPaper
     */
    tldr?: Tldr;
}

/**
 * Check if a given object implements the FullPaper interface.
 */
export function instanceOfFullPaper(value: object): value is FullPaper {
    return true;
}

export function FullPaperFromJSON(json: any): FullPaper {
    return FullPaperFromJSONTyped(json, false);
}

export function FullPaperFromJSONTyped(json: any, ignoreDiscriminator: boolean): FullPaper {
    if (json == null) {
        return json;
    }
    return {
        
        'paperId': json['paperId'] == null ? undefined : json['paperId'],
        'corpusId': json['corpusId'] == null ? undefined : json['corpusId'],
        'externalIds': json['externalIds'] == null ? undefined : json['externalIds'],
        'url': json['url'] == null ? undefined : json['url'],
        'title': json['title'] == null ? undefined : json['title'],
        '_abstract': json['abstract'] == null ? undefined : json['abstract'],
        'venue': json['venue'] == null ? undefined : json['venue'],
        'publicationVenue': json['publicationVenue'] == null ? undefined : json['publicationVenue'],
        'year': json['year'] == null ? undefined : json['year'],
        'referenceCount': json['referenceCount'] == null ? undefined : json['referenceCount'],
        'citationCount': json['citationCount'] == null ? undefined : json['citationCount'],
        'influentialCitationCount': json['influentialCitationCount'] == null ? undefined : json['influentialCitationCount'],
        'isOpenAccess': json['isOpenAccess'] == null ? undefined : json['isOpenAccess'],
        'openAccessPdf': json['openAccessPdf'] == null ? undefined : json['openAccessPdf'],
        'fieldsOfStudy': json['fieldsOfStudy'] == null ? undefined : json['fieldsOfStudy'],
        's2FieldsOfStudy': json['s2FieldsOfStudy'] == null ? undefined : json['s2FieldsOfStudy'],
        'publicationTypes': json['publicationTypes'] == null ? undefined : json['publicationTypes'],
        'publicationDate': json['publicationDate'] == null ? undefined : json['publicationDate'],
        'journal': json['journal'] == null ? undefined : json['journal'],
        'citationStyles': json['citationStyles'] == null ? undefined : json['citationStyles'],
        'authors': json['authors'] == null ? undefined : ((json['authors'] as Array<any>).map(AuthorFromJSON)),
        'citations': json['citations'] == null ? undefined : ((json['citations'] as Array<any>).map(BasePaperFromJSON)),
        'references': json['references'] == null ? undefined : ((json['references'] as Array<any>).map(BasePaperFromJSON)),
        'embedding': json['embedding'] == null ? undefined : EmbeddingFromJSON(json['embedding']),
        'tldr': json['tldr'] == null ? undefined : TldrFromJSON(json['tldr']),
    };
}

export function FullPaperToJSON(json: any): FullPaper {
    return FullPaperToJSONTyped(json, false);
}

export function FullPaperToJSONTyped(value?: FullPaper | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'paperId': value['paperId'],
        'corpusId': value['corpusId'],
        'externalIds': value['externalIds'],
        'url': value['url'],
        'title': value['title'],
        'abstract': value['_abstract'],
        'venue': value['venue'],
        'publicationVenue': value['publicationVenue'],
        'year': value['year'],
        'referenceCount': value['referenceCount'],
        'citationCount': value['citationCount'],
        'influentialCitationCount': value['influentialCitationCount'],
        'isOpenAccess': value['isOpenAccess'],
        'openAccessPdf': value['openAccessPdf'],
        'fieldsOfStudy': value['fieldsOfStudy'],
        's2FieldsOfStudy': value['s2FieldsOfStudy'],
        'publicationTypes': value['publicationTypes'],
        'publicationDate': value['publicationDate'],
        'journal': value['journal'],
        'citationStyles': value['citationStyles'],
        'authors': value['authors'] == null ? undefined : ((value['authors'] as Array<any>).map(AuthorToJSON)),
        'citations': value['citations'] == null ? undefined : ((value['citations'] as Array<any>).map(BasePaperToJSON)),
        'references': value['references'] == null ? undefined : ((value['references'] as Array<any>).map(BasePaperToJSON)),
        'embedding': EmbeddingToJSON(value['embedding']),
        'tldr': TldrToJSON(value['tldr']),
    };
}

